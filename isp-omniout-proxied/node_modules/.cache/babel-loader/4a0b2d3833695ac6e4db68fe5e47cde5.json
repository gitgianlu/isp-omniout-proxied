{"ast":null,"code":"/*global process*/\n\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar inherits = require('inherits'),\n    stream = require('readable-stream'),\n    Duplex = stream.Duplex,\n    events = require('events'),\n    _ = require('lodash/core'),\n    joinStreams = require('multistream'),\n    jsforce = require('../core'),\n    RecordStream = require('../record-stream'),\n    Promise = require('../promise'),\n    HttpApi = require('../http-api');\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n *\n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {String} [jobId] - Job ID (if already available)\n */\n\n\nvar Job = function (bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\n\nJob.prototype.info = function (callback) {\n  var self = this; // if cache is not available, check the latest\n\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  }\n\n  return this._jobInfo.thenCall(callback);\n};\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\n\n\nJob.prototype.open = function (callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger; // if not requested opening job\n\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n\n    if (operation === 'harddelete') {\n      operation = 'hardDelete';\n    }\n\n    var body = ['<?xml version=\"1.0\" encoding=\"UTF-8\"?>', '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">', '<operation>' + operation + '</operation>', '<object>' + this.type + '</object>', this.options.extIdField ? '<externalIdFieldName>' + this.options.extIdField + '</externalIdFieldName>' : '', this.options.concurrencyMode ? '<concurrencyMode>' + this.options.concurrencyMode + '</concurrencyMode>' : '', this.options.assignmentRuleId ? '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' : '', '<contentType>CSV</contentType>', '</jobInfo>'].join('');\n    this._jobInfo = bulk._request({\n      method: 'POST',\n      path: \"/job\",\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    }).then(function (res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function (err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n\n  return this._jobInfo.thenCall(callback);\n};\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\n\n\nJob.prototype.createBatch = function () {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function () {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\n\n\nJob.prototype.batch = function (batchId) {\n  var batch = this._batches[batchId];\n\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n\n  return batch;\n};\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\n\n\nJob.prototype.check = function (callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  this._jobInfo = this._waitAssign().then(function () {\n    return bulk._request({\n      method: 'GET',\n      path: \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function (res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\n\n\nJob.prototype._waitAssign = function (callback) {\n  return (this.id ? Promise.resolve({\n    id: this.id\n  }) : this.open()).thenCall(callback);\n};\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\n\n\nJob.prototype.list = function (callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  return this._waitAssign().then(function () {\n    return bulk._request({\n      method: 'GET',\n      path: \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function (res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [batchInfoList.batchInfo];\n    return batchInfoList;\n  }).thenCall(callback);\n};\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\n\n\nJob.prototype.close = function () {\n  var self = this;\n  return this._changeState(\"Closed\").then(function (jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function (err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\n\n\nJob.prototype.abort = function () {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function (jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function (err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n/**\n * @private\n */\n\n\nJob.prototype._changeState = function (state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  this._jobInfo = this._waitAssign().then(function () {\n    var body = ['<?xml version=\"1.0\" encoding=\"UTF-8\"?>', '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">', '<state>' + state + '</state>', '</jobInfo>'].join('');\n    return bulk._request({\n      method: 'POST',\n      path: \"/job/\" + self.id,\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function (res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {stream.Writable}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\n\n\nvar Batch = function (job, batchId) {\n  Batch.super_.call(this, {\n    objectMode: true\n  });\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._deferred = Promise.defer();\n\n  this._setupDataStreams();\n};\n\ninherits(Batch, stream.Writable);\n/**\n * @private\n */\n\nBatch.prototype._setupDataStreams = function () {\n  var batch = this;\n  var converterOptions = {\n    nullValue: '#N/A'\n  };\n  this._uploadStream = new RecordStream.Serializable();\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\n  this._downloadStream = new RecordStream.Parsable();\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\n  this.on('finish', function () {\n    batch._uploadStream.end();\n  });\n\n  this._uploadDataStream.once('readable', function () {\n    batch.job.open().then(function () {\n      // pipe upload data to batch API request stream\n      batch._uploadDataStream.pipe(batch._createRequestStream());\n    });\n  }); // duplex data stream, opened access to API programmers by Batch#stream()\n\n\n  var dataStream = this._dataStream = new Duplex();\n\n  dataStream._write = function (data, enc, cb) {\n    batch._uploadDataStream.write(data, enc, cb);\n  };\n\n  dataStream.on('finish', function () {\n    batch._uploadDataStream.end();\n  });\n\n  this._downloadDataStream.on('readable', function () {\n    dataStream.read(0);\n  });\n\n  this._downloadDataStream.on('end', function () {\n    dataStream.push(null);\n  });\n\n  dataStream._read = function (size) {\n    var chunk;\n\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\n      dataStream.push(chunk);\n    }\n  };\n};\n/**\n * Connect batch API and create stream instance of request/response\n *\n * @private\n * @returns {stream.Duplex}\n */\n\n\nBatch.prototype._createRequestStream = function () {\n  var batch = this;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n  return bulk._request({\n    method: 'POST',\n    path: \"/job/\" + batch.job.id + \"/batch\",\n    headers: {\n      \"Content-Type\": \"text/csv\"\n    },\n    responseType: \"application/xml\"\n  }, function (err, res) {\n    if (err) {\n      batch.emit('error', err);\n    } else {\n      logger.debug(res.batchInfo);\n      batch.id = res.batchInfo.id;\n      batch.emit('queue', res.batchInfo);\n    }\n  }).stream();\n};\n/**\n * Implementation of Writable\n *\n * @override\n * @private\n */\n\n\nBatch.prototype._write = function (record, enc, cb) {\n  record = _.clone(record);\n\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = {\n      Id: record.Id\n    };\n  }\n\n  delete record.type;\n  delete record.attributes;\n\n  this._uploadStream.write(record, enc, cb);\n};\n/**\n * Returns duplex stream which accepts CSV data input and batch result output\n *\n * @returns {stream.Duplex}\n */\n\n\nBatch.prototype.stream = function () {\n  return this._dataStream;\n};\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n\nBatch.prototype.run = Batch.prototype.exec = Batch.prototype.execute = function (input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') {\n    // if input argument is omitted\n    callback = input;\n    input = null;\n  } // if batch is already executed\n\n\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n\n  this._result.then(function (res) {\n    self._deferred.resolve(res);\n  }, function (err) {\n    self._deferred.reject(err);\n  });\n\n  this.once('response', function (res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function (err) {\n    rdeferred.reject(err);\n  });\n\n  if (_.isObject(input) && _.isFunction(input.pipe)) {\n    // if input has stream.Readable interface\n    input.pipe(this._dataStream);\n  } else {\n    var data;\n\n    if (_.isArray(input)) {\n      _.forEach(input, function (record) {\n        Object.keys(record).forEach(function (key) {\n          if (typeof record[key] === 'boolean') {\n            record[key] = String(record[key]);\n          }\n        });\n        self.write(record);\n      });\n\n      self.end();\n    } else if (_.isString(input)) {\n      data = input;\n\n      this._dataStream.write(data, 'utf8');\n\n      this._dataStream.end();\n    }\n  } // return Batch instance for chaining\n\n\n  return this.thenCall(callback);\n};\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\n\n\nBatch.prototype.then = function (onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\n\n\nBatch.prototype.thenCall = function (callback) {\n  if (_.isFunction(callback)) {\n    this.then(function (res) {\n      process.nextTick(function () {\n        callback(null, res);\n      });\n    }, function (err) {\n      process.nextTick(function () {\n        callback(err);\n      });\n    });\n  }\n\n  return this;\n};\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\n\n\nBatch.prototype.check = function (callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return bulk._request({\n    method: 'GET',\n    path: \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function (res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\n\n\nBatch.prototype.poll = function (interval, timeout) {\n  var self = this;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  var startTime = new Date().getTime();\n\n  var poll = function () {\n    var now = new Date().getTime();\n\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      err.jobId = jobId;\n      err.batchId = batchId;\n      self.emit('error', err);\n      return;\n    }\n\n    self.check(function (err, res) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        if (res.state === \"Failed\") {\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n            self.retrieve();\n          } else {\n            self.emit('error', new Error(res.stateMessage));\n          }\n        } else if (res.state === \"Completed\") {\n          self.retrieve();\n        } else {\n          self.emit('progress', res);\n          setTimeout(poll, interval);\n        }\n      }\n    });\n  };\n\n  setTimeout(poll, interval);\n};\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\n\n\nBatch.prototype.retrieve = function (callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function (jobInfo) {\n    return bulk._request({\n      method: 'GET',\n      path: \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function (res) {\n    var results;\n\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [results], function (id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function (ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ret.Error] : []\n        };\n      });\n    }\n\n    self.emit('response', results);\n    return results;\n  }).fail(function (err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\n */\n\n\nBatch.prototype.result = function (resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  var resultStream = new RecordStream.Parsable();\n  var resultDataStream = resultStream.stream('csv');\n\n  var reqStream = this._bulk._request({\n    method: 'GET',\n    path: \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId,\n    responseType: \"application/octet-stream\"\n  }).stream().pipe(resultDataStream);\n\n  return resultStream;\n};\n/*--------------------------------------------*/\n\n/**\n * @private\n */\n\n\nvar BulkApi = function () {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function (request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function (response) {\n  return response.statusCode === 400 && /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function (body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function (body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\n\n\nvar Bulk = function (conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\n\n\nBulk.prototype.pollInterval = 1000;\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\n\nBulk.prototype.pollTimeout = 10000;\n/** @private **/\n\nBulk.prototype._request = function (request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [conn.instanceUrl, \"services/async\", conn.version].join('/');\n  request.url = baseUrl + request.path;\n  var options = {\n    responseType: request.responseType\n  };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\n};\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n\nBulk.prototype.load = function (type, operation, options, input, callback) {\n  var self = this;\n\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n\n  if (!_.isObject(options) || options.constructor !== Object) {\n    // when options is not plain hash object, it is omitted\n    callback = input;\n    input = options;\n    options = null;\n  }\n\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n\n  var cleanup = function () {\n    batch = null;\n    job.close();\n  };\n\n  var cleanupOnError = function (err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function () {\n    batch.poll(self.pollInterval, self.pollTimeout);\n  });\n  return batch.execute(input, callback);\n};\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\n */\n\n\nBulk.prototype.query = function (soql) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n\n  var type = m[1];\n  var self = this;\n  var recordStream = new RecordStream.Parsable();\n  var dataStream = recordStream.stream('csv');\n  this.load(type, \"query\", soql).then(function (results) {\n    var streams = results.map(function (result) {\n      return self.job(result.jobId).batch(result.batchId).result(result.id).stream();\n    });\n    joinStreams(streams).pipe(dataStream);\n  }).fail(function (err) {\n    recordStream.emit('error', err);\n  });\n  return recordStream;\n};\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\n\n\nBulk.prototype.createJob = function (type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\n\n\nBulk.prototype.job = function (jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n/*--------------------------------------------*/\n\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\n\n\njsforce.on('connection:new', function (conn) {\n  conn.bulk = new Bulk(conn);\n});\nmodule.exports = Bulk;","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/api/bulk.js"],"names":["inherits","require","stream","Duplex","events","_","joinStreams","jsforce","RecordStream","Promise","HttpApi","Job","bulk","type","operation","options","jobId","_bulk","id","state","_batches","EventEmitter","prototype","info","callback","self","_jobInfo","check","thenCall","open","logger","_logger","toLowerCase","body","extIdField","concurrencyMode","assignmentRuleId","join","_request","method","path","headers","responseType","then","res","emit","jobInfo","err","createBatch","batch","Batch","on","batchId","_waitAssign","debug","object","resolve","list","batchInfoList","batchInfo","isArray","close","_changeState","abort","job","super_","call","objectMode","_deferred","defer","_setupDataStreams","Writable","converterOptions","nullValue","_uploadStream","Serializable","_uploadDataStream","_downloadStream","Parsable","_downloadDataStream","end","once","pipe","_createRequestStream","dataStream","_dataStream","_write","data","enc","cb","write","read","push","_read","size","chunk","record","clone","Id","attributes","run","exec","execute","input","_result","Error","rdeferred","promise","reject","isObject","isFunction","forEach","Object","keys","key","String","isString","onResolved","onReject","onProgress","process","nextTick","poll","interval","timeout","startTime","Date","getTime","now","name","parseInt","numberRecordsProcessed","retrieve","stateMessage","setTimeout","results","conn","_conn","resultIds","result","map","ret","success","Success","errors","fail","resultId","resultStream","resultDataStream","reqStream","BulkApi","apply","arguments","beforeSend","request","accessToken","isSessionExpired","response","statusCode","test","hasErrorInResponseBody","error","parseError","errorCode","exceptionCode","message","exceptionMessage","Bulk","pollInterval","pollTimeout","baseUrl","instanceUrl","version","url","load","constructor","createJob","cleanup","cleanupOnError","query","soql","m","replace","match","recordStream","streams","module","exports"],"mappings":"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","sourcesContent":["/*global process*/\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits     = require('inherits'),\n    stream       = require('readable-stream'),\n    Duplex       = stream.Duplex,\n    events       = require('events'),\n    _            = require('lodash/core'),\n    joinStreams  = require('multistream'),\n    jsforce      = require('../core'),\n    RecordStream = require('../record-stream'),\n    Promise      = require('../promise'),\n    HttpApi      = require('../http-api');\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n *\n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {String} [jobId] - Job ID (if already available)\n */\nvar Job = function(bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.info = function(callback) {\n  var self = this;\n  // if cache is not available, check the latest\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.open = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  // if not requested opening job\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<operation>' + operation + '</operation>',\n        '<object>' + this.type + '</object>',\n        (this.options.extIdField ?\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\n         ''),\n        (this.options.concurrencyMode ?\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\n         ''),\n        (this.options.assignmentRuleId ?\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\n          ''),\n        '<contentType>CSV</contentType>',\n      '</jobInfo>'\n    ].join('');\n\n    this._jobInfo = bulk._request({\n      method : 'POST',\n      path : \"/job\",\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    }).then(function(res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function(err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\nJob.prototype.createBatch = function() {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function() {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\nJob.prototype.batch = function(batchId) {\n  var batch = this._batches[batchId];\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n  return batch;\n};\n\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype._waitAssign = function(callback) {\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\n};\n\n\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\nJob.prototype.list = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  return this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\n    return batchInfoList;\n  }).thenCall(callback);\n\n};\n\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.close = function() {\n  var self = this;\n  return this._changeState(\"Closed\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.abort = function() {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * @private\n */\nJob.prototype._changeState = function(state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<state>' + state + '</state>',\n      '</jobInfo>'\n    ].join('');\n    return bulk._request({\n      method : 'POST',\n      path : \"/job/\" + self.id,\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {stream.Writable}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\nvar Batch = function(job, batchId) {\n  Batch.super_.call(this, { objectMode: true });\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._deferred = Promise.defer();\n  this._setupDataStreams();\n};\n\ninherits(Batch, stream.Writable);\n\n\n/**\n * @private\n */\nBatch.prototype._setupDataStreams = function() {\n  var batch = this;\n  var converterOptions = { nullValue : '#N/A' };\n  this._uploadStream = new RecordStream.Serializable();\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\n  this._downloadStream = new RecordStream.Parsable();\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\n\n  this.on('finish', function() {\n    batch._uploadStream.end();\n  });\n  this._uploadDataStream.once('readable', function() {\n    batch.job.open().then(function() {\n      // pipe upload data to batch API request stream\n      batch._uploadDataStream.pipe(batch._createRequestStream());\n    });\n  });\n\n  // duplex data stream, opened access to API programmers by Batch#stream()\n  var dataStream = this._dataStream = new Duplex();\n  dataStream._write = function(data, enc, cb) {\n    batch._uploadDataStream.write(data, enc, cb);\n  };\n  dataStream.on('finish', function() {\n    batch._uploadDataStream.end();\n  });\n\n  this._downloadDataStream.on('readable', function() {\n    dataStream.read(0);\n  });\n  this._downloadDataStream.on('end', function() {\n    dataStream.push(null);\n  });\n  dataStream._read = function(size) {\n    var chunk;\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\n      dataStream.push(chunk);\n    }\n  };\n};\n\n/**\n * Connect batch API and create stream instance of request/response\n *\n * @private\n * @returns {stream.Duplex}\n */\nBatch.prototype._createRequestStream = function() {\n  var batch = this;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n\n  return bulk._request({\n    method : 'POST',\n    path : \"/job/\" + batch.job.id + \"/batch\",\n    headers: {\n      \"Content-Type\": \"text/csv\"\n    },\n    responseType: \"application/xml\"\n  }, function(err, res) {\n    if (err) {\n      batch.emit('error', err);\n    } else {\n      logger.debug(res.batchInfo);\n      batch.id = res.batchInfo.id;\n      batch.emit('queue', res.batchInfo);\n    }\n  }).stream();\n};\n\n/**\n * Implementation of Writable\n *\n * @override\n * @private\n */\nBatch.prototype._write = function(record, enc, cb) {\n  record = _.clone(record);\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = { Id: record.Id };\n  }\n  delete record.type;\n  delete record.attributes;\n  this._uploadStream.write(record, enc, cb);\n};\n\n/**\n * Returns duplex stream which accepts CSV data input and batch result output\n *\n * @returns {stream.Duplex}\n */\nBatch.prototype.stream = function() {\n  return this._dataStream;\n};\n\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBatch.prototype.run =\nBatch.prototype.exec =\nBatch.prototype.execute = function(input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') { // if input argument is omitted\n    callback = input;\n    input = null;\n  }\n\n  // if batch is already executed\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n  this._result.then(function(res) {\n    self._deferred.resolve(res);\n  }, function(err) {\n    self._deferred.reject(err);\n  });\n  this.once('response', function(res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function(err) {\n    rdeferred.reject(err);\n  });\n\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\n    input.pipe(this._dataStream);\n  } else {\n    var data;\n    if (_.isArray(input)) {\n      _.forEach(input, function(record) {\n        Object.keys(record).forEach(function(key) {\n          if (typeof record[key] === 'boolean') {\n            record[key] = String(record[key])\n          }\n        })\n        self.write(record);\n      });\n      self.end();\n    } else if (_.isString(input)){\n      data = input;\n      this._dataStream.write(data, 'utf8');\n      this._dataStream.end();\n    }\n  }\n\n  // return Batch instance for chaining\n  return this.thenCall(callback);\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\nBatch.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\nBatch.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  return bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function(res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n\n\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nBatch.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      err.jobId = jobId;\n      err.batchId = batchId;\n      self.emit('error', err);\n      return;\n    }\n    self.check(function(err, res) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        if (res.state === \"Failed\") {\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n            self.retrieve();\n          } else {\n            self.emit('error', new Error(res.stateMessage));\n          }\n        } else if (res.state === \"Completed\") {\n          self.retrieve();\n        } else {\n          self.emit('progress', res);\n          setTimeout(poll, interval);\n        }\n      }\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\nBatch.prototype.retrieve = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function(jobInfo) {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function(res) {\n    var results;\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function(ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ ret.Error ] : []\n        };\n      });\n    }\n    self.emit('response', results);\n    return results;\n  }).fail(function(err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\n */\nBatch.prototype.result = function(resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var resultStream = new RecordStream.Parsable();\n  var resultDataStream = resultStream.stream('csv');\n  var reqStream = this._bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId,\n    responseType: \"application/octet-stream\"\n  }).stream().pipe(resultDataStream);\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * @private\n */\nvar BulkApi = function() {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function(request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function(response) {\n  return response.statusCode === 400 &&\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function(body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Bulk = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollTimeout = 10000;\n\n/** @private **/\nBulk.prototype._request = function(request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\n  request.url = baseUrl + request.path;\n  var options = { responseType: request.responseType };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\n};\n\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBulk.prototype.load = function(type, operation, options, input, callback) {\n  var self = this;\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\n    callback = input;\n    input = options;\n    options = null;\n  }\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n  var cleanup = function() {\n    batch = null;\n    job.close();\n  };\n  var cleanupOnError = function(err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\n  return batch.execute(input, callback);\n};\n\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\n */\nBulk.prototype.query = function(soql) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n  var type = m[1];\n  var self = this;\n  var recordStream = new RecordStream.Parsable();\n  var dataStream = recordStream.stream('csv');\n  this.load(type, \"query\", soql).then(function(results) {\n    var streams = results.map(function(result) {\n      return self\n        .job(result.jobId)\n        .batch(result.batchId)\n        .result(result.id)\n        .stream();\n    });\n\n    joinStreams(streams).pipe(dataStream);\n  }).fail(function(err) {\n    recordStream.emit('error', err);\n  });\n  return recordStream;\n};\n\n\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\nBulk.prototype.createJob = function(type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\nBulk.prototype.job = function(jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.bulk = new Bulk(conn);\n});\n\n\nmodule.exports = Bulk;\n"]},"metadata":{},"sourceType":"script"}