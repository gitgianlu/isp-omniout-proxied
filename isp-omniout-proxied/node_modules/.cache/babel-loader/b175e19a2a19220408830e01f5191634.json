{"ast":null,"code":"/**\n * @file Represents Salesforce record information\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar _ = require('lodash/core');\n/**\n * A simple hash object including record field information\n *\n * @typedef {Object} Record\n */\n\n/**\n * Remote reference to record information\n *\n * @protected\n * @class\n * @constructor\n * @param {Connection} conn - Connection object\n * @param {String} type - SObject type\n * @param {String} id - Record ID\n */\n\n\nvar RecordReference = module.exports = function (conn, type, id) {\n  this._conn = conn;\n  this.type = type;\n  this.id = id;\n};\n/**\n * Retrieve record field information\n *\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<Record>} [callback] - Callback function\n * @returns {Promise.<Record>}\n */\n\n\nRecordReference.prototype.retrieve = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this._conn.retrieve(this.type, this.id, options, callback);\n};\n/**\n * Update record field information\n *\n * @param {Record} record - A Record which includes fields to update\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult>} [callback] - Callback function\n * @returns {Promise.<RecordResult>}\n */\n\n\nRecordReference.prototype.update = function (record, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  record = _.clone(record);\n  record.Id = this.id;\n  return this._conn.update(this.type, record, options, callback);\n};\n/**\n * Synonym of Record#destroy()\n *\n * @method RecordReference#delete\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult>} [callback] - Callback function\n * @returns {Promise.<RecordResult>}\n */\n\n\nRecordReference.prototype[\"delete\"] =\n/**\n * Synonym of Record#destroy()\n *\n * @method RecordReference#del\n * @param {Callback.<RecordResult>} [callback] - Callback function\n * @returns {Promise.<RecordResult>}\n */\nRecordReference.prototype.del =\n/**\n * Delete record field\n *\n * @method RecordReference#destroy\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult>} [callback] - Callback function\n * @returns {Promise.<RecordResult>}\n */\nRecordReference.prototype.destroy = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this._conn.destroy(this.type, this.id, options, callback);\n};\n/**\n * Get blob field as stream\n *\n * @param {String} fieldName - Blob field name\n * @returns {stream.Stream}\n */\n\n\nRecordReference.prototype.blob = function (fieldName) {\n  var url = [this._conn._baseUrl(), 'sobjects', this.type, this.id, fieldName].join('/');\n  return this._conn.request(url).stream();\n};","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/record.js"],"names":["_","require","RecordReference","module","exports","conn","type","id","_conn","prototype","retrieve","options","callback","update","record","clone","Id","del","destroy","blob","fieldName","url","_baseUrl","join","request","stream"],"mappings":"AAAA;;;;AAKA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,aAAD,CAAf;AAEA;;;;;;AAMA;;;;;;;;;;;;AAUA,IAAIC,eAAe,GAAGC,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAC9D,OAAKC,KAAL,GAAaH,IAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,EAAL,GAAUA,EAAV;AACD,CAJD;AAMA;;;;;;;;;AAOAL,eAAe,CAACO,SAAhB,CAA0BC,QAA1B,GAAqC,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAC/D,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AACD,SAAO,KAAKH,KAAL,CAAWE,QAAX,CAAoB,KAAKJ,IAAzB,EAA+B,KAAKC,EAApC,EAAwCI,OAAxC,EAAiDC,QAAjD,CAAP;AACD,CAND;AAQA;;;;;;;;;;AAQAV,eAAe,CAACO,SAAhB,CAA0BI,MAA1B,GAAmC,UAASC,MAAT,EAAiBH,OAAjB,EAA0BC,QAA1B,EAAoC;AACrE,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AACDG,EAAAA,MAAM,GAAGd,CAAC,CAACe,KAAF,CAAQD,MAAR,CAAT;AACAA,EAAAA,MAAM,CAACE,EAAP,GAAY,KAAKT,EAAjB;AACA,SAAO,KAAKC,KAAL,CAAWK,MAAX,CAAkB,KAAKP,IAAvB,EAA6BQ,MAA7B,EAAqCH,OAArC,EAA8CC,QAA9C,CAAP;AACD,CARD;AAUA;;;;;;;;;;AAQAV,eAAe,CAACO,SAAhB,CAA0B,QAA1B;AACA;;;;;;;AAOAP,eAAe,CAACO,SAAhB,CAA0BQ,GAA1B;AACA;;;;;;;;AAQAf,eAAe,CAACO,SAAhB,CAA0BS,OAA1B,GAAoC,UAASP,OAAT,EAAkBC,QAAlB,EAA4B;AAC9D,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AACD,SAAO,KAAKH,KAAL,CAAWU,OAAX,CAAmB,KAAKZ,IAAxB,EAA8B,KAAKC,EAAnC,EAAuCI,OAAvC,EAAgDC,QAAhD,CAAP;AACD,CAvBD;AAyBA;;;;;;;;AAMAV,eAAe,CAACO,SAAhB,CAA0BU,IAA1B,GAAiC,UAASC,SAAT,EAAoB;AACnD,MAAIC,GAAG,GAAG,CAAE,KAAKb,KAAL,CAAWc,QAAX,EAAF,EAAyB,UAAzB,EAAqC,KAAKhB,IAA1C,EAAgD,KAAKC,EAArD,EAAyDa,SAAzD,EAAqEG,IAArE,CAA0E,GAA1E,CAAV;AACA,SAAO,KAAKf,KAAL,CAAWgB,OAAX,CAAmBH,GAAnB,EAAwBI,MAAxB,EAAP;AACD,CAHD","sourcesContent":["/**\n * @file Represents Salesforce record information\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar _ = require('lodash/core');\n\n/**\n * A simple hash object including record field information\n *\n * @typedef {Object} Record\n */\n\n/**\n * Remote reference to record information\n *\n * @protected\n * @class\n * @constructor\n * @param {Connection} conn - Connection object\n * @param {String} type - SObject type\n * @param {String} id - Record ID\n */\nvar RecordReference = module.exports = function(conn, type, id) {\n  this._conn = conn;\n  this.type = type;\n  this.id = id;\n};\n\n/**\n * Retrieve record field information\n *\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<Record>} [callback] - Callback function\n * @returns {Promise.<Record>}\n */\nRecordReference.prototype.retrieve = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  return this._conn.retrieve(this.type, this.id, options, callback);\n};\n\n/**\n * Update record field information\n *\n * @param {Record} record - A Record which includes fields to update\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult>} [callback] - Callback function\n * @returns {Promise.<RecordResult>}\n */\nRecordReference.prototype.update = function(record, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  record = _.clone(record);\n  record.Id = this.id;\n  return this._conn.update(this.type, record, options, callback);\n};\n\n/**\n * Synonym of Record#destroy()\n *\n * @method RecordReference#delete\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult>} [callback] - Callback function\n * @returns {Promise.<RecordResult>}\n */\nRecordReference.prototype[\"delete\"] =\n/**\n * Synonym of Record#destroy()\n *\n * @method RecordReference#del\n * @param {Callback.<RecordResult>} [callback] - Callback function\n * @returns {Promise.<RecordResult>}\n */\nRecordReference.prototype.del =\n/**\n * Delete record field\n *\n * @method RecordReference#destroy\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult>} [callback] - Callback function\n * @returns {Promise.<RecordResult>}\n */\nRecordReference.prototype.destroy = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  return this._conn.destroy(this.type, this.id, options, callback);\n};\n\n/**\n * Get blob field as stream\n *\n * @param {String} fieldName - Blob field name\n * @returns {stream.Stream}\n */\nRecordReference.prototype.blob = function(fieldName) {\n  var url = [ this._conn._baseUrl(), 'sobjects', this.type, this.id, fieldName ].join('/');\n  return this._conn.request(url).stream();\n};\n"]},"metadata":{},"sourceType":"script"}