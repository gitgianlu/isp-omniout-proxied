{"ast":null,"code":"/*global process*/\n'use strict';\n\nvar _ = require('lodash/core');\n/**\n * @callback ResolvedCallback\n * @param {T} result - Resolved value\n * @returns {S}\n * @template T,S\n */\n\n/**\n * @callback RejectedCallback\n * @param {Error} reason - Rejected reason\n * @returns {S}\n * @template S\n */\n\n/**\n * @callback ResolveCallback\n * @param {T} result\n * @template T\n */\n\n/**\n * @callback RejectedCallback\n * @param {Error} reason - Rejected reason\n * @returns {S}\n * @template S\n */\n\n/**\n * @callback PromiseCallback\n * @param {ResolveCallback.<T>} resolve\n * @param {RejectCallback} reject\n * @template T\n */\n\n/**\n * Promise class with a little extension\n *\n * @class Promise\n * @constructor\n * @param {PromiseCallback.<T>}\n * @template T\n */\n\n\nvar Promise = require('promise/lib/es6-extensions');\n/**\n * The \"then\" method from the Promises/A+ specification\n *\n * @method Promise#then\n * @param {FulfilledCallback.<T, S1>} [onFulfilled]\n * @param {RejectedCallback.<S2>} [onRejected]\n * @returns {Promise.<S1|S2>}\n */\n\n/**\n * Call \"then\" using given node-style callback function.\n * This is basically same as \"nodeify\" except that it always return the original promise\n *\n * @method Promise#thenCall\n * @param {Callback.<T>} [callback] - Callback function\n * @returns {Promise}\n */\n\n\nPromise.prototype.thenCall = function (callback) {\n  if (_.isFunction(callback)) {\n    this.then(function (res) {\n      process.nextTick(function () {\n        callback(null, res);\n      });\n    }, function (err) {\n      process.nextTick(function () {\n        callback(err);\n      });\n    });\n  }\n\n  return this;\n};\n/**\n * A sugar method, equivalent to promise.then(undefined, onRejected).\n *\n * @method Promise#catch\n * @param {RejectedCallback.<S>} onRejected\n * @returns {Promise.<S>}\n */\n\n/**\n * Synonym of Promise#catch\n *\n * @method Promise#fail\n * @param {RejectedCallback.<S>} onRejected\n * @returns {Promise.<S>}\n */\n\n\nPromise.prototype.fail = Promise.prototype['catch'];\n/**\n * Returns resolving promise with given reason\n *\n * @method Promise.resolve\n * @param {*} result - Resolved value\n * @returns {Promise}\n */\n\n/**\n * Returns rejecting promise with given reason\n *\n * @method Promise.reject\n * @param {Error} reason - Rejecting reason\n * @returns {Promise}\n */\n\n/**\n * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise,\n * or is rejected with the same rejection reason as the first promise to be rejected.\n *\n * @method Promise.all\n * @param {Array.<Promise.<*>|*>} promises\n * @returns {Promise.<Array.<*>>}\n */\n\n/**\n * Returns a deferred object\n *\n * @method Promise.defer\n * @returns {Deferred}\n */\n\nPromise.defer = function () {\n  return new Deferred();\n};\n/**\n * Deferred object\n *\n * @protected\n * @constructor\n */\n\n\nvar Deferred = function () {\n  var self = this;\n  this.promise = new Promise(function (resolve, reject) {\n    self.resolve = resolve;\n    self.reject = reject;\n  });\n};\n/**\n * Resolve promise\n * @method Deferred#resolve\n * @param {*} result - Resolving result\n */\n\n/**\n * Reject promise\n * @method Deferred#reject\n * @param {Error} error - Rejecting reason\n */\n\n/**\n *\n */\n\n\nmodule.exports = Promise;","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/promise.js"],"names":["_","require","Promise","prototype","thenCall","callback","isFunction","then","res","process","nextTick","err","fail","defer","Deferred","self","promise","resolve","reject","module","exports"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,aAAD,CAAf;AAEA;;;;;;;AAOA;;;;;;;AAOA;;;;;;AAMA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;;;AAQA,IAAIC,OAAO,GAAGD,OAAO,CAAC,4BAAD,CAArB;AAEA;;;;;;;;;AASA;;;;;;;;;;AAQAC,OAAO,CAACC,SAAR,CAAkBC,QAAlB,GAA6B,UAASC,QAAT,EAAmB;AAC9C,MAAIL,CAAC,CAACM,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B,SAAKE,IAAL,CAAU,UAASC,GAAT,EAAc;AACtBC,MAAAA,OAAO,CAACC,QAAR,CAAiB,YAAW;AAC1BL,QAAAA,QAAQ,CAAC,IAAD,EAAOG,GAAP,CAAR;AACD,OAFD;AAGD,KAJD,EAIG,UAASG,GAAT,EAAc;AACfF,MAAAA,OAAO,CAACC,QAAR,CAAiB,YAAW;AAC1BL,QAAAA,QAAQ,CAACM,GAAD,CAAR;AACD,OAFD;AAGD,KARD;AASD;;AACD,SAAO,IAAP;AACD,CAbD;AAeA;;;;;;;;AAQA;;;;;;;;;AAOAT,OAAO,CAACC,SAAR,CAAkBS,IAAlB,GAAyBV,OAAO,CAACC,SAAR,CAAkB,OAAlB,CAAzB;AAEA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;AAMAD,OAAO,CAACW,KAAR,GAAgB,YAAW;AACzB,SAAO,IAAIC,QAAJ,EAAP;AACD,CAFD;AAIA;;;;;;;;AAMA,IAAIA,QAAQ,GAAG,YAAW;AACxB,MAAIC,IAAI,GAAG,IAAX;AACA,OAAKC,OAAL,GAAe,IAAId,OAAJ,CAAY,UAASe,OAAT,EAAkBC,MAAlB,EAA0B;AACnDH,IAAAA,IAAI,CAACE,OAAL,GAAeA,OAAf;AACAF,IAAAA,IAAI,CAACG,MAAL,GAAcA,MAAd;AACD,GAHc,CAAf;AAID,CAND;AAQA;;;;;;AAMA;;;;;;AAMA;;;;;AAGAC,MAAM,CAACC,OAAP,GAAiBlB,OAAjB","sourcesContent":["/*global process*/\n\n'use strict';\n\nvar _ = require('lodash/core');\n\n/**\n * @callback ResolvedCallback\n * @param {T} result - Resolved value\n * @returns {S}\n * @template T,S\n */\n\n/**\n * @callback RejectedCallback\n * @param {Error} reason - Rejected reason\n * @returns {S}\n * @template S\n */\n\n/**\n * @callback ResolveCallback\n * @param {T} result\n * @template T\n */\n\n/**\n * @callback RejectedCallback\n * @param {Error} reason - Rejected reason\n * @returns {S}\n * @template S\n */\n\n/**\n * @callback PromiseCallback\n * @param {ResolveCallback.<T>} resolve\n * @param {RejectCallback} reject\n * @template T\n */\n\n/**\n * Promise class with a little extension\n *\n * @class Promise\n * @constructor\n * @param {PromiseCallback.<T>}\n * @template T\n */\nvar Promise = require('promise/lib/es6-extensions');\n\n/**\n * The \"then\" method from the Promises/A+ specification\n *\n * @method Promise#then\n * @param {FulfilledCallback.<T, S1>} [onFulfilled]\n * @param {RejectedCallback.<S2>} [onRejected]\n * @returns {Promise.<S1|S2>}\n */\n\n/**\n * Call \"then\" using given node-style callback function.\n * This is basically same as \"nodeify\" except that it always return the original promise\n *\n * @method Promise#thenCall\n * @param {Callback.<T>} [callback] - Callback function\n * @returns {Promise}\n */\nPromise.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * A sugar method, equivalent to promise.then(undefined, onRejected).\n *\n * @method Promise#catch\n * @param {RejectedCallback.<S>} onRejected\n * @returns {Promise.<S>}\n */\n\n/**\n * Synonym of Promise#catch\n *\n * @method Promise#fail\n * @param {RejectedCallback.<S>} onRejected\n * @returns {Promise.<S>}\n */\nPromise.prototype.fail = Promise.prototype['catch'];\n\n/**\n * Returns resolving promise with given reason\n *\n * @method Promise.resolve\n * @param {*} result - Resolved value\n * @returns {Promise}\n */\n\n/**\n * Returns rejecting promise with given reason\n *\n * @method Promise.reject\n * @param {Error} reason - Rejecting reason\n * @returns {Promise}\n */\n\n/**\n * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise,\n * or is rejected with the same rejection reason as the first promise to be rejected.\n *\n * @method Promise.all\n * @param {Array.<Promise.<*>|*>} promises\n * @returns {Promise.<Array.<*>>}\n */\n\n/**\n * Returns a deferred object\n *\n * @method Promise.defer\n * @returns {Deferred}\n */\nPromise.defer = function() {\n  return new Deferred();\n};\n\n/**\n * Deferred object\n *\n * @protected\n * @constructor\n */\nvar Deferred = function() {\n  var self = this;\n  this.promise = new Promise(function(resolve, reject) {\n    self.resolve = resolve;\n    self.reject = reject;\n  });\n};\n\n/**\n * Resolve promise\n * @method Deferred#resolve\n * @param {*} result - Resolving result\n */\n\n/**\n * Reject promise\n * @method Deferred#reject\n * @param {Error} error - Rejecting reason\n */\n\n/**\n *\n */\nmodule.exports = Promise;\n"]},"metadata":{},"sourceType":"script"}