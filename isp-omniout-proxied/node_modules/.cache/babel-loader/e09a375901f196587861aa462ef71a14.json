{"ast":null,"code":"/**\n * @file Manages Salesforce OAuth2 operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar querystring = require('querystring'),\n    _ = require('lodash/core'),\n    Transport = require('./transport');\n\nvar defaults = {\n  loginUrl: \"https://login.salesforce.com\"\n};\n/**\n * OAuth2 class\n *\n * @class\n * @constructor\n * @param {Object} options - OAuth2 config options\n * @param {String} [options.loginUrl] - Salesforce login server URL\n * @param {String} [options.authzServiceUrl] - OAuth2 authorization service URL. If not specified, it generates from default by adding to login server URL.\n * @param {String} [options.tokenServiceUrl] - OAuth2 token service URL. If not specified it generates from default by adding to login server URL.\n * @param {String} options.clientId - OAuth2 client ID.\n * @param {String} [options.clientSecret] - OAuth2 client secret (This is optional for public client).\n * @param {String} options.redirectUri - URI to be callbacked from Salesforce OAuth2 authorization service.\n */\n\nvar OAuth2 = module.exports = function (options) {\n  if (options.authzServiceUrl && options.tokenServiceUrl) {\n    this.loginUrl = options.authzServiceUrl.split('/').slice(0, 3).join('/');\n    this.authzServiceUrl = options.authzServiceUrl;\n    this.tokenServiceUrl = options.tokenServiceUrl;\n    this.revokeServiceUrl = options.revokeServiceUrl;\n  } else {\n    this.loginUrl = options.loginUrl || defaults.loginUrl;\n    this.authzServiceUrl = this.loginUrl + \"/services/oauth2/authorize\";\n    this.tokenServiceUrl = this.loginUrl + \"/services/oauth2/token\";\n    this.revokeServiceUrl = this.loginUrl + \"/services/oauth2/revoke\";\n  }\n\n  this.clientId = options.clientId;\n  this.clientSecret = options.clientSecret;\n  this.redirectUri = options.redirectUri;\n\n  if (options.proxyUrl) {\n    this._transport = new Transport.ProxyTransport(options.proxyUrl);\n  } else if (options.httpProxy) {\n    this._transport = new Transport.HttpProxyTransport(options.httpProxy);\n  } else {\n    this._transport = new Transport();\n  }\n};\n/**\n *\n */\n\n\n_.extend(OAuth2.prototype,\n/** @lends OAuth2.prototype **/\n{\n  /**\n   * Get Salesforce OAuth2 authorization page URL to redirect user agent.\n   *\n   * @param {Object} params - Parameters\n   * @param {String} [params.scope] - Scope values in space-separated string\n   * @param {String} [params.state] - State parameter\n   * @param {String} [params.code_challenge] - Code challenge value (RFC 7636 - Proof Key of Code Exchange)\n   * @returns {String} Authorization page URL\n   */\n  getAuthorizationUrl: function (params) {\n    params = _.extend({\n      response_type: \"code\",\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri\n    }, params || {});\n    return this.authzServiceUrl + (this.authzServiceUrl.indexOf('?') >= 0 ? \"&\" : \"?\") + querystring.stringify(params);\n  },\n\n  /**\n   * @typedef TokenResponse\n   * @type {Object}\n   * @property {String} access_token\n   * @property {String} refresh_token\n   */\n\n  /**\n   * OAuth2 Refresh Token Flow\n   *\n   * @param {String} refreshToken - Refresh token\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\n   * @returns {Promise.<TokenResponse>}\n   */\n  refreshToken: function (refreshToken, callback) {\n    var params = {\n      grant_type: \"refresh_token\",\n      refresh_token: refreshToken,\n      client_id: this.clientId\n    };\n\n    if (this.clientSecret) {\n      params.client_secret = this.clientSecret;\n    }\n\n    return this._postParams(params, callback);\n  },\n\n  /**\n   * OAuth2 Web Server Authentication Flow (Authorization Code)\n   * Access Token Request\n   *\n   * @param {String} code - Authorization code\n   * @param {Object} [params] - Optional parameters to send in token retrieval\n   * @param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\n   * @returns {Promise.<TokenResponse>}\n   */\n  requestToken: function (code, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    params = _.extend({\n      grant_type: \"authorization_code\",\n      code: code,\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri\n    }, params || {});\n\n    if (this.clientSecret) {\n      params.client_secret = this.clientSecret;\n    }\n\n    return this._postParams(params, callback);\n  },\n\n  /**\n   * OAuth2 Username-Password Flow (Resource Owner Password Credentials)\n   *\n   * @param {String} username - Salesforce username\n   * @param {String} password - Salesforce password\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\n   * @returns {Promise.<TokenResponse>}\n   */\n  authenticate: function (username, password, callback) {\n    return this._postParams({\n      grant_type: \"password\",\n      username: username,\n      password: password,\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      redirect_uri: this.redirectUri\n    }, callback);\n  },\n\n  /**\n   * OAuth2 Revoke Session or API Token\n   *\n   * @param {String} token - Access or Refresh token to revoke. Passing in the Access token revokes the session. Passing in the Refresh token revokes API Access.\n   * @param {Callback.<undefined>} [callback] - Callback function\n   * @returns {Promise.<undefined>}\n   */\n  revokeToken: function (token, callback) {\n    return this._transport.httpRequest({\n      method: 'POST',\n      url: this.revokeServiceUrl,\n      body: querystring.stringify({\n        token: token\n      }),\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    }).then(function (response) {\n      if (response.statusCode >= 400) {\n        var res = querystring.parse(response.body);\n\n        if (!res || !res.error) {\n          res = {\n            error: \"ERROR_HTTP_\" + response.statusCode,\n            error_description: response.body\n          };\n        }\n\n        var err = new Error(res.error_description);\n        err.name = res.error;\n        throw err;\n      }\n    }).thenCall(callback);\n  },\n\n  /**\n   * @private\n   */\n  _postParams: function (params, callback) {\n    return this._transport.httpRequest({\n      method: 'POST',\n      url: this.tokenServiceUrl,\n      body: querystring.stringify(params),\n      headers: {\n        \"content-type\": \"application/x-www-form-urlencoded\"\n      }\n    }).then(function (response) {\n      var res;\n\n      try {\n        res = JSON.parse(response.body);\n      } catch (e) {}\n\n      if (response.statusCode >= 400) {\n        res = res || {\n          error: \"ERROR_HTTP_\" + response.statusCode,\n          error_description: response.body\n        };\n        var err = new Error(res.error_description);\n        err.name = res.error;\n        throw err;\n      }\n\n      return res;\n    }).thenCall(callback);\n  }\n});","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/oauth2.js"],"names":["querystring","require","_","Transport","defaults","loginUrl","OAuth2","module","exports","options","authzServiceUrl","tokenServiceUrl","split","slice","join","revokeServiceUrl","clientId","clientSecret","redirectUri","proxyUrl","_transport","ProxyTransport","httpProxy","HttpProxyTransport","extend","prototype","getAuthorizationUrl","params","response_type","client_id","redirect_uri","indexOf","stringify","refreshToken","callback","grant_type","refresh_token","client_secret","_postParams","requestToken","code","authenticate","username","password","revokeToken","token","httpRequest","method","url","body","headers","then","response","statusCode","res","parse","error","error_description","err","Error","name","thenCall","JSON","e"],"mappings":"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","sourcesContent":["/**\n * @file Manages Salesforce OAuth2 operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar querystring = require('querystring'),\n    _ = require('lodash/core'),\n    Transport = require('./transport');\n\nvar defaults = {\n  loginUrl : \"https://login.salesforce.com\"\n};\n\n/**\n * OAuth2 class\n *\n * @class\n * @constructor\n * @param {Object} options - OAuth2 config options\n * @param {String} [options.loginUrl] - Salesforce login server URL\n * @param {String} [options.authzServiceUrl] - OAuth2 authorization service URL. If not specified, it generates from default by adding to login server URL.\n * @param {String} [options.tokenServiceUrl] - OAuth2 token service URL. If not specified it generates from default by adding to login server URL.\n * @param {String} options.clientId - OAuth2 client ID.\n * @param {String} [options.clientSecret] - OAuth2 client secret (This is optional for public client).\n * @param {String} options.redirectUri - URI to be callbacked from Salesforce OAuth2 authorization service.\n */\nvar OAuth2 = module.exports = function(options) {\n  if (options.authzServiceUrl && options.tokenServiceUrl) {\n    this.loginUrl = options.authzServiceUrl.split('/').slice(0, 3).join('/');\n    this.authzServiceUrl = options.authzServiceUrl;\n    this.tokenServiceUrl = options.tokenServiceUrl;\n    this.revokeServiceUrl = options.revokeServiceUrl;\n  } else {\n    this.loginUrl = options.loginUrl || defaults.loginUrl;\n    this.authzServiceUrl = this.loginUrl + \"/services/oauth2/authorize\";\n    this.tokenServiceUrl = this.loginUrl + \"/services/oauth2/token\";\n    this.revokeServiceUrl = this.loginUrl + \"/services/oauth2/revoke\";\n  }\n  this.clientId = options.clientId;\n  this.clientSecret = options.clientSecret;\n  this.redirectUri = options.redirectUri;\n  if (options.proxyUrl) {\n    this._transport = new Transport.ProxyTransport(options.proxyUrl);\n  } else if (options.httpProxy) {\n    this._transport = new Transport.HttpProxyTransport(options.httpProxy);\n  } else {\n    this._transport = new Transport();\n  }\n};\n\n\n\n/**\n *\n */\n_.extend(OAuth2.prototype, /** @lends OAuth2.prototype **/ {\n\n  /**\n   * Get Salesforce OAuth2 authorization page URL to redirect user agent.\n   *\n   * @param {Object} params - Parameters\n   * @param {String} [params.scope] - Scope values in space-separated string\n   * @param {String} [params.state] - State parameter\n   * @param {String} [params.code_challenge] - Code challenge value (RFC 7636 - Proof Key of Code Exchange)\n   * @returns {String} Authorization page URL\n   */\n  getAuthorizationUrl : function(params) {\n    params = _.extend({\n      response_type : \"code\",\n      client_id : this.clientId,\n      redirect_uri : this.redirectUri\n    }, params || {});\n    return this.authzServiceUrl +\n      (this.authzServiceUrl.indexOf('?') >= 0 ? \"&\" : \"?\") +\n      querystring.stringify(params);\n  },\n\n  /**\n   * @typedef TokenResponse\n   * @type {Object}\n   * @property {String} access_token\n   * @property {String} refresh_token\n   */\n\n  /**\n   * OAuth2 Refresh Token Flow\n   *\n   * @param {String} refreshToken - Refresh token\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\n   * @returns {Promise.<TokenResponse>}\n   */\n  refreshToken : function(refreshToken, callback) {\n    var params = {\n      grant_type : \"refresh_token\",\n      refresh_token : refreshToken,\n      client_id : this.clientId\n    };\n    if (this.clientSecret) {\n      params.client_secret = this.clientSecret;\n    }\n    return this._postParams(params, callback);\n  },\n\n  /**\n   * OAuth2 Web Server Authentication Flow (Authorization Code)\n   * Access Token Request\n   *\n   * @param {String} code - Authorization code\n   * @param {Object} [params] - Optional parameters to send in token retrieval\n   * @param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\n   * @returns {Promise.<TokenResponse>}\n   */\n  requestToken : function(code, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n    params = _.extend({\n      grant_type : \"authorization_code\",\n      code : code,\n      client_id : this.clientId,\n      redirect_uri : this.redirectUri\n    }, params || {});\n    if (this.clientSecret) {\n      params.client_secret = this.clientSecret;\n    }\n    return this._postParams(params, callback);\n  },\n\n  /**\n   * OAuth2 Username-Password Flow (Resource Owner Password Credentials)\n   *\n   * @param {String} username - Salesforce username\n   * @param {String} password - Salesforce password\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\n   * @returns {Promise.<TokenResponse>}\n   */\n  authenticate : function(username, password, callback) {\n    return this._postParams({\n      grant_type : \"password\",\n      username : username,\n      password : password,\n      client_id : this.clientId,\n      client_secret : this.clientSecret,\n      redirect_uri : this.redirectUri\n    }, callback);\n  },\n\n  /**\n   * OAuth2 Revoke Session or API Token\n   *\n   * @param {String} token - Access or Refresh token to revoke. Passing in the Access token revokes the session. Passing in the Refresh token revokes API Access.\n   * @param {Callback.<undefined>} [callback] - Callback function\n   * @returns {Promise.<undefined>}\n   */\n  revokeToken : function(token, callback) {\n    return this._transport.httpRequest({\n      method : 'POST',\n      url : this.revokeServiceUrl,\n      body: querystring.stringify({ token: token }),\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    }).then(function(response) {\n      if (response.statusCode >= 400) {\n        var res = querystring.parse(response.body);\n        if (!res || !res.error) {\n          res = { error: \"ERROR_HTTP_\"+response.statusCode, error_description: response.body };\n        }\n        var err = new Error(res.error_description);\n        err.name = res.error;\n        throw err;\n      }\n    }).thenCall(callback);\n  },\n\n  /**\n   * @private\n   */\n  _postParams : function(params, callback) {\n    return this._transport.httpRequest({\n      method : 'POST',\n      url : this.tokenServiceUrl,\n      body : querystring.stringify(params),\n      headers : {\n        \"content-type\" : \"application/x-www-form-urlencoded\"\n      }\n    }).then(function(response) {\n      var res;\n      try {\n        res = JSON.parse(response.body);\n      } catch(e) {}\n      if (response.statusCode >= 400) {\n        res = res || { error: \"ERROR_HTTP_\"+response.statusCode, error_description: response.body };\n        var err = new Error(res.error_description);\n        err.name = res.error;\n        throw err;\n      }\n      return res;\n    }).thenCall(callback);\n  }\n\n});\n"]},"metadata":{},"sourceType":"script"}