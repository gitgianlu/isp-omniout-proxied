{"ast":null,"code":"/*global Sfdc */\n'use strict';\n\nvar Duplex = require('readable-stream').Duplex,\n    _ = require('lodash/core');\n\nfunction parseHeaders(hs) {\n  var headers = {};\n  hs.split(/\\n/).forEach(function (line) {\n    var pair = line.split(/\\s*:\\s*/);\n    var name = pair[0].toLowerCase();\n    var value = pair[1];\n    headers[name] = value;\n  });\n  return headers;\n}\n\nmodule.exports = {\n  supported: typeof Sfdc === 'object' && typeof Sfdc.canvas !== 'undefined',\n  createRequest: function (signedRequest) {\n    return function (params, callback) {\n      var response;\n      var str = new Duplex();\n\n      str._read = function (size) {\n        if (response) {\n          str.push(response.body);\n        }\n      };\n\n      var bufs = [];\n      var sent = false;\n\n      str._write = function (chunk, encoding, callback) {\n        bufs.push(chunk.toString(encoding));\n        callback();\n      };\n\n      str.on('finish', function () {\n        if (!sent) {\n          send(bufs.join(''));\n          sent = true;\n        }\n      });\n\n      if (params.body || params.body === \"\" || !/^(put|post|patch)$/i.test(params.method)) {\n        send(params.body);\n        sent = true;\n      }\n\n      function send(body) {\n        var settings = {\n          client: signedRequest.client,\n          method: params.method,\n          data: body\n        };\n\n        if (params.headers) {\n          settings.headers = {};\n\n          for (var name in params.headers) {\n            if (name.toLowerCase() === 'content-type') {\n              settings.contentType = params.headers[name];\n            } else {\n              settings.headers[name] = params.headers[name];\n            }\n          }\n        }\n\n        settings.success = function (data) {\n          var headers = parseHeaders(data.responseHeaders);\n          var body = data.payload;\n\n          if (!_.isString(body)) {\n            body = JSON.stringify(body);\n          }\n\n          response = {\n            statusCode: data.status,\n            headers: headers,\n            body: body\n          };\n\n          if (callback) {\n            callback(null, response, response.body);\n          }\n\n          str.end();\n        };\n\n        settings.failure = function (err) {\n          if (callback) {\n            callback(err);\n          }\n        };\n\n        Sfdc.canvas.client.ajax(params.url, settings);\n      }\n\n      return str;\n    };\n  }\n};","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/browser/canvas.js"],"names":["Duplex","require","_","parseHeaders","hs","headers","split","forEach","line","pair","name","toLowerCase","value","module","exports","supported","Sfdc","canvas","createRequest","signedRequest","params","callback","response","str","_read","size","push","body","bufs","sent","_write","chunk","encoding","toString","on","send","join","test","method","settings","client","data","contentType","success","responseHeaders","payload","isString","JSON","stringify","statusCode","status","end","failure","err","ajax","url"],"mappings":"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","sourcesContent":["/*global Sfdc */\n'use strict';\n\nvar Duplex = require('readable-stream').Duplex,\n    _ = require('lodash/core');\n\nfunction parseHeaders(hs) {\n  var headers = {};\n  hs.split(/\\n/).forEach(function(line) {\n    var pair = line.split(/\\s*:\\s*/);\n    var name = pair[0].toLowerCase();\n    var value = pair[1];\n    headers[name] = value;\n  });\n  return headers;\n}\n\nmodule.exports = {\n\n  supported: typeof Sfdc === 'object' && typeof Sfdc.canvas !== 'undefined',\n\n  createRequest: function(signedRequest) {\n    return function(params, callback) {\n      var response;\n      var str = new Duplex();\n      str._read = function(size) {\n        if (response) {\n          str.push(response.body);\n        }\n      };\n      var bufs = [];\n      var sent = false;\n      str._write = function(chunk, encoding, callback) {\n        bufs.push(chunk.toString(encoding));\n        callback();\n      };\n      str.on('finish', function() {\n        if (!sent) {\n          send(bufs.join(''));\n          sent = true;\n        }\n      });\n      if (params.body || params.body === \"\" || !/^(put|post|patch)$/i.test(params.method)) {\n        send(params.body);\n        sent = true;\n      }\n\n      function send(body) {\n        var settings = {\n          client: signedRequest.client,\n          method: params.method,\n          data: body\n        };\n        if (params.headers) {\n          settings.headers = {};\n          for (var name in params.headers) {\n            if (name.toLowerCase() === 'content-type') {\n              settings.contentType = params.headers[name];\n            } else {\n              settings.headers[name] = params.headers[name];\n            }\n          }\n        }\n        settings.success = function(data) {\n          var headers = parseHeaders(data.responseHeaders);\n          var body = data.payload;\n          if (!_.isString(body)) {\n            body = JSON.stringify(body);\n          }\n          response = {\n            statusCode : data.status,\n            headers: headers,\n            body: body\n          };\n          if (callback) {\n            callback(null, response, response.body);\n          }\n          str.end();\n        };\n        settings.failure = function(err) {\n          if (callback) {\n            callback(err);\n          }\n        };\n        Sfdc.canvas.client.ajax(params.url, settings);\n      }\n      return str;\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"script"}