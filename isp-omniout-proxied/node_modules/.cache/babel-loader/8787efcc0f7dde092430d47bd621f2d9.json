{"ast":null,"code":"/**\n * @file Manages Streaming APIs\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar events = require('events'),\n    inherits = require('inherits'),\n    _ = require('lodash/core'),\n    Faye = require('faye'),\n    StreamingExtension = require('./streaming-extension'),\n    jsforce = require('../core');\n/**\n * Streaming API topic class\n *\n * @class Streaming~Topic\n * @param {Streaming} steaming - Streaming API object\n * @param {String} name - Topic name\n */\n\n\nvar Topic = function (streaming, name) {\n  this._streaming = streaming;\n  this.name = name;\n};\n/**\n * @typedef {Object} Streaming~StreamingMessage\n * @prop {Object} event\n * @prop {Object} event.type - Event type\n * @prop {Record} sobject - Record information\n */\n\n/**\n * Subscribe listener to topic\n *\n * @method Streaming~Topic#subscribe\n * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener\n * @returns {Subscription} - Faye subscription object\n */\n\n\nTopic.prototype.subscribe = function (listener) {\n  return this._streaming.subscribe(this.name, listener);\n};\n/**\n * Unsubscribe listener from topic\n *\n * @method Streaming~Topic#unsubscribe\n * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener\n * @returns {Streaming~Topic}\n */\n\n\nTopic.prototype.unsubscribe = function (listener) {\n  this._streaming.unsubscribe(this.name, listener);\n\n  return this;\n};\n/*--------------------------------------------*/\n\n/**\n * Streaming API Generic Streaming Channel\n *\n * @class Streaming~Channel\n * @param {Streaming} steaming - Streaming API object\n * @param {String} name - Channel name (starts with \"/u/\")\n */\n\n\nvar Channel = function (streaming, name) {\n  this._streaming = streaming;\n  this._name = name;\n};\n/**\n * Subscribe to channel\n *\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\n * @returns {Subscription} - Faye subscription object\n */\n\n\nChannel.prototype.subscribe = function (listener) {\n  return this._streaming.subscribe(this._name, listener);\n};\n\nChannel.prototype.unsubscribe = function (listener) {\n  this._streaming.unsubscribe(this._name, listener);\n\n  return this;\n};\n\nChannel.prototype.push = function (events, callback) {\n  var isArray = _.isArray(events);\n\n  events = isArray ? events : [events];\n  var conn = this._streaming._conn;\n\n  if (!this._id) {\n    this._id = conn.sobject('StreamingChannel').findOne({\n      Name: this._name\n    }, 'Id').then(function (rec) {\n      return rec.Id;\n    });\n  }\n\n  return this._id.then(function (id) {\n    var channelUrl = '/sobjects/StreamingChannel/' + id + '/push';\n    return conn.requestPost(channelUrl, {\n      pushEvents: events\n    });\n  }).then(function (rets) {\n    return isArray ? rets : rets[0];\n  }).thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/**\n * Streaming API class\n *\n * @class\n * @extends events.EventEmitter\n * @param {Connection} conn - Connection object\n */\n\n\nvar Streaming = function (conn) {\n  this._conn = conn;\n};\n\ninherits(Streaming, events.EventEmitter);\n/** @private **/\n\nStreaming.prototype._createClient = function (forChannelName, extensions) {\n  // forChannelName is advisory, for an API workaround. It does not restrict or select the channel.\n  var needsReplayFix = typeof forChannelName === 'string' && forChannelName.indexOf('/u/') === 0;\n  var endpointUrl = [this._conn.instanceUrl, // special endpoint \"/cometd/replay/xx.x\" is only available in 36.0.\n  // See https://releasenotes.docs.salesforce.com/en-us/summer16/release-notes/rn_api_streaming_classic_replay.htm\n  \"cometd\" + (needsReplayFix === true && this._conn.version === \"36.0\" ? \"/replay\" : \"\"), this._conn.version].join('/');\n  var fayeClient = new Faye.Client(endpointUrl, {});\n  fayeClient.setHeader('Authorization', 'OAuth ' + this._conn.accessToken);\n\n  if (extensions instanceof Array) {\n    extensions.forEach(function (extension) {\n      fayeClient.addExtension(extension);\n    });\n  }\n\n  if (fayeClient._dispatcher.getConnectionTypes().indexOf('callback-polling') === -1) {\n    // prevent streaming API server error\n    fayeClient._dispatcher.selectTransport('long-polling');\n\n    fayeClient._dispatcher._transport.batching = false;\n  }\n\n  return fayeClient;\n};\n/** @private **/\n\n\nStreaming.prototype._getFayeClient = function (channelName) {\n  var isGeneric = channelName.indexOf('/u/') === 0;\n  var clientType = isGeneric ? 'generic' : 'pushTopic';\n\n  if (!this._fayeClients || !this._fayeClients[clientType]) {\n    this._fayeClients = this._fayeClients || {};\n    this._fayeClients[clientType] = this._createClient(channelName);\n  }\n\n  return this._fayeClients[clientType];\n};\n/**\n * Get named topic\n *\n * @param {String} name - Topic name\n * @returns {Streaming~Topic}\n */\n\n\nStreaming.prototype.topic = function (name) {\n  this._topics = this._topics || {};\n  var topic = this._topics[name] = this._topics[name] || new Topic(this, name);\n  return topic;\n};\n/**\n * Get Channel for Id\n * @param {String} channelId - Id of StreamingChannel object\n * @returns {Streaming~Channel}\n */\n\n\nStreaming.prototype.channel = function (channelId) {\n  return new Channel(this, channelId);\n};\n/**\n * Subscribe topic/channel\n *\n * @param {String} name - Topic name\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\n * @returns {Subscription} - Faye subscription object\n */\n\n\nStreaming.prototype.subscribe = function (name, listener) {\n  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;\n\n  var fayeClient = this._getFayeClient(channelName);\n\n  return fayeClient.subscribe(channelName, listener);\n};\n/**\n * Unsubscribe topic\n *\n * @param {String} name - Topic name\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\n * @returns {Streaming}\n */\n\n\nStreaming.prototype.unsubscribe = function (name, listener) {\n  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;\n\n  var fayeClient = this._getFayeClient(channelName);\n\n  fayeClient.unsubscribe(channelName, listener);\n  return this;\n};\n/**\n * Create a Streaming client, optionally with extensions\n *\n * See Faye docs for implementation details: https://faye.jcoglan.com/browser/extensions.html\n *\n * Example usage:\n * \n * ```javascript\n * // Establish a Salesforce connection. (Details elided)\n * const conn = new jsforce.Connection({ … });\n * \n * const fayeClient = conn.streaming.createClient();\n * \n * const subscription = fayeClient.subscribe(channel, data => {\n *   console.log('topic received data', data);\n * });\n * \n * subscription.cancel();\n * ```\n * \n * Example with extensions, using Replay & Auth Failure extensions in a server-side Node.js app:\n * \n * ```javascript\n * // Establish a Salesforce connection. (Details elided)\n * const conn = new jsforce.Connection({ … });\n * \n * const channel = \"/event/My_Event__e\";\n * const replayId = -2; // -2 is all retained events\n * \n * const exitCallback = () => process.exit(1);\n * const authFailureExt = new jsforce.StreamingExtension.AuthFailure(exitCallback);\n * \n * const replayExt = new jsforce.StreamingExtension.Replay(channel, replayId);\n * \n * const fayeClient = conn.streaming.createClient([\n *   authFailureExt,\n *   replayExt\n * ]);\n * \n * const subscription = fayeClient.subscribe(channel, data => {\n *   console.log('topic received data', data);\n * });\n * \n * subscription.cancel();\n * ```\n * \n * @param {Array} Extensions - Optional, extensions to apply to the Faye client\n * @returns {FayeClient} - Faye client object\n */\n\n\nStreaming.prototype.createClient = function (extensions) {\n  return this._createClient(null, extensions);\n};\n/*--------------------------------------------*/\n\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\n\n\njsforce.on('connection:new', function (conn) {\n  conn.streaming = new Streaming(conn);\n});\n/*\n * \n */\n\njsforce.StreamingExtension = StreamingExtension;\nmodule.exports = Streaming;","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/api/streaming.js"],"names":["events","require","inherits","_","Faye","StreamingExtension","jsforce","Topic","streaming","name","_streaming","prototype","subscribe","listener","unsubscribe","Channel","_name","push","callback","isArray","conn","_conn","_id","sobject","findOne","Name","then","rec","Id","id","channelUrl","requestPost","pushEvents","rets","thenCall","Streaming","EventEmitter","_createClient","forChannelName","extensions","needsReplayFix","indexOf","endpointUrl","instanceUrl","version","join","fayeClient","Client","setHeader","accessToken","Array","forEach","extension","addExtension","_dispatcher","getConnectionTypes","selectTransport","_transport","batching","_getFayeClient","channelName","isGeneric","clientType","_fayeClients","topic","_topics","channel","channelId","createClient","on","module","exports"],"mappings":"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","sourcesContent":["/**\n * @file Manages Streaming APIs\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar events = require('events'),\n    inherits = require('inherits'),\n    _ = require('lodash/core'),\n    Faye   = require('faye'),\n    StreamingExtension = require('./streaming-extension'),\n    jsforce = require('../core');\n\n/**\n * Streaming API topic class\n *\n * @class Streaming~Topic\n * @param {Streaming} steaming - Streaming API object\n * @param {String} name - Topic name\n */\nvar Topic = function(streaming, name) {\n  this._streaming = streaming;\n  this.name = name;\n};\n\n/**\n * @typedef {Object} Streaming~StreamingMessage\n * @prop {Object} event\n * @prop {Object} event.type - Event type\n * @prop {Record} sobject - Record information\n */\n/**\n * Subscribe listener to topic\n *\n * @method Streaming~Topic#subscribe\n * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener\n * @returns {Subscription} - Faye subscription object\n */\nTopic.prototype.subscribe = function(listener) {\n  return this._streaming.subscribe(this.name, listener);\n};\n\n/**\n * Unsubscribe listener from topic\n *\n * @method Streaming~Topic#unsubscribe\n * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener\n * @returns {Streaming~Topic}\n */\nTopic.prototype.unsubscribe = function(listener) {\n  this._streaming.unsubscribe(this.name, listener);\n  return this;\n};\n\n/*--------------------------------------------*/\n\n/**\n * Streaming API Generic Streaming Channel\n *\n * @class Streaming~Channel\n * @param {Streaming} steaming - Streaming API object\n * @param {String} name - Channel name (starts with \"/u/\")\n */\nvar Channel = function(streaming, name) {\n  this._streaming = streaming;\n  this._name = name;\n};\n\n/**\n * Subscribe to channel\n *\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\n * @returns {Subscription} - Faye subscription object\n */\nChannel.prototype.subscribe = function(listener) {\n  return this._streaming.subscribe(this._name, listener);\n};\n\nChannel.prototype.unsubscribe = function(listener) {\n  this._streaming.unsubscribe(this._name, listener);\n  return this;\n};\n\nChannel.prototype.push = function(events, callback) {\n  var isArray = _.isArray(events);\n  events = isArray ? events : [ events ];\n  var conn = this._streaming._conn;\n  if (!this._id) {\n    this._id = conn.sobject('StreamingChannel').findOne({ Name: this._name }, 'Id')\n      .then(function(rec) { return rec.Id });\n  }\n  return this._id.then(function(id) {\n    var channelUrl = '/sobjects/StreamingChannel/' + id + '/push';\n    return conn.requestPost(channelUrl, { pushEvents: events });\n  }).then(function(rets) {\n    return isArray ? rets : rets[0];\n  }).thenCall(callback);\n};\n\n/*--------------------------------------------*/\n\n/**\n * Streaming API class\n *\n * @class\n * @extends events.EventEmitter\n * @param {Connection} conn - Connection object\n */\nvar Streaming = function(conn) {\n  this._conn = conn;\n};\n\ninherits(Streaming, events.EventEmitter);\n\n/** @private **/\nStreaming.prototype._createClient = function(forChannelName, extensions) {\n  // forChannelName is advisory, for an API workaround. It does not restrict or select the channel.\n  var needsReplayFix = typeof forChannelName === 'string' && forChannelName.indexOf('/u/') === 0;\n  var endpointUrl = [\n    this._conn.instanceUrl,\n    // special endpoint \"/cometd/replay/xx.x\" is only available in 36.0.\n    // See https://releasenotes.docs.salesforce.com/en-us/summer16/release-notes/rn_api_streaming_classic_replay.htm\n    \"cometd\" + (needsReplayFix === true && this._conn.version === \"36.0\" ? \"/replay\" : \"\"),\n    this._conn.version\n  ].join('/');\n  var fayeClient = new Faye.Client(endpointUrl, {});\n  fayeClient.setHeader('Authorization', 'OAuth '+this._conn.accessToken);\n  if (extensions instanceof Array) {\n    extensions.forEach(function(extension) {\n      fayeClient.addExtension(extension);\n    });\n  }\n  if (fayeClient._dispatcher.getConnectionTypes().indexOf('callback-polling') === -1) {\n    // prevent streaming API server error\n    fayeClient._dispatcher.selectTransport('long-polling');\n    fayeClient._dispatcher._transport.batching = false;\n  }\n  return fayeClient;\n};\n\n/** @private **/\nStreaming.prototype._getFayeClient = function(channelName) {\n  var isGeneric = channelName.indexOf('/u/') === 0;\n  var clientType = isGeneric ? 'generic' : 'pushTopic';\n  if (!this._fayeClients || !this._fayeClients[clientType]) {\n    this._fayeClients = this._fayeClients || {};\n    this._fayeClients[clientType] = this._createClient(channelName);\n  }\n  return this._fayeClients[clientType];\n};\n\n\n/**\n * Get named topic\n *\n * @param {String} name - Topic name\n * @returns {Streaming~Topic}\n */\nStreaming.prototype.topic = function(name) {\n  this._topics = this._topics || {};\n  var topic = this._topics[name] =\n    this._topics[name] || new Topic(this, name);\n  return topic;\n};\n\n/**\n * Get Channel for Id\n * @param {String} channelId - Id of StreamingChannel object\n * @returns {Streaming~Channel}\n */\nStreaming.prototype.channel = function(channelId) {\n  return new Channel(this, channelId);\n};\n\n/**\n * Subscribe topic/channel\n *\n * @param {String} name - Topic name\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\n * @returns {Subscription} - Faye subscription object\n */\nStreaming.prototype.subscribe = function(name, listener) {\n  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;\n  var fayeClient = this._getFayeClient(channelName);\n  return fayeClient.subscribe(channelName, listener);\n};\n\n/**\n * Unsubscribe topic\n *\n * @param {String} name - Topic name\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\n * @returns {Streaming}\n */\nStreaming.prototype.unsubscribe = function(name, listener) {\n  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;\n  var fayeClient = this._getFayeClient(channelName);\n  fayeClient.unsubscribe(channelName, listener);\n  return this;\n};\n\n\n/**\n * Create a Streaming client, optionally with extensions\n *\n * See Faye docs for implementation details: https://faye.jcoglan.com/browser/extensions.html\n *\n * Example usage:\n * \n * ```javascript\n * // Establish a Salesforce connection. (Details elided)\n * const conn = new jsforce.Connection({ … });\n * \n * const fayeClient = conn.streaming.createClient();\n * \n * const subscription = fayeClient.subscribe(channel, data => {\n *   console.log('topic received data', data);\n * });\n * \n * subscription.cancel();\n * ```\n * \n * Example with extensions, using Replay & Auth Failure extensions in a server-side Node.js app:\n * \n * ```javascript\n * // Establish a Salesforce connection. (Details elided)\n * const conn = new jsforce.Connection({ … });\n * \n * const channel = \"/event/My_Event__e\";\n * const replayId = -2; // -2 is all retained events\n * \n * const exitCallback = () => process.exit(1);\n * const authFailureExt = new jsforce.StreamingExtension.AuthFailure(exitCallback);\n * \n * const replayExt = new jsforce.StreamingExtension.Replay(channel, replayId);\n * \n * const fayeClient = conn.streaming.createClient([\n *   authFailureExt,\n *   replayExt\n * ]);\n * \n * const subscription = fayeClient.subscribe(channel, data => {\n *   console.log('topic received data', data);\n * });\n * \n * subscription.cancel();\n * ```\n * \n * @param {Array} Extensions - Optional, extensions to apply to the Faye client\n * @returns {FayeClient} - Faye client object\n */\nStreaming.prototype.createClient = function(extensions) {\n  return this._createClient(null, extensions);\n};\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.streaming = new Streaming(conn);\n});\n\n/*\n * \n */\njsforce.StreamingExtension = StreamingExtension;\n\nmodule.exports = Streaming;\n"]},"metadata":{},"sourceType":"script"}