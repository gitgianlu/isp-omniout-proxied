{"ast":null,"code":"/**\n * @file Represents Salesforce QuickAction\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n/**\n * A class for quick action\n *\n * @protected\n * @constructor\n */\n\nvar QuickAction = module.exports = function (conn, path) {\n  this._conn = conn;\n  this._path = path;\n};\n/**\n * @typedef {Object} QuickAction~QuickActionInfo\n * @prop {String} type - Type of the action (e.g. Create, Update, Post, LogACall)\n * @prop {String} name - Name of the action\n * @prop {String} label - Label of the action\n * @prop {Object} urls - Endpoint URL information of the action\n */\n\n/**\n * @typedef {QuickAction~QuickActionInfo} QuickAction~QuickActionDescriveInfo\n * @prop {String} contextSobjectType - Object type used for the action\n * @prop {String} targetSobjectType - Object type of the action to target\n * @prop {String} targetParentField - Field name in the target object which refers parent(context) object record ID.\n * @prop {String} targetRecordTypeId - Record type of the targeted record\n * @prop {Object} layout - Layout sections that comprise an action\n */\n\n/**\n * Describe the action's information (including layout, etc.)\n *\n * @param {Callback.<QuickAction~QuickActionDescriveInfo>} [callback] - Callback function\n * @returns {Promise.<QuickAction~QuickActionDescriveInfo>}\n */\n\n\nQuickAction.prototype.describe = function (callback) {\n  var url = this._path + \"/describe\";\n  return this._conn.request(url).thenCall(callback);\n};\n/**\n * Retrieve default field values in the action (for given record, if specified)\n *\n * @param {String} [contextId] - ID of record to get default values specific to the record\n * @param {Callback.<Record>} [callback] - Callback function\n * @returns {Promise.<Record>}\n */\n\n\nQuickAction.prototype.defaultValues = function (contextId, callback) {\n  if (typeof contextId === 'function') {\n    callback = contextId;\n    contextId = null;\n  }\n\n  var url = this._path + \"/defaultValues\";\n\n  if (contextId) {\n    url += \"/\" + contextId;\n  }\n\n  return this._conn.request(url).thenCall(callback);\n};\n/**\n * @typedef {Object} QuickAction~QuickActionResult\n * @param {String} id - Record id of the action result\n * @param {Array.<String>} feedItemIds - List of IDs for feed item\n * @param {Boolean} success - True if the action successfully completed\n * @param {Boolean} created - True if the action yields a new record\n * @param {String} contextId - Context record ID of the action\n * @param {Array.<Object>} errors - Errors if the action failed\n */\n\n/**\n * Execute the action for given context Id and record information\n * \n * @param {String} contextId - Context record ID of the action\n * @param {Record} record - Input record information for the action\n * @param {Callback.<QuickAction~QuickActionResult>} [callback] - Callback function\n * @returns {Promise.<QuickAction~QuickActionResult>}\n */\n\n\nQuickAction.prototype.execute = function (contextId, record, callback) {\n  var body = {\n    contextId: contextId,\n    record: record\n  };\n  return this._conn.requestPost(this._path, body).thenCall(callback);\n};","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/quick-action.js"],"names":["QuickAction","module","exports","conn","path","_conn","_path","prototype","describe","callback","url","request","thenCall","defaultValues","contextId","execute","record","body","requestPost"],"mappings":"AAAA;;;;AAKA;AAGA;;;;;;;AAMA,IAAIA,WAAW,GAAGC,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACtD,OAAKC,KAAL,GAAaF,IAAb;AACA,OAAKG,KAAL,GAAaF,IAAb;AACD,CAHD;AAKA;;;;;;;;AAOA;;;;;;;;;AASA;;;;;;;;AAMAJ,WAAW,CAACO,SAAZ,CAAsBC,QAAtB,GAAiC,UAASC,QAAT,EAAmB;AAClD,MAAIC,GAAG,GAAG,KAAKJ,KAAL,GAAa,WAAvB;AACA,SAAO,KAAKD,KAAL,CAAWM,OAAX,CAAmBD,GAAnB,EAAwBE,QAAxB,CAAiCH,QAAjC,CAAP;AACD,CAHD;AAKA;;;;;;;;;AAOAT,WAAW,CAACO,SAAZ,CAAsBM,aAAtB,GAAsC,UAASC,SAAT,EAAoBL,QAApB,EAA8B;AAClE,MAAI,OAAOK,SAAP,KAAqB,UAAzB,EAAqC;AACnCL,IAAAA,QAAQ,GAAGK,SAAX;AACAA,IAAAA,SAAS,GAAG,IAAZ;AACD;;AACD,MAAIJ,GAAG,GAAG,KAAKJ,KAAL,GAAa,gBAAvB;;AACA,MAAIQ,SAAJ,EAAe;AACbJ,IAAAA,GAAG,IAAI,MAAMI,SAAb;AACD;;AACD,SAAO,KAAKT,KAAL,CAAWM,OAAX,CAAmBD,GAAnB,EAAwBE,QAAxB,CAAiCH,QAAjC,CAAP;AACD,CAVD;AAYA;;;;;;;;;;AAUA;;;;;;;;;;AAQAT,WAAW,CAACO,SAAZ,CAAsBQ,OAAtB,GAAgC,UAASD,SAAT,EAAoBE,MAApB,EAA4BP,QAA5B,EAAsC;AACpE,MAAIQ,IAAI,GAAG;AACTH,IAAAA,SAAS,EAAEA,SADF;AAETE,IAAAA,MAAM,EAAEA;AAFC,GAAX;AAIA,SAAO,KAAKX,KAAL,CAAWa,WAAX,CAAuB,KAAKZ,KAA5B,EAAmCW,IAAnC,EAAyCL,QAAzC,CAAkDH,QAAlD,CAAP;AACD,CAND","sourcesContent":["/**\n * @file Represents Salesforce QuickAction\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\n\n/**\n * A class for quick action\n *\n * @protected\n * @constructor\n */\nvar QuickAction = module.exports = function(conn, path) {\n  this._conn = conn;\n  this._path = path;\n};\n\n/**\n * @typedef {Object} QuickAction~QuickActionInfo\n * @prop {String} type - Type of the action (e.g. Create, Update, Post, LogACall)\n * @prop {String} name - Name of the action\n * @prop {String} label - Label of the action\n * @prop {Object} urls - Endpoint URL information of the action\n */\n/**\n * @typedef {QuickAction~QuickActionInfo} QuickAction~QuickActionDescriveInfo\n * @prop {String} contextSobjectType - Object type used for the action\n * @prop {String} targetSobjectType - Object type of the action to target\n * @prop {String} targetParentField - Field name in the target object which refers parent(context) object record ID.\n * @prop {String} targetRecordTypeId - Record type of the targeted record\n * @prop {Object} layout - Layout sections that comprise an action\n */\n\n/**\n * Describe the action's information (including layout, etc.)\n *\n * @param {Callback.<QuickAction~QuickActionDescriveInfo>} [callback] - Callback function\n * @returns {Promise.<QuickAction~QuickActionDescriveInfo>}\n */\nQuickAction.prototype.describe = function(callback) {\n  var url = this._path + \"/describe\";\n  return this._conn.request(url).thenCall(callback);\n};\n\n/**\n * Retrieve default field values in the action (for given record, if specified)\n *\n * @param {String} [contextId] - ID of record to get default values specific to the record\n * @param {Callback.<Record>} [callback] - Callback function\n * @returns {Promise.<Record>}\n */\nQuickAction.prototype.defaultValues = function(contextId, callback) {\n  if (typeof contextId === 'function') {\n    callback = contextId;\n    contextId = null;\n  }\n  var url = this._path + \"/defaultValues\";\n  if (contextId) {\n    url += \"/\" + contextId;\n  }\n  return this._conn.request(url).thenCall(callback);\n};\n\n/**\n * @typedef {Object} QuickAction~QuickActionResult\n * @param {String} id - Record id of the action result\n * @param {Array.<String>} feedItemIds - List of IDs for feed item\n * @param {Boolean} success - True if the action successfully completed\n * @param {Boolean} created - True if the action yields a new record\n * @param {String} contextId - Context record ID of the action\n * @param {Array.<Object>} errors - Errors if the action failed\n */\n\n/**\n * Execute the action for given context Id and record information\n * \n * @param {String} contextId - Context record ID of the action\n * @param {Record} record - Input record information for the action\n * @param {Callback.<QuickAction~QuickActionResult>} [callback] - Callback function\n * @returns {Promise.<QuickAction~QuickActionResult>}\n */\nQuickAction.prototype.execute = function(contextId, record, callback) {\n  var body = {\n    contextId: contextId,\n    record: record\n  };\n  return this._conn.requestPost(this._path, body).thenCall(callback);\n};\n"]},"metadata":{},"sourceType":"script"}