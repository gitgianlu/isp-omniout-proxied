{"ast":null,"code":"/*global process, Buffer */\n\n/**\n * @file Manages Salesforce Metadata API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar inherits = require('inherits'),\n    events = require('events'),\n    stream = require('readable-stream'),\n    _ = require('lodash/core'),\n    jsforce = require('../core'),\n    Promise = require('../promise'),\n    SOAP = require('../soap');\n/*--------------------------------------------*/\n\n/**\n * Class for Salesforce Metadata API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\n\n\nvar Metadata = module.exports = function (conn) {\n  this._conn = conn;\n};\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\n\n\nMetadata.prototype.pollInterval = 1000;\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\n\nMetadata.prototype.pollTimeout = 10000;\n/**\n * Call Metadata API SOAP endpoint\n *\n * @private\n */\n\nMetadata.prototype._invoke = function (method, message, callback) {\n  var soapEndpoint = new SOAP(this._conn, {\n    xmlns: \"http://soap.sforce.com/2006/04/metadata\",\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/m/\" + this._conn.version\n  });\n  return soapEndpoint.invoke(method, message).then(function (res) {\n    return res.result;\n  }).thenCall(callback);\n};\n/**\n * @typedef {Object} Metadata~MetadataInfo\n * @prop {String} fullName - The name of the component\n */\n\n/**\n * Asynchronously adds one or more new metadata components to the organization.\n *\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\n\n\nMetadata.prototype.createAsync = function (type, metadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n\n  var convert = function (md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n\n  var isArray = _.isArray(metadata);\n\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n\n  var res = this._invoke(\"create\", {\n    metadata: metadata\n  });\n\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n/**\n * @typedef {Object} Metadata~SaveResult\n * @prop {Boolean} success - True if metadata is successfully saved\n * @prop {String} fullName - Full name of metadata object\n */\n\n/**\n * @private\n */\n\n\nfunction convertToSaveResult(result) {\n  var saveResult = _.clone(result);\n\n  saveResult.success = saveResult.success === 'true';\n  return saveResult;\n}\n/**\n * @typedef {Object} Metadata~UpsertResult\n * @prop {Boolean} success - True if metadata is successfully saved\n * @prop {String} fullName - Full name of metadata object\n * @prop {Boolean} created - True if metadata is newly created\n */\n\n/**\n * @private\n */\n\n\nfunction convertToUpsertResult(result) {\n  var upsertResult = convertToSaveResult(result);\n  upsertResult.created = upsertResult.created === 'true';\n  return upsertResult;\n}\n/**\n * Synonym of Metadata#create().\n *\n * @method Metadata#createSync\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n/**\n * Synchronously adds one or more new metadata components to the organization.\n *\n * @method Metadata#create\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n\nMetadata.prototype.createSync = Metadata.prototype.create = function (type, metadata, callback) {\n  var convert = function (md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n\n  var isArray = _.isArray(metadata);\n\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"createMetadata\", {\n    metadata: metadata\n  }).then(function (results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n/**\n * @private\n */\n\n\nfunction convertToMetadataInfo(rec) {\n  var metadataInfo = _.clone(rec);\n\n  delete metadataInfo.$;\n  return metadataInfo;\n}\n/**\n * Synonym of Metadata#read()\n *\n * @method Metadata#readSync\n * @param {String} type - The type of metadata to read\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\n */\n\n/**\n * Synchronously read specified metadata components in the organization.\n *\n * @method Metadata#read\n * @param {String} type - The type of metadata to read\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\n */\n\n\nMetadata.prototype.readSync = Metadata.prototype.read = function (type, fullNames, callback) {\n  return this._invoke(\"readMetadata\", {\n    type: type,\n    fullNames: fullNames\n  }).then(function (res) {\n    return _.isArray(res.records) ? _.map(res.records, convertToMetadataInfo) : convertToMetadataInfo(res.records);\n  }).thenCall(callback);\n};\n/**\n * @typedef {Object} Metadata~UpdateMetadataInfo\n * @prop {String} currentName - The API name of the component or field before the update\n * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update\n */\n\n/**\n * Asynchronously updates one or more metadata components in the organization.\n *\n * @param {String} type - The type of metadata to update\n * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\n\n\nMetadata.prototype.updateAsync = function (type, updateMetadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n\n  var convert = function (umd) {\n    umd.metadata[\"@xsi:type\"] = type;\n    return umd;\n  };\n\n  var isArray = _.isArray(updateMetadata);\n\n  updateMetadata = isArray ? _.map(updateMetadata, convert) : convert(updateMetadata);\n\n  var res = this._invoke(\"update\", {\n    updateMetadata: updateMetadata\n  });\n\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n/**\n * Synonym of Metadata#update().\n *\n * @method Metadata#updateSync\n * @param {String} type - The type of metadata to update\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n/**\n * Synchronously updates one or more metadata components in the organization.\n *\n * @method Metadata#update\n * @param {String} type - The type of metadata to update\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n\nMetadata.prototype.updateSync = Metadata.prototype.update = function (type, metadata, callback) {\n  var convert = function (md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n\n  var isArray = _.isArray(metadata);\n\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"updateMetadata\", {\n    metadata: metadata\n  }).then(function (results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n/**\n * Synonym of Metadata#upsert().\n *\n * @method Metadata#upsertSync\n * @param {String} type - The type of metadata to upsert\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\n */\n\n/**\n * Upserts one or more components in your organization's data.\n *\n * @method Metadata#upsert\n * @param {String} type - The type of metadata to upsert\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\n */\n\n\nMetadata.prototype.upsertSync = Metadata.prototype.upsert = function (type, metadata, callback) {\n  var convert = function (md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n\n  var isArray = _.isArray(metadata);\n\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"upsertMetadata\", {\n    metadata: metadata\n  }).then(function (results) {\n    return _.isArray(results) ? _.map(results, convertToUpsertResult) : convertToUpsertResult(results);\n  }).thenCall(callback);\n};\n/**\n * Asynchronously deletes specified metadata components in the organization.\n *\n * @param {String} type - The type of metadata to delete\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\n\n\nMetadata.prototype.deleteAsync = function (type, metadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n\n  var convert = function (md) {\n    if (_.isString(md)) {\n      md = {\n        fullName: md\n      };\n    }\n\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n\n  var isArray = _.isArray(metadata);\n\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n\n  var res = this._invoke(\"delete\", {\n    metadata: metadata\n  });\n\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n/**\n * Synonym of Metadata#delete().\n *\n * @deprecated\n * @method Metadata#del\n * @param {String} [type] - The type of metadata to delete\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\n\n/**\n * Synonym of Metadata#delete().\n *\n * @method Metadata#deleteSync\n * @param {String} type - The type of metadata to delete\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n/**\n * Synchronously deletes specified metadata components in the organization.\n *\n * @method Metadata#delete\n * @param {String} type - The type of metadata to delete\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n\nMetadata.prototype.del = Metadata.prototype.deleteSync = Metadata.prototype[\"delete\"] = function (type, fullNames, callback) {\n  return this._invoke(\"deleteMetadata\", {\n    type: type,\n    fullNames: fullNames\n  }).then(function (results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n/**\n * Rename fullname of a metadata component in the organization\n *\n * @param {String} type - The type of metadata to delete\n * @param {String} oldFullName - The original fullName of metadata\n * @param {String} newFullName - The new fullName of metadata\n * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult>}\n */\n\n\nMetadata.prototype.rename = function (type, oldFullName, newFullName, callback) {\n  return this._invoke(\"renameMetadata\", {\n    type: type,\n    oldFullName: oldFullName,\n    newFullName: newFullName\n  }).then(function (result) {\n    return convertToSaveResult(result);\n  }).thenCall(callback);\n};\n/**\n * Checks the status of asynchronous metadata calls\n *\n * @param {String|Array.<String>} ids - The asynchronous process ID(s)\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\n\n\nMetadata.prototype.checkStatus = function (ids, callback) {\n  var isArray = _.isArray(ids);\n\n  var res = this._invoke(\"checkStatus\", {\n    asyncProcessId: ids\n  });\n\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n/**\n * @typedef {Object} Metadata~DescribeMetadataResult\n * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes\n * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component\n * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component\n * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not\n * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file\n * @prop {String} metadataObjects.suffix - The file suffix for this component\n * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component\n * @prop {String} organizationNamespace - The namespace of the organization\n * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not\n * @prop {Boolean} testRequired - Indicates whether tests are required or not\n */\n\n/**\n * Retrieves the metadata which describes your organization, including Apex classes and triggers,\n * custom objects, custom fields on standard objects, tab sets that define an app,\n * and many other components.\n *\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\n * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DescribeMetadataResult>}\n */\n\n\nMetadata.prototype.describe = function (version, callback) {\n  if (!_.isString(version)) {\n    callback = version;\n    version = this._conn.version;\n  }\n\n  return this._invoke(\"describeMetadata\", {\n    asOfVersion: version\n  }).then(function (res) {\n    res.metadataObjects = _.isArray(res.metadataObjects) ? res.metadataObjects : [res.metadataObjects];\n    res.metadataObjects = _.map(res.metadataObjects, function (mo) {\n      if (mo.childXmlNames) {\n        mo.childXmlNames = _.isArray(mo.childXmlNames) ? mo.childXmlNames : [mo.childXmlNames];\n      }\n\n      mo.inFolder = mo.inFolder === 'true';\n      mo.metaFile = mo.metaFile === 'true';\n      return mo;\n    });\n    res.partialSaveAllowed = res.partialSaveAllowed === 'true';\n    res.testRequired = res.testRequired === 'true';\n    return res;\n  }).thenCall(callback);\n};\n/**\n * @typedef {Object} Metadata~ListMetadataQuery\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\n * @prop {String} [folder] - The folder associated with the component.\n */\n\n/**\n * @typedef {Object} Metadata~FileProperties\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\n * @prop {String} createdById - ID of the user who created the file\n * @prop {String} createdByName - Name of the user who created the file\n * @prop {String} createdDate - Date and time when the file was created\n * @prop {String} fileName - Name of the file\n * @prop {String} fullName - The file developer name used as a unique identifier for API access\n * @prop {String} id - ID of the file\n * @prop {String} lastModifiedById - ID of the user who last modified the file\n * @prop {String} lastModifiedByName - Name of the user who last modified the file\n * @prop {String} lastModifiedDate - Date and time that the file was last modified\n * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package\n * @prop {String} [namespacePrefix] - The namespace prefix of the component\n */\n\n/**\n * Retrieves property information about metadata components in your organization\n *\n * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\n * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~FileProperties>>}\n */\n\n\nMetadata.prototype.list = function (queries, version, callback) {\n  if (!_.isString(version)) {\n    callback = version;\n    version = this._conn.version;\n  }\n\n  if (!_.isArray(queries)) {\n    queries = [queries];\n  }\n\n  return this._invoke(\"listMetadata\", {\n    queries: queries,\n    asOfVersion: version\n  }, callback);\n};\n/**\n * @typedef {Object} Metadata~RetrieveRequest\n */\n\n/**\n * Retrieves XML file representations of components in an organization\n *\n * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\n * @returns {Metadata~RetrieveResultLocator}\n */\n\n\nMetadata.prototype.retrieve = function (request, callback) {\n  var res = this._invoke(\"retrieve\", {\n    request: request\n  });\n\n  return new RetrieveResultLocator(this, res).thenCall(callback);\n};\n/**\n * Checks the status of declarative metadata call retrieve() and returns the zip file contents\n *\n * @param {String} id - Async process id returned from previous retrieve request\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~RetrieveResult>}\n */\n\n\nMetadata.prototype.checkRetrieveStatus = function (id, callback) {\n  return this._invoke(\"checkRetrieveStatus\", {\n    asyncProcessId: id\n  }, callback);\n};\n/**\n * Deploy components into an organization using zipped file representations\n *\n * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string\n * @param {Object} [options] - Options used in deployment\n * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.\n * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.\n * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).\n * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.\n * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).\n * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.\n * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).\n * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.\n * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.\n * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\n * @returns {Metadata~DeployResultLocator}\n */\n\n\nMetadata.prototype.deploy = function (zipInput, options, callback) {\n  if (!options || _.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n\n  var deferred = Promise.defer();\n\n  if (_.isObject(zipInput) && _.isFunction(zipInput.pipe)) {\n    var bufs = [];\n    zipInput.on('data', function (d) {\n      bufs.push(d);\n    });\n    zipInput.on('end', function () {\n      deferred.resolve(Buffer.concat(bufs).toString('base64'));\n    }); // zipInput.resume();\n  } else if (zipInput instanceof Buffer) {\n    deferred.resolve(zipInput.toString('base64'));\n  } else if (zipInput instanceof String || typeof zipInput === 'string') {\n    deferred.resolve(zipInput);\n  } else {\n    throw \"Unexpected zipInput type\";\n  }\n\n  var self = this;\n  var res = deferred.promise.then(function (zipContentB64) {\n    return self._invoke(\"deploy\", {\n      ZipFile: zipContentB64,\n      DeployOptions: options\n    }, callback);\n  });\n  return new DeployResultLocator(this, res).thenCall(callback);\n};\n/**\n * Checks the status of declarative metadata call deploy()\n *\n * @param {String} id - Async process id returned from previous deploy request\n * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DeployResult>}\n */\n\n\nMetadata.prototype.checkDeployStatus = function (id, includeDetails, callback) {\n  if (_.isObject(includeDetails) || _.isBoolean(includeDetails)) {\n    includeDetails = !!includeDetails;\n  } else {\n    callback = includeDetails;\n    includeDetails = false;\n  }\n\n  return this._invoke(\"checkDeployStatus\", {\n    asyncProcessId: id,\n    includeDetails: includeDetails\n  }).then(function (res) {\n    res.done = res.done === 'true';\n    res.success = res.success === 'true';\n    res.checkOnly = res.checkOnly === 'true';\n    res.runTestsEnabled = res.runTestsEnabled === 'true';\n\n    if (res.ignoreWarnings) {\n      res.ignoreWarnings = res.ignoreWarnings === 'true';\n    }\n\n    if (res.rollbackOnError) {\n      res.rollbackOnError = res.rollbackOnError === 'true';\n    }\n\n    res.numberComponentErrors = Number(res.numberComponentErrors);\n    res.numberComponentsDeployed = Number(res.numberComponentsDeployed);\n    res.numberComponentsTotal = Number(res.numberComponentsTotal);\n    res.numberTestErrors = Number(res.numberTestErrors);\n    res.numberTestsCompleted = Number(res.numberTestsCompleted);\n    res.numberTestsTotal = Number(res.numberTestsTotal);\n    return res;\n  }).thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/**\n * @typedef {Object} Metadata~AsyncResult\n * @prop {Boolean} done - Indicates whether the call has completed or not\n * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved\n * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.\n * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned\n * @prop {String} [message] - Message corresponding to the statusCode field returned\n */\n\n/**\n * The locator class for Metadata API asynchronous call result\n *\n * @protected\n * @class Metadata~AsyncResultLocator\n * @extends events.EventEmitter\n * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info\n * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object\n */\n\n\nvar AsyncResultLocator = function (meta, results, isArray) {\n  this._meta = meta;\n  this._results = results;\n  this._isArray = isArray;\n};\n\ninherits(AsyncResultLocator, events.EventEmitter);\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Metadata~AsyncResultLocator#then\n */\n\nAsyncResultLocator.prototype.then = function (onResolve, onReject) {\n  var self = this;\n  return this._results.then(function (results) {\n    var convertType = function (res) {\n      if (res.$ && res.$[\"xsi:nil\"] === 'true') {\n        return null;\n      }\n\n      res.done = res.done === 'true';\n      return res;\n    };\n\n    results = _.isArray(results) ? _.map(results, convertType) : convertType(results);\n\n    if (self._isArray && !_.isArray(results)) {\n      results = [results];\n    }\n\n    return onResolve(results);\n  }, onReject);\n};\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Metadata~AsyncResultLocator#thenCall\n */\n\n\nAsyncResultLocator.prototype.thenCall = function (callback) {\n  return _.isFunction(callback) ? this.then(function (res) {\n    process.nextTick(function () {\n      callback(null, res);\n    });\n  }, function (err) {\n    process.nextTick(function () {\n      callback(err);\n    });\n  }) : this;\n};\n/**\n * Check the status of async request\n *\n * @method Metadata~AsyncResultLocator#check\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\n */\n\n\nAsyncResultLocator.prototype.check = function (callback) {\n  var self = this;\n  var meta = this._meta;\n  return this.then(function (results) {\n    var ids = _.isArray(results) ? _.map(results, function (res) {\n      return res.id;\n    }) : results.id;\n    self._ids = ids;\n    return meta.checkStatus(ids);\n  }).thenCall(callback);\n};\n/**\n * Polling until async call status becomes complete or error\n *\n * @method Metadata~AsyncResultLocator#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\n\n\nAsyncResultLocator.prototype.poll = function (interval, timeout) {\n  var self = this;\n  var startTime = new Date().getTime();\n\n  var poll = function () {\n    var now = new Date().getTime();\n\n    if (startTime + timeout < now) {\n      var errMsg = \"Polling time out.\";\n\n      if (self._ids) {\n        errMsg += \" Process Id = \" + self._ids;\n      }\n\n      self.emit('error', new Error(errMsg));\n      return;\n    }\n\n    self.check().then(function (results) {\n      var done = true;\n      var resultArr = _.isArray(results) ? results : [results];\n\n      for (var i = 0, len = resultArr.length; i < len; i++) {\n        var result = resultArr[i];\n\n        if (result && !result.done) {\n          self.emit('progress', result);\n          done = false;\n        }\n      }\n\n      if (done) {\n        self.emit('complete', results);\n      } else {\n        setTimeout(poll, interval);\n      }\n    }, function (err) {\n      self.emit('error', err);\n    });\n  };\n\n  setTimeout(poll, interval);\n};\n/**\n * Check and wait until the async requests become in completed status\n *\n * @method Metadata~AsyncResultLocator#complete\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\n */\n\n\nAsyncResultLocator.prototype.complete = function (callback) {\n  var deferred = Promise.defer();\n  this.on('complete', function (results) {\n    deferred.resolve(results);\n  });\n  this.on('error', function (err) {\n    deferred.reject(err);\n  });\n  var meta = this._meta;\n  this.poll(meta.pollInterval, meta.pollTimeout);\n  return deferred.promise.thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/**\n * The locator class to track retreive() Metadata API call result\n *\n * @protected\n * @class Metadata~RetrieveResultLocator\n * @extends Metadata~AsyncResultLocator\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()\n */\n\n\nvar RetrieveResultLocator = function (meta, result) {\n  RetrieveResultLocator.super_.call(this, meta, result);\n};\n\ninherits(RetrieveResultLocator, AsyncResultLocator);\n/**\n * @typedef {Object} Metadata~RetrieveResult\n * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml\n * @prop {String} id - ID of the component being retrieved\n * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call\n * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data\n */\n\n/**\n * Check and wait until the async request becomes in completed status,\n * and retrieve the result data.\n *\n * @memthod Metadata~RetrieveResultLocator#complete\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~RetrieveResult>}\n */\n\nRetrieveResultLocator.prototype.complete = function (callback) {\n  var meta = this._meta;\n  return RetrieveResultLocator.super_.prototype.complete.call(this).then(function (result) {\n    return meta.checkRetrieveStatus(result.id);\n  }).thenCall(callback);\n};\n/**\n * Change the retrieved result to Node.js readable stream\n *\n * @method Metadata~RetrieveResultLocator#stream\n * @returns {stream.Readable}\n */\n\n\nRetrieveResultLocator.prototype.stream = function () {\n  var self = this;\n  var resultStream = new stream.Readable();\n  var reading = false;\n\n  resultStream._read = function () {\n    if (reading) {\n      return;\n    }\n\n    reading = true;\n    self.complete(function (err, result) {\n      if (err) {\n        resultStream.emit('error', err);\n      } else {\n        resultStream.push(new Buffer(result.zipFile, 'base64'));\n        resultStream.push(null);\n      }\n    });\n  };\n\n  return resultStream;\n};\n/*--------------------------------------------*/\n\n/**\n * The locator class to track deploy() Metadata API call result\n *\n * @protected\n * @class Metadata~DeployResultLocator\n * @extends Metadata~AsyncResultLocator\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call\n */\n\n\nvar DeployResultLocator = function (meta, result) {\n  DeployResultLocator.super_.call(this, meta, result);\n};\n\ninherits(DeployResultLocator, AsyncResultLocator);\n/**\n * @typedef {Object} Metadata~DeployResult\n * @prop {String} id - ID of the component being deployed\n * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not\n * @prop {String} completedDate - Timestamp for when the deployment process ended\n * @prop {String} createdDate - Timestamp for when the deploy() call was received\n * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call\n * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id\n * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field\n * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield\n * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings\n * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process\n * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment\n * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process\n * @prop {Number} numberComponentsTotal - The total number of components in the deployment\n * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment\n * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment\n * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment\n * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.\n * @prop {String} startDate - Timestamp for when the deployment process began\n * @prop {String} status - Indicates the current state of the deployment\n * @prop {Boolean} success - Indicates whether the deployment was successful or not\n */\n\n/**\n * Check and wait until the async request becomes in completed status,\n * and retrieve the result data.\n *\n * @method Metadata~DeployResultLocator#complete\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DeployResult>}\n */\n\nDeployResultLocator.prototype.complete = function (includeDetails, callback) {\n  if (_.isFunction(includeDetails)) {\n    callback = includeDetails;\n    includeDetails = false;\n  }\n\n  var meta = this._meta;\n  return DeployResultLocator.super_.prototype.complete.call(this).then(function (result) {\n    return meta.checkDeployStatus(result.id, includeDetails);\n  }).thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\n\n\njsforce.on('connection:new', function (conn) {\n  conn.metadata = new Metadata(conn);\n});","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/api/metadata.js"],"names":["inherits","require","events","stream","_","jsforce","Promise","SOAP","Metadata","module","exports","conn","_conn","prototype","pollInterval","pollTimeout","_invoke","method","message","callback","soapEndpoint","xmlns","endpointUrl","instanceUrl","version","invoke","then","res","result","thenCall","createAsync","type","metadata","Number","Error","convert","md","isArray","map","AsyncResultLocator","convertToSaveResult","saveResult","clone","success","convertToUpsertResult","upsertResult","created","createSync","create","results","convertToMetadataInfo","rec","metadataInfo","$","readSync","read","fullNames","records","updateAsync","updateMetadata","umd","updateSync","update","upsertSync","upsert","deleteAsync","isString","fullName","del","deleteSync","rename","oldFullName","newFullName","checkStatus","ids","asyncProcessId","describe","asOfVersion","metadataObjects","mo","childXmlNames","inFolder","metaFile","partialSaveAllowed","testRequired","list","queries","retrieve","request","RetrieveResultLocator","checkRetrieveStatus","id","deploy","zipInput","options","isFunction","deferred","defer","isObject","pipe","bufs","on","d","push","resolve","Buffer","concat","toString","String","self","promise","zipContentB64","ZipFile","DeployOptions","DeployResultLocator","checkDeployStatus","includeDetails","isBoolean","done","checkOnly","runTestsEnabled","ignoreWarnings","rollbackOnError","numberComponentErrors","numberComponentsDeployed","numberComponentsTotal","numberTestErrors","numberTestsCompleted","numberTestsTotal","meta","_meta","_results","_isArray","EventEmitter","onResolve","onReject","convertType","process","nextTick","err","check","_ids","poll","interval","timeout","startTime","Date","getTime","now","errMsg","emit","resultArr","i","len","length","setTimeout","complete","reject","super_","call","resultStream","Readable","reading","_read","zipFile"],"mappings":"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","sourcesContent":["/*global process, Buffer */\n/**\n * @file Manages Salesforce Metadata API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits = require('inherits'),\n    events  = require('events'),\n    stream  = require('readable-stream'),\n    _       = require('lodash/core'),\n    jsforce = require('../core'),\n    Promise = require('../promise'),\n    SOAP    = require('../soap');\n\n/*--------------------------------------------*/\n/**\n * Class for Salesforce Metadata API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Metadata = module.exports = function(conn) {\n  this._conn = conn;\n};\n\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nMetadata.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nMetadata.prototype.pollTimeout = 10000;\n\n\n/**\n * Call Metadata API SOAP endpoint\n *\n * @private\n */\nMetadata.prototype._invoke = function(method, message, callback) {\n  var soapEndpoint = new SOAP(this._conn, {\n    xmlns: \"http://soap.sforce.com/2006/04/metadata\",\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/m/\" + this._conn.version\n  });\n  return soapEndpoint.invoke(method, message).then(function(res) {\n    return res.result;\n  }).thenCall(callback);\n};\n\n\n/**\n * @typedef {Object} Metadata~MetadataInfo\n * @prop {String} fullName - The name of the component\n */\n\n/**\n * Asynchronously adds one or more new metadata components to the organization.\n *\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.createAsync = function(type, metadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  var res = this._invoke(\"create\", { metadata: metadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~SaveResult\n * @prop {Boolean} success - True if metadata is successfully saved\n * @prop {String} fullName - Full name of metadata object\n */\n\n/**\n * @private\n */\nfunction convertToSaveResult(result) {\n  var saveResult = _.clone(result);\n  saveResult.success = saveResult.success === 'true';\n  return saveResult;\n}\n\n/**\n * @typedef {Object} Metadata~UpsertResult\n * @prop {Boolean} success - True if metadata is successfully saved\n * @prop {String} fullName - Full name of metadata object\n * @prop {Boolean} created - True if metadata is newly created\n */\n\n/**\n * @private\n */\nfunction convertToUpsertResult(result) {\n  var upsertResult = convertToSaveResult(result);\n  upsertResult.created = upsertResult.created === 'true';\n  return upsertResult;\n}\n\n/**\n * Synonym of Metadata#create().\n *\n * @method Metadata#createSync\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n/**\n * Synchronously adds one or more new metadata components to the organization.\n *\n * @method Metadata#create\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.createSync =\nMetadata.prototype.create = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"createMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * @private\n */\nfunction convertToMetadataInfo(rec) {\n  var metadataInfo = _.clone(rec);\n  delete metadataInfo.$;\n  return metadataInfo;\n}\n\n/**\n * Synonym of Metadata#read()\n *\n * @method Metadata#readSync\n * @param {String} type - The type of metadata to read\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\n */\n/**\n * Synchronously read specified metadata components in the organization.\n *\n * @method Metadata#read\n * @param {String} type - The type of metadata to read\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\n */\nMetadata.prototype.readSync =\nMetadata.prototype.read = function(type, fullNames, callback) {\n  return this._invoke(\"readMetadata\", { type: type, fullNames: fullNames }).then(function(res) {\n    return _.isArray(res.records) ? _.map(res.records, convertToMetadataInfo) : convertToMetadataInfo(res.records);\n  }).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~UpdateMetadataInfo\n * @prop {String} currentName - The API name of the component or field before the update\n * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update\n */\n\n/**\n * Asynchronously updates one or more metadata components in the organization.\n *\n * @param {String} type - The type of metadata to update\n * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.updateAsync = function(type, updateMetadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(umd) {\n    umd.metadata[\"@xsi:type\"] = type;\n    return umd;\n  };\n  var isArray = _.isArray(updateMetadata);\n  updateMetadata = isArray ? _.map(updateMetadata, convert) : convert(updateMetadata);\n  var res = this._invoke(\"update\", { updateMetadata: updateMetadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * Synonym of Metadata#update().\n *\n * @method Metadata#updateSync\n * @param {String} type - The type of metadata to update\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n/**\n * Synchronously updates one or more metadata components in the organization.\n *\n * @method Metadata#update\n * @param {String} type - The type of metadata to update\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.updateSync =\nMetadata.prototype.update = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"updateMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Synonym of Metadata#upsert().\n *\n * @method Metadata#upsertSync\n * @param {String} type - The type of metadata to upsert\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\n */\n/**\n * Upserts one or more components in your organization's data.\n *\n * @method Metadata#upsert\n * @param {String} type - The type of metadata to upsert\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\n */\nMetadata.prototype.upsertSync =\nMetadata.prototype.upsert = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"upsertMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToUpsertResult) : convertToUpsertResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Asynchronously deletes specified metadata components in the organization.\n *\n * @param {String} type - The type of metadata to delete\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.deleteAsync = function(type, metadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(md) {\n    if (_.isString(md)) {\n      md = { fullName : md };\n    }\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  var res = this._invoke(\"delete\", { metadata: metadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * Synonym of Metadata#delete().\n *\n * @deprecated\n * @method Metadata#del\n * @param {String} [type] - The type of metadata to delete\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\n/**\n * Synonym of Metadata#delete().\n *\n * @method Metadata#deleteSync\n * @param {String} type - The type of metadata to delete\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n/**\n * Synchronously deletes specified metadata components in the organization.\n *\n * @method Metadata#delete\n * @param {String} type - The type of metadata to delete\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.del =\nMetadata.prototype.deleteSync =\nMetadata.prototype[\"delete\"] = function(type, fullNames, callback) {\n  return this._invoke(\"deleteMetadata\", { type: type, fullNames: fullNames }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Rename fullname of a metadata component in the organization\n *\n * @param {String} type - The type of metadata to delete\n * @param {String} oldFullName - The original fullName of metadata\n * @param {String} newFullName - The new fullName of metadata\n * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult>}\n */\nMetadata.prototype.rename = function(type, oldFullName, newFullName, callback) {\n  return this._invoke(\"renameMetadata\", { type: type, oldFullName: oldFullName, newFullName: newFullName }).then(function(result) {\n    return convertToSaveResult(result);\n  }).thenCall(callback);\n};\n\n/**\n * Checks the status of asynchronous metadata calls\n *\n * @param {String|Array.<String>} ids - The asynchronous process ID(s)\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.checkStatus = function(ids, callback) {\n  var isArray = _.isArray(ids);\n  var res = this._invoke(\"checkStatus\", { asyncProcessId: ids });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~DescribeMetadataResult\n * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes\n * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component\n * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component\n * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not\n * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file\n * @prop {String} metadataObjects.suffix - The file suffix for this component\n * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component\n * @prop {String} organizationNamespace - The namespace of the organization\n * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not\n * @prop {Boolean} testRequired - Indicates whether tests are required or not\n */\n\n/**\n * Retrieves the metadata which describes your organization, including Apex classes and triggers,\n * custom objects, custom fields on standard objects, tab sets that define an app,\n * and many other components.\n *\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\n * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DescribeMetadataResult>}\n */\nMetadata.prototype.describe = function(version, callback) {\n  if (!_.isString(version)) {\n    callback = version;\n    version = this._conn.version;\n  }\n  return this._invoke(\"describeMetadata\", { asOfVersion: version }).then(function(res) {\n    res.metadataObjects = _.isArray(res.metadataObjects) ? res.metadataObjects : [ res.metadataObjects ];\n    res.metadataObjects = _.map(res.metadataObjects, function(mo) {\n      if (mo.childXmlNames) {\n        mo.childXmlNames = _.isArray(mo.childXmlNames) ? mo.childXmlNames: [ mo.childXmlNames ];\n      }\n      mo.inFolder = mo.inFolder === 'true';\n      mo.metaFile = mo.metaFile === 'true';\n      return mo;\n    });\n    res.partialSaveAllowed = res.partialSaveAllowed === 'true';\n    res.testRequired = res.testRequired === 'true';\n    return res;\n  }).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~ListMetadataQuery\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\n * @prop {String} [folder] - The folder associated with the component.\n */\n\n/**\n * @typedef {Object} Metadata~FileProperties\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\n * @prop {String} createdById - ID of the user who created the file\n * @prop {String} createdByName - Name of the user who created the file\n * @prop {String} createdDate - Date and time when the file was created\n * @prop {String} fileName - Name of the file\n * @prop {String} fullName - The file developer name used as a unique identifier for API access\n * @prop {String} id - ID of the file\n * @prop {String} lastModifiedById - ID of the user who last modified the file\n * @prop {String} lastModifiedByName - Name of the user who last modified the file\n * @prop {String} lastModifiedDate - Date and time that the file was last modified\n * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package\n * @prop {String} [namespacePrefix] - The namespace prefix of the component\n */\n\n/**\n * Retrieves property information about metadata components in your organization\n *\n * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\n * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~FileProperties>>}\n */\nMetadata.prototype.list = function(queries, version, callback) {\n  if (!_.isString(version)) {\n    callback = version;\n    version = this._conn.version;\n  }\n  if (!_.isArray(queries)) {\n    queries = [ queries ];\n  }\n  return this._invoke(\"listMetadata\", { queries: queries, asOfVersion: version }, callback);\n};\n\n/**\n * @typedef {Object} Metadata~RetrieveRequest\n */\n\n/**\n * Retrieves XML file representations of components in an organization\n *\n * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\n * @returns {Metadata~RetrieveResultLocator}\n */\nMetadata.prototype.retrieve = function(request, callback) {\n  var res = this._invoke(\"retrieve\", { request: request });\n  return new RetrieveResultLocator(this, res).thenCall(callback);\n};\n\n/**\n * Checks the status of declarative metadata call retrieve() and returns the zip file contents\n *\n * @param {String} id - Async process id returned from previous retrieve request\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~RetrieveResult>}\n */\nMetadata.prototype.checkRetrieveStatus = function(id, callback) {\n  return this._invoke(\"checkRetrieveStatus\", { asyncProcessId: id }, callback);\n};\n\n/**\n * Deploy components into an organization using zipped file representations\n *\n * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string\n * @param {Object} [options] - Options used in deployment\n * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.\n * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.\n * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).\n * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.\n * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).\n * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.\n * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).\n * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.\n * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.\n * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\n * @returns {Metadata~DeployResultLocator}\n */\nMetadata.prototype.deploy = function(zipInput, options, callback) {\n  if (!options || _.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n  var deferred = Promise.defer();\n  if (_.isObject(zipInput) && _.isFunction(zipInput.pipe)) {\n    var bufs = [];\n    zipInput.on('data', function(d) {\n      bufs.push(d);\n    });\n    zipInput.on('end', function() {\n      deferred.resolve(Buffer.concat(bufs).toString('base64'));\n    });\n    // zipInput.resume();\n  } else if (zipInput instanceof Buffer) {\n    deferred.resolve(zipInput.toString('base64'));\n  } else if (zipInput instanceof String || typeof zipInput === 'string') {\n    deferred.resolve(zipInput);\n  } else {\n    throw \"Unexpected zipInput type\";\n  }\n\n  var self = this;\n  var res = deferred.promise.then(function(zipContentB64) {\n    return self._invoke(\"deploy\", {\n      ZipFile: zipContentB64,\n      DeployOptions: options\n    }, callback);\n  });\n  return new DeployResultLocator(this, res).thenCall(callback);\n};\n\n/**\n * Checks the status of declarative metadata call deploy()\n *\n * @param {String} id - Async process id returned from previous deploy request\n * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DeployResult>}\n */\nMetadata.prototype.checkDeployStatus = function(id, includeDetails, callback) {\n  if (_.isObject(includeDetails) || _.isBoolean(includeDetails)) {\n    includeDetails = !!includeDetails;\n  } else {\n    callback = includeDetails;\n    includeDetails = false;\n  }\n  return this._invoke(\"checkDeployStatus\", {\n    asyncProcessId: id,\n    includeDetails : includeDetails\n  }).then(function(res) {\n    res.done = res.done === 'true';\n    res.success = res.success === 'true';\n    res.checkOnly = res.checkOnly === 'true';\n    res.runTestsEnabled = res.runTestsEnabled === 'true';\n    if (res.ignoreWarnings) {\n      res.ignoreWarnings = res.ignoreWarnings === 'true';\n    }\n    if (res.rollbackOnError) {\n      res.rollbackOnError = res.rollbackOnError === 'true';\n    }\n    res.numberComponentErrors = Number(res.numberComponentErrors);\n    res.numberComponentsDeployed = Number(res.numberComponentsDeployed);\n    res.numberComponentsTotal = Number(res.numberComponentsTotal);\n    res.numberTestErrors = Number(res.numberTestErrors);\n    res.numberTestsCompleted = Number(res.numberTestsCompleted);\n    res.numberTestsTotal = Number(res.numberTestsTotal);\n\n    return res;\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * @typedef {Object} Metadata~AsyncResult\n * @prop {Boolean} done - Indicates whether the call has completed or not\n * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved\n * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.\n * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned\n * @prop {String} [message] - Message corresponding to the statusCode field returned\n */\n\n/**\n * The locator class for Metadata API asynchronous call result\n *\n * @protected\n * @class Metadata~AsyncResultLocator\n * @extends events.EventEmitter\n * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info\n * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object\n */\nvar AsyncResultLocator = function(meta, results, isArray) {\n  this._meta = meta;\n  this._results = results;\n  this._isArray = isArray;\n};\n\ninherits(AsyncResultLocator, events.EventEmitter);\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Metadata~AsyncResultLocator#then\n */\nAsyncResultLocator.prototype.then = function(onResolve, onReject) {\n  var self = this;\n  return this._results.then(function(results) {\n    var convertType = function(res) {\n      if (res.$ && res.$[\"xsi:nil\"] === 'true') {\n        return null;\n      }\n      res.done = res.done === 'true';\n      return res;\n    };\n    results = _.isArray(results) ? _.map(results, convertType) : convertType(results);\n    if (self._isArray && !_.isArray(results)) {\n      results = [ results ];\n    }\n    return onResolve(results);\n  }, onReject);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Metadata~AsyncResultLocator#thenCall\n */\nAsyncResultLocator.prototype.thenCall = function(callback) {\n  return _.isFunction(callback) ? this.then(function(res) {\n    process.nextTick(function() {\n      callback(null, res);\n    });\n  }, function(err) {\n    process.nextTick(function() {\n      callback(err);\n    });\n  }) : this;\n};\n\n/**\n * Check the status of async request\n *\n * @method Metadata~AsyncResultLocator#check\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\n */\nAsyncResultLocator.prototype.check = function(callback) {\n  var self = this;\n  var meta = this._meta;\n  return this.then(function(results) {\n    var ids = _.isArray(results) ? _.map(results, function(res){ return res.id; }) : results.id;\n    self._ids = ids;\n    return meta.checkStatus(ids);\n  }).thenCall(callback);\n};\n\n/**\n * Polling until async call status becomes complete or error\n *\n * @method Metadata~AsyncResultLocator#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nAsyncResultLocator.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var errMsg = \"Polling time out.\";\n      if (self._ids) {\n        errMsg += \" Process Id = \" + self._ids;\n      }\n      self.emit('error', new Error(errMsg));\n      return;\n    }\n    self.check().then(function(results) {\n      var done = true;\n      var resultArr = _.isArray(results) ? results : [ results ];\n      for (var i=0, len=resultArr.length; i<len; i++) {\n        var result = resultArr[i];\n        if (result && !result.done) {\n          self.emit('progress', result);\n          done = false;\n        }\n      }\n      if (done) {\n        self.emit('complete', results);\n      } else {\n        setTimeout(poll, interval);\n      }\n    }, function(err) {\n      self.emit('error', err);\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * Check and wait until the async requests become in completed status\n *\n * @method Metadata~AsyncResultLocator#complete\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\n */\nAsyncResultLocator.prototype.complete = function(callback) {\n  var deferred = Promise.defer();\n  this.on('complete', function(results) {\n    deferred.resolve(results);\n  });\n  this.on('error', function(err) {\n    deferred.reject(err);\n  });\n  var meta = this._meta;\n  this.poll(meta.pollInterval, meta.pollTimeout);\n  return deferred.promise.thenCall(callback);\n};\n\n/*--------------------------------------------*/\n/**\n * The locator class to track retreive() Metadata API call result\n *\n * @protected\n * @class Metadata~RetrieveResultLocator\n * @extends Metadata~AsyncResultLocator\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()\n */\nvar RetrieveResultLocator = function(meta, result) {\n  RetrieveResultLocator.super_.call(this, meta, result);\n};\n\ninherits(RetrieveResultLocator, AsyncResultLocator);\n\n/**\n * @typedef {Object} Metadata~RetrieveResult\n * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml\n * @prop {String} id - ID of the component being retrieved\n * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call\n * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data\n */\n\n/**\n * Check and wait until the async request becomes in completed status,\n * and retrieve the result data.\n *\n * @memthod Metadata~RetrieveResultLocator#complete\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~RetrieveResult>}\n */\nRetrieveResultLocator.prototype.complete = function(callback) {\n  var meta = this._meta;\n  return RetrieveResultLocator.super_.prototype.complete.call(this).then(function(result) {\n    return meta.checkRetrieveStatus(result.id);\n  }).thenCall(callback);\n};\n\n/**\n * Change the retrieved result to Node.js readable stream\n *\n * @method Metadata~RetrieveResultLocator#stream\n * @returns {stream.Readable}\n */\nRetrieveResultLocator.prototype.stream = function() {\n  var self = this;\n  var resultStream = new stream.Readable();\n  var reading = false;\n  resultStream._read = function() {\n    if (reading) { return; }\n    reading = true;\n    self.complete(function(err, result) {\n      if (err) {\n        resultStream.emit('error', err);\n      } else {\n        resultStream.push(new Buffer(result.zipFile, 'base64'));\n        resultStream.push(null);\n      }\n    });\n  };\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * The locator class to track deploy() Metadata API call result\n *\n * @protected\n * @class Metadata~DeployResultLocator\n * @extends Metadata~AsyncResultLocator\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call\n */\nvar DeployResultLocator = function(meta, result) {\n  DeployResultLocator.super_.call(this, meta, result);\n};\n\ninherits(DeployResultLocator, AsyncResultLocator);\n\n/**\n * @typedef {Object} Metadata~DeployResult\n * @prop {String} id - ID of the component being deployed\n * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not\n * @prop {String} completedDate - Timestamp for when the deployment process ended\n * @prop {String} createdDate - Timestamp for when the deploy() call was received\n * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call\n * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id\n * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field\n * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield\n * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings\n * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process\n * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment\n * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process\n * @prop {Number} numberComponentsTotal - The total number of components in the deployment\n * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment\n * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment\n * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment\n * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.\n * @prop {String} startDate - Timestamp for when the deployment process began\n * @prop {String} status - Indicates the current state of the deployment\n * @prop {Boolean} success - Indicates whether the deployment was successful or not\n */\n\n/**\n * Check and wait until the async request becomes in completed status,\n * and retrieve the result data.\n *\n * @method Metadata~DeployResultLocator#complete\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DeployResult>}\n */\nDeployResultLocator.prototype.complete = function(includeDetails, callback) {\n  if (_.isFunction(includeDetails)) {\n    callback = includeDetails;\n    includeDetails = false;\n  }\n  var meta = this._meta;\n  return DeployResultLocator.super_.prototype.complete.call(this).then(function(result) {\n    return meta.checkDeployStatus(result.id, includeDetails);\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.metadata = new Metadata(conn);\n});\n"]},"metadata":{},"sourceType":"script"}