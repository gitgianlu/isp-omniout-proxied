{"ast":null,"code":"/**\n * @file Manages Tooling APIs\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar jsforce = require('../core'),\n    _ = require('lodash/core'),\n    Cache = require('../cache');\n/**\n * API class for Tooling API call\n *\n * @class\n * @param {Connection} conn - Connection\n */\n\n\nvar Tooling = function (conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n  var delegates = [\"query\", \"queryMore\", \"_toRecordResult\", \"create\", \"_createSingle\", \"_createParallel\", \"_createMany\", \"insert\", \"retrieve\", \"_retrieveSingle\", \"_retrieveParallel\", \"_retrieveMany\", \"update\", \"_updateSingle\", \"_updateParallel\", \"_updateMany\", \"upsert\", \"del\", \"delete\", \"destroy\", \"_destroySingle\", \"_destroyParallel\", \"_destroyMany\", \"describe\", \"describeGlobal\", \"sobject\"];\n  delegates.forEach(function (method) {\n    this[method] = conn.constructor.prototype[method];\n  }, this);\n  this.cache = new Cache();\n  var cacheOptions = {\n    key: function (type) {\n      return type ? \"describe.\" + type : \"describe\";\n    }\n  };\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n  this.describeSObject$ = this.describe$;\n  this.describeSObject = this.describe;\n  cacheOptions = {\n    key: 'describeGlobal'\n  };\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\n  this.initialize();\n};\n/**\n * Initialize tooling API\n * @protected\n */\n\n\nTooling.prototype.initialize = function () {\n  this.sobjects = {};\n  this.cache.clear();\n  this.cache.get('describeGlobal').removeAllListeners('value');\n  this.cache.get('describeGlobal').on('value', _.bind(function (res) {\n    if (res.result) {\n      var types = _.map(res.result.sobjects, function (so) {\n        return so.name;\n      });\n\n      types.forEach(this.sobject, this);\n    }\n  }, this));\n};\n/**\n * @private\n */\n\n\nTooling.prototype._baseUrl = function () {\n  return this._conn._baseUrl() + \"/tooling\";\n};\n/**\n * @private\n */\n\n\nTooling.prototype._supports = function (feature) {\n  // should return false in order not to use compsite collection\n  if (feature === 'sobject-collection') {\n    return false;\n  }\n\n  return this._conn._supports.apply(this._conn, arguments);\n};\n/**\n * @private\n */\n\n\nTooling.prototype.request = function () {\n  return this._conn.request.apply(this._conn, arguments);\n};\n/**\n * Execute query by using SOQL\n *\n * @param {String} soql - SOQL string\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n\n/**\n * Query next record set by using query locator\n *\n * @method Tooling#query\n * @param {String} locator - Next record set locator\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n\n/**\n * Retrieve specified records\n *\n * @method Tooling#queryMore\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\n\n/**\n * Synonym of Tooling#create()\n *\n * @method Tooling#insert\n * @param {String} type - SObject Type\n * @param {Object|Array.<Object>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Create records\n *\n * @method Tooling#create\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Update records\n *\n * @method Tooling#update\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Upsert records\n *\n * @method Tooling#upsert\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#delete\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#del\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Delete records\n *\n * @method Tooling#destroy\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#describe()\n *\n * @method Tooling#describeSObject\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n/**\n * Describe SObject metadata\n *\n * @method Tooling#describe\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n/**\n * Describe global SObjects\n *\n * @method Tooling#describeGlobal\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\n * @returns {Promise.<DescribeGlobalResult>}\n */\n\n/**\n * Get SObject instance\n *\n * @method Tooling#sobject\n * @param {String} type - SObject Type\n * @returns {SObject}\n */\n\n/**\n * @typedef {Object} Tooling~ExecuteAnonymousResult\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\n * @prop {String} compileProblem - Error reason in compilation\n * @prop {Boolean} success - Flag if the code is executed successfully\n * @prop {Number} line - Line number for the error\n * @prop {Number} column - Column number for the error\n * @prop {String} exceptionMessage - Exception message\n * @prop {String} exceptionStackTrace - Exception stack trace\n */\n\n/**\n * Executes Apex code anonymously\n *\n * @param {String} body - Anonymous Apex code\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\n\n\nTooling.prototype.executeAnonymous = function (body, callback) {\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\n  return this.request(url).thenCall(callback);\n};\n/**\n * Executes Apex tests asynchronously\n *\n * @param {Array.<String>} classids - Comma separated list of class IDs\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\n\n\nTooling.prototype.runTestsAsynchronous = function (classids, callback) {\n  var url = this._baseUrl() + \"/runTestsAsynchronous/\";\n  return this._conn.requestPost(url, {\n    classids: classids.join(',')\n  }, undefined, callback);\n};\n/**\n * Executes Apex tests synchronously\n *\n * @param {Array.<String>} classnames - Comma separated list of class Names\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\n\n\nTooling.prototype.runTestsSynchronous = function (classnames, callback) {\n  var url = this._baseUrl() + \"/runTestsSynchronous/\";\n  return this._conn.requestPost(url, {\n    classnames: classnames.join(',')\n  }, undefined, callback);\n};\n/**\n * @typedef {Object} Tooling~CompletionsResult\n * @prop {Object} publicDeclarations\n */\n\n/**\n * Retrieves available code completions of the referenced type\n *\n * @param {String} [type] - completion type (default 'apex')\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~CompletionsResult>}\n */\n\n\nTooling.prototype.completions = function (type, callback) {\n  if (!_.isString(type)) {\n    callback = type;\n    type = 'apex';\n  }\n\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\n  return this.request(url).thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\n\n\njsforce.on('connection:new', function (conn) {\n  conn.tooling = new Tooling(conn);\n});\nmodule.exports = Tooling;","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/api/tooling.js"],"names":["jsforce","require","_","Cache","Tooling","conn","_conn","_logger","delegates","forEach","method","constructor","prototype","cache","cacheOptions","key","type","describe$","makeCacheable","describe","makeResponseCacheable","describeSObject$","describeSObject","describeGlobal$","describeGlobal","initialize","sobjects","clear","get","removeAllListeners","on","bind","res","result","types","map","so","name","sobject","_baseUrl","_supports","feature","apply","arguments","request","executeAnonymous","body","callback","url","encodeURIComponent","thenCall","runTestsAsynchronous","classids","requestPost","join","undefined","runTestsSynchronous","classnames","completions","isString","tooling","module","exports"],"mappings":"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","sourcesContent":["/**\n * @file Manages Tooling APIs\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar jsforce = require('../core'),\n    _     = require('lodash/core'),\n    Cache = require('../cache');\n\n/**\n * API class for Tooling API call\n *\n * @class\n * @param {Connection} conn - Connection\n */\nvar Tooling = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n  var delegates = [\n    \"query\",\n    \"queryMore\",\n    \"_toRecordResult\",\n    \"create\",\n    \"_createSingle\",\n    \"_createParallel\",\n    \"_createMany\",\n    \"insert\",\n    \"retrieve\",\n    \"_retrieveSingle\",\n    \"_retrieveParallel\",\n    \"_retrieveMany\",\n    \"update\",\n    \"_updateSingle\",\n    \"_updateParallel\",\n    \"_updateMany\",\n    \"upsert\",\n    \"del\",\n    \"delete\",\n    \"destroy\",\n    \"_destroySingle\",\n    \"_destroyParallel\",\n    \"_destroyMany\",\n    \"describe\",\n    \"describeGlobal\",\n    \"sobject\"\n  ];\n  delegates.forEach(function(method) {\n    this[method] = conn.constructor.prototype[method];\n  }, this);\n\n  this.cache = new Cache();\n\n  var cacheOptions = {\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\n  };\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n  this.describeSObject$ = this.describe$;\n  this.describeSObject = this.describe;\n\n  cacheOptions = { key: 'describeGlobal' };\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\n\n  this.initialize();\n};\n\n/**\n * Initialize tooling API\n * @protected\n */\nTooling.prototype.initialize = function() {\n  this.sobjects = {};\n  this.cache.clear();\n  this.cache.get('describeGlobal').removeAllListeners('value');\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\n    if (res.result) {\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\n      types.forEach(this.sobject, this);\n    }\n  }, this));\n};\n\n/**\n * @private\n */\nTooling.prototype._baseUrl = function() {\n  return this._conn._baseUrl() + \"/tooling\";\n};\n\n/**\n * @private\n */\nTooling.prototype._supports = function(feature) {\n  // should return false in order not to use compsite collection\n  if (feature === 'sobject-collection') {\n    return false;\n  }\n  return this._conn._supports.apply(this._conn, arguments);\n};\n\n/**\n * @private\n */\nTooling.prototype.request = function() {\n  return this._conn.request.apply(this._conn, arguments);\n};\n\n/**\n * Execute query by using SOQL\n *\n * @param {String} soql - SOQL string\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n/**\n * Query next record set by using query locator\n *\n * @method Tooling#query\n * @param {String} locator - Next record set locator\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n/**\n * Retrieve specified records\n *\n * @method Tooling#queryMore\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\n\n/**\n * Synonym of Tooling#create()\n *\n * @method Tooling#insert\n * @param {String} type - SObject Type\n * @param {Object|Array.<Object>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Create records\n *\n * @method Tooling#create\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Update records\n *\n * @method Tooling#update\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Upsert records\n *\n * @method Tooling#upsert\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#delete\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Synonym of Tooling#destroy()\n *\n * @method Tooling#del\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Delete records\n *\n * @method Tooling#destroy\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Tooling#describe()\n *\n * @method Tooling#describeSObject\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n/**\n * Describe SObject metadata\n *\n * @method Tooling#describe\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n/**\n * Describe global SObjects\n *\n * @method Tooling#describeGlobal\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\n * @returns {Promise.<DescribeGlobalResult>}\n */\n\n/**\n * Get SObject instance\n *\n * @method Tooling#sobject\n * @param {String} type - SObject Type\n * @returns {SObject}\n */\n\n/**\n * @typedef {Object} Tooling~ExecuteAnonymousResult\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\n * @prop {String} compileProblem - Error reason in compilation\n * @prop {Boolean} success - Flag if the code is executed successfully\n * @prop {Number} line - Line number for the error\n * @prop {Number} column - Column number for the error\n * @prop {String} exceptionMessage - Exception message\n * @prop {String} exceptionStackTrace - Exception stack trace\n */\n/**\n * Executes Apex code anonymously\n *\n * @param {String} body - Anonymous Apex code\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.executeAnonymous = function(body, callback) {\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\n  return this.request(url).thenCall(callback);\n};\n\n/**\n * Executes Apex tests asynchronously\n *\n * @param {Array.<String>} classids - Comma separated list of class IDs\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.runTestsAsynchronous = function(classids, callback) {\n  var url = this._baseUrl() + \"/runTestsAsynchronous/\";\n  return this._conn.requestPost(url, {classids : classids.join(',')}, undefined, callback);\n};\n\n/**\n * Executes Apex tests synchronously\n *\n * @param {Array.<String>} classnames - Comma separated list of class Names\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\n */\nTooling.prototype.runTestsSynchronous = function(classnames, callback) {\n  var url = this._baseUrl() + \"/runTestsSynchronous/\";\n  return this._conn.requestPost(url, {classnames : classnames.join(',')}, undefined, callback);\n};\n\n/**\n * @typedef {Object} Tooling~CompletionsResult\n * @prop {Object} publicDeclarations\n */\n/**\n * Retrieves available code completions of the referenced type\n *\n * @param {String} [type] - completion type (default 'apex')\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\n * @returns {Promise.<Tooling~CompletionsResult>}\n */\nTooling.prototype.completions = function(type, callback) {\n  if (!_.isString(type)) {\n    callback = type;\n    type = 'apex';\n  }\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\n  return this.request(url).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.tooling = new Tooling(conn);\n});\n\n\nmodule.exports = Tooling;\n"]},"metadata":{},"sourceType":"script"}