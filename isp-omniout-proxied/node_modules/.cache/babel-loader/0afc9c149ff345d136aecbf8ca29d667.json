{"ast":null,"code":"/**\n * @file Manages Salesforce Apex REST endpoint calls\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar jsforce = require('../core');\n/**\n * API class for Apex REST endpoint call\n *\n * @class\n * @param {Connection} conn Connection\n */\n\n\nvar Apex = function (conn) {\n  this._conn = conn;\n};\n/**\n * @private\n */\n\n\nApex.prototype._baseUrl = function () {\n  return this._conn.instanceUrl + \"/services/apexrest\";\n};\n/**\n * @private\n */\n\n\nApex.prototype._createRequestParams = function (method, path, body, options) {\n  var params = {\n    method: method,\n    url: this._baseUrl() + path\n  },\n      _headers = {};\n\n  if (options && 'object' === typeof options['headers']) {\n    _headers = options['headers'];\n  }\n\n  if (!/^(GET|DELETE)$/i.test(method)) {\n    _headers[\"Content-Type\"] = \"application/json\";\n  }\n\n  params.headers = _headers;\n\n  if (body) {\n    params.body = JSON.stringify(body);\n  }\n\n  return params;\n};\n/**\n * Call Apex REST service in GET request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} options - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nApex.prototype.get = function (path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  return this._conn.request(this._createRequestParams('GET', path, undefined, options)).thenCall(callback);\n};\n/**\n * Call Apex REST service in POST request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} options - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nApex.prototype.post = function (path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  var params = this._createRequestParams('POST', path, body, options);\n\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Call Apex REST service in PUT request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nApex.prototype.put = function (path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  var params = this._createRequestParams('PUT', path, body, options);\n\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Call Apex REST service in PATCH request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nApex.prototype.patch = function (path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  var params = this._createRequestParams('PATCH', path, body, options);\n\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Synonym of Apex#delete()\n *\n * @method Apex#del\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n/**\n * Call Apex REST service in DELETE request\n *\n * @method Apex#delete\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nApex.prototype.del = Apex.prototype[\"delete\"] = function (path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  return this._conn.request(this._createRequestParams('DELETE', path, undefined, options)).thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\n\n\njsforce.on('connection:new', function (conn) {\n  conn.apex = new Apex(conn);\n});\nmodule.exports = Apex;","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/api/apex.js"],"names":["jsforce","require","Apex","conn","_conn","prototype","_baseUrl","instanceUrl","_createRequestParams","method","path","body","options","params","url","_headers","test","headers","JSON","stringify","get","callback","undefined","request","thenCall","post","put","patch","del","on","apex","module","exports"],"mappings":"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","sourcesContent":["/**\n * @file Manages Salesforce Apex REST endpoint calls\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar jsforce = require('../core');\n\n/**\n * API class for Apex REST endpoint call\n *\n * @class\n * @param {Connection} conn Connection\n */\nvar Apex = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * @private\n */\nApex.prototype._baseUrl = function() {\n  return this._conn.instanceUrl + \"/services/apexrest\";\n};\n\n/**\n * @private\n */\nApex.prototype._createRequestParams = function(method, path, body, options) {\n  var params = {\n    method: method,\n    url: this._baseUrl() + path\n  },\n  _headers = {};\n  if(options && 'object' === typeof options['headers']){\n    _headers = options['headers'];\n  }\n  if (!/^(GET|DELETE)$/i.test(method)) {\n    _headers[\"Content-Type\"] = \"application/json\";\n  }\n  params.headers = _headers;\n  if (body) {\n    params.body = JSON.stringify(body);\n  }\n  return params;\n};\n\n/**\n * Call Apex REST service in GET request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} options - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.get = function(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  return this._conn.request(this._createRequestParams('GET', path, undefined, options)).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in POST request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} options - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.post = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('POST', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in PUT request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.put = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('PUT', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in PATCH request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.patch = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('PATCH', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Synonym of Apex#delete()\n *\n * @method Apex#del\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n/**\n * Call Apex REST service in DELETE request\n *\n * @method Apex#delete\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.del =\n  Apex.prototype[\"delete\"] = function(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  return this._conn.request(this._createRequestParams('DELETE', path, undefined, options)).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.apex = new Apex(conn);\n});\n\n\nmodule.exports = Apex;\n"]},"metadata":{},"sourceType":"script"}