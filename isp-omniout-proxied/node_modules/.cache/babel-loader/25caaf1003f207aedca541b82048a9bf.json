{"ast":null,"code":"/**\n * @file Process class to manage/run workflow rule and approval process\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar _ = require('lodash/core'),\n    Promise = require('./promise'),\n    Conneciton = require('./connection');\n/**\n * A class which manages process rules and approval processes\n *\n * @class\n * @param {Connection} conn - Connection object\n */\n\n\nvar Process = module.exports = function (conn) {\n  /**\n   * Object which mangages process rules\n   * @member {Process~ProcessRule} Process#rule\n   */\n  this.rule = new ProcessRule(conn);\n  /**\n   * Object which mangages approval process\n   * @member {Process~ApprovalProcess} Process#approval\n   */\n\n  this.approval = new ApprovalProcess(conn);\n};\n/**\n * A class which manages process (workflow) rules\n *\n * @class Process~ProcessRule\n * @param {Connection} conn - Connection object\n */\n\n\nvar ProcessRule = function (conn) {\n  this._conn = conn;\n};\n/**\n * @typedef {Object} Process~ProcessRuleDefinition\n * @prop {String} id - Id of approval process definition\n * @prop {String} name - Name of process rule definition\n * @prop {String} object - SObject name which process rule is defined\n */\n\n/**\n * Get all process rule definitions registered to sobjects\n *\n * @method Process~ProcessRule#list\n * @param {Callback.<Map.<String, Array.<Process~ProcessRuleDefinition>>>} [callback] - Callback function\n * @returns {Promise.<Map.<String, Array.<Process~ProcessRuleDefinition>>>}\n */\n\n\nProcessRule.prototype.list = function (callback) {\n  return this._conn.request(\"/process/rules\").then(function (res) {\n    return res.rules;\n  }).thenCall(callback);\n};\n/**\n * @typedef {Object} Process~ProcessRuleTriggerResult\n * @prop {Boolean} success - Is process rule trigger succeeded or not\n * @prop {Array.<Object>} errors - Array of errors returned if the request failed\n */\n\n/**\n * Trigger process rule for given entities\n *\n * @method Process~ProcessRule#trigger\n * @param {String|Array.<String>} contextIds - Entity ID(s) to trigger workflow process\n * @param {Callback.<Process~ProcessRuleTriggerResult>} [callback] - Callback function\n * @returns {Promise.<Process~ProcessRuleTriggerResult>}\n */\n\n\nProcessRule.prototype.trigger = function (contextIds, callback) {\n  contextIds = _.isArray(contextIds) ? contextIds : [contextIds];\n  return this._conn.request({\n    method: \"POST\",\n    url: \"/process/rules/\",\n    body: JSON.stringify({\n      contextIds: contextIds\n    }),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }).thenCall(callback);\n};\n/**\n * A class which manages approval processes\n *\n * @class Process~ApprovalProcess\n * @param {Connection} conn - Connection object\n */\n\n\nvar ApprovalProcess = function (conn) {\n  this._conn = conn;\n};\n/**\n * @typedef {Object} Process~ApprovalProcessDefinition\n * @prop {String} id - Id of approval process definition\n * @prop {String} name - Name of approval process definition\n * @prop {String} object - SObject name which approval process is defined\n * @prop {Number} sortOrder - Processing order of approval in SObject\n */\n\n/**\n * Get all approval process definitions registered to sobjects\n *\n * @method Process~ApprovalProcess#list\n * @param {Callback.<Map.<String, Array.<ApprovalProcessDefinition>>>} [callback] - Callback function\n * @returns {Promise.<Map.<String, Array.<ApprovalProcessDefinition>>>}\n */\n\n\nApprovalProcess.prototype.list = function (callback) {\n  return this._conn.request(\"/process/approvals\").then(function (res) {\n    return res.approvals;\n  }).thenCall(callback);\n};\n/**\n * @typedef {Object} Process~ApprovalProcessRequestResult\n * @prop {Boolean} success - True if processing or approval completed successfully\n * @prop {Array.<Object>} errors - The set of errors returned if the request failed\n * @prop {Array.<String>} actorIds - IDs of the users who are currently assigned to this approval step\n * @prop {String} entityId - Object being processed\n * @prop {String} instanceId - ID of the ProcessInstance associated with the object submitted for processing\n * @prop {String} instanceStatus - Status of the current process instance (not an individual object but the entire process instance)\n * @prop {Array.<String>} newWorkItemIds - Case-insensitive IDs that point to ProcessInstanceWorkitem items (the set of pending approval requests)\n */\n\n/**\n * Send bulk requests for approval process\n *\n * @method Process~ApprovalProcess#request\n * @param {Array.<ApprovalProcessRequest>} requests - Array of approval process request to send\n * @param {Callback.<Array.<ApprovalProcessRequestResult>>} - Callback function\n * @param {Promise.<Array.<ApprovalProcessRequestResult>>}\n */\n\n\nApprovalProcess.prototype.request = function (requests, callback) {\n  requests = requests.map(function (req) {\n    return req._request ? req._request : req;\n  });\n  return this._conn.request({\n    method: 'POST',\n    url: '/process/approvals',\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      requests: requests\n    })\n  }).thenCall(callback);\n};\n/**\n * Create approval process request\n *\n * @private\n */\n\n\nApprovalProcess.prototype._createRequest = function (actionType, contextId, comments, options, callback) {\n  if (typeof comments === \"function\") {\n    callback = comments;\n    options = null;\n    comments = null;\n  }\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n  var request = {\n    actionType: actionType,\n    contextId: contextId,\n    comments: comments\n  };\n\n  _.extend(request, options);\n\n  return new ApprovalProcessRequest(this, request).thenCall(callback);\n};\n/**\n * Submit approval request for an item\n *\n * @method Process~ApprovalProcess#submit\n * @param {String} contextId - ID of the item that is being acted upon\n * @param {String} [comments] - Comment to add to the history step associated with this request\n * @param {Object} [options] - Request parameters\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\n * @returns {ApprovalProcessRequest}\n */\n\n\nApprovalProcess.prototype.submit = function (contextId, comments, options, callback) {\n  return this._createRequest(\"Submit\", contextId, comments, options, callback);\n};\n/**\n * Approve approval request for an item\n *\n * @method Process~ApprovalProcess#approve\n * @param {String} workitemId - ID of the item that is being acted upon\n * @param {String} [comments] - Comment to add to the history step associated with this request\n * @param {Object} [options] - Request parameters\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\n * @returns {ApprovalProcessRequest}\n */\n\n\nApprovalProcess.prototype.approve = function (workitemId, comments, options, callback) {\n  return this._createRequest(\"Approve\", workitemId, comments, options, callback);\n};\n/**\n * Reject approval request for an item\n *\n * @method Process~ApprovalProcess#reject\n * @param {String} workitemId - ID of the item that is being acted upon\n * @param {String} [comments] - Comment to add to the history step associated with this request\n * @param {Object} [options] - Request parameters\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\n * @returns {ApprovalProcessRequest}\n */\n\n\nApprovalProcess.prototype.reject = function (workitemId, comments, options, callback) {\n  return this._createRequest(\"Reject\", workitemId, comments, options, callback);\n};\n/**\n * A class representing approval process request\n *\n * @protected\n * @class Process~ApprovalProcessRequest\n * @implements {Promise.<Process~ApprovalProcessRequestResult>}\n * @param {Process~ApprovalProcess} process - ApprovalProcess\n * @param {Object} request - Request parameters\n * @param {String} request.actionType - Represents the kind of action to take: Submit, Approve, or Reject\n * @param {String} request.contextId - ID of the item that is being acted upon\n * @param {String} request.comments - Comment to add to the history step associated with this request\n * @param {Array.<String>} [request.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\n * @param {String} [request.processDefinitionNameOrId] - Developer name or ID of the process definition\n * @param {Boolean} [request.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\n */\n\n\nvar ApprovalProcessRequest = function (process, request) {\n  this._process = process;\n  this._request = request;\n};\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * @method Process~ApprovalProcessRequest#then\n */\n\n\nApprovalProcessRequest.prototype.then = function (onResolve, onReject) {\n  if (!this._promise) {\n    this._promise = this._process.request([this]).then(function (rets) {\n      return rets[0];\n    });\n  }\n\n  this._promise.then(onResolve, onReject);\n};\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Process~ApprovalProcessRequest#thenCall\n */\n\n\nApprovalProcessRequest.prototype.thenCall = function (callback) {\n  return callback ? this.then(function (res) {\n    callback(null, res);\n  }, function (err) {\n    callback(err);\n  }) : this;\n};","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/process.js"],"names":["_","require","Promise","Conneciton","Process","module","exports","conn","rule","ProcessRule","approval","ApprovalProcess","_conn","prototype","list","callback","request","then","res","rules","thenCall","trigger","contextIds","isArray","method","url","body","JSON","stringify","headers","approvals","requests","map","req","_request","_createRequest","actionType","contextId","comments","options","extend","ApprovalProcessRequest","submit","approve","workitemId","reject","process","_process","onResolve","onReject","_promise","rets","err"],"mappings":"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","sourcesContent":["/**\n * @file Process class to manage/run workflow rule and approval process\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar _ = require('lodash/core'),\n    Promise = require('./promise'),\n    Conneciton = require('./connection');\n\n/**\n * A class which manages process rules and approval processes\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Process = module.exports = function(conn) {\n  /**\n   * Object which mangages process rules\n   * @member {Process~ProcessRule} Process#rule\n   */\n  this.rule = new ProcessRule(conn);\n  /**\n   * Object which mangages approval process\n   * @member {Process~ApprovalProcess} Process#approval\n   */\n  this.approval = new ApprovalProcess(conn);\n};\n\n/**\n * A class which manages process (workflow) rules\n *\n * @class Process~ProcessRule\n * @param {Connection} conn - Connection object\n */\nvar ProcessRule = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * @typedef {Object} Process~ProcessRuleDefinition\n * @prop {String} id - Id of approval process definition\n * @prop {String} name - Name of process rule definition\n * @prop {String} object - SObject name which process rule is defined\n */\n\n/**\n * Get all process rule definitions registered to sobjects\n *\n * @method Process~ProcessRule#list\n * @param {Callback.<Map.<String, Array.<Process~ProcessRuleDefinition>>>} [callback] - Callback function\n * @returns {Promise.<Map.<String, Array.<Process~ProcessRuleDefinition>>>}\n */\nProcessRule.prototype.list = function(callback) {\n  return this._conn.request(\"/process/rules\").then(function(res) {\n    return res.rules;\n  }).thenCall(callback);\n};\n\n\n/**\n * @typedef {Object} Process~ProcessRuleTriggerResult\n * @prop {Boolean} success - Is process rule trigger succeeded or not\n * @prop {Array.<Object>} errors - Array of errors returned if the request failed\n */\n\n/**\n * Trigger process rule for given entities\n *\n * @method Process~ProcessRule#trigger\n * @param {String|Array.<String>} contextIds - Entity ID(s) to trigger workflow process\n * @param {Callback.<Process~ProcessRuleTriggerResult>} [callback] - Callback function\n * @returns {Promise.<Process~ProcessRuleTriggerResult>}\n */\nProcessRule.prototype.trigger = function(contextIds, callback) {\n  contextIds = _.isArray(contextIds) ? contextIds : [ contextIds ];\n  return this._conn.request({\n    method: \"POST\",\n    url: \"/process/rules/\",\n    body: JSON.stringify({\n      contextIds: contextIds\n    }),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }).thenCall(callback);\n};\n\n/**\n * A class which manages approval processes\n *\n * @class Process~ApprovalProcess\n * @param {Connection} conn - Connection object\n */\nvar ApprovalProcess = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * @typedef {Object} Process~ApprovalProcessDefinition\n * @prop {String} id - Id of approval process definition\n * @prop {String} name - Name of approval process definition\n * @prop {String} object - SObject name which approval process is defined\n * @prop {Number} sortOrder - Processing order of approval in SObject\n */\n/**\n * Get all approval process definitions registered to sobjects\n *\n * @method Process~ApprovalProcess#list\n * @param {Callback.<Map.<String, Array.<ApprovalProcessDefinition>>>} [callback] - Callback function\n * @returns {Promise.<Map.<String, Array.<ApprovalProcessDefinition>>>}\n */\nApprovalProcess.prototype.list = function(callback) {\n  return this._conn.request(\"/process/approvals\").then(function(res) {\n    return res.approvals;\n  }).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Process~ApprovalProcessRequestResult\n * @prop {Boolean} success - True if processing or approval completed successfully\n * @prop {Array.<Object>} errors - The set of errors returned if the request failed\n * @prop {Array.<String>} actorIds - IDs of the users who are currently assigned to this approval step\n * @prop {String} entityId - Object being processed\n * @prop {String} instanceId - ID of the ProcessInstance associated with the object submitted for processing\n * @prop {String} instanceStatus - Status of the current process instance (not an individual object but the entire process instance)\n * @prop {Array.<String>} newWorkItemIds - Case-insensitive IDs that point to ProcessInstanceWorkitem items (the set of pending approval requests)\n */\n\n/**\n * Send bulk requests for approval process\n *\n * @method Process~ApprovalProcess#request\n * @param {Array.<ApprovalProcessRequest>} requests - Array of approval process request to send\n * @param {Callback.<Array.<ApprovalProcessRequestResult>>} - Callback function\n * @param {Promise.<Array.<ApprovalProcessRequestResult>>}\n */\nApprovalProcess.prototype.request = function(requests, callback) {\n  requests = requests.map(function(req) {\n    return req._request ? req._request : req;\n  });\n  return this._conn.request({\n    method: 'POST',\n    url: '/process/approvals',\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({ requests: requests })\n  }).thenCall(callback);\n};\n\n/**\n * Create approval process request\n *\n * @private\n */\nApprovalProcess.prototype._createRequest = function(actionType, contextId, comments, options, callback) {\n  if (typeof comments === \"function\") {\n    callback = comments;\n    options = null;\n    comments = null;\n  }\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  options = options || {};\n  var request = {\n    actionType: actionType,\n    contextId: contextId,\n    comments: comments\n  };\n  _.extend(request, options);\n  return new ApprovalProcessRequest(this, request).thenCall(callback);\n};\n\n/**\n * Submit approval request for an item\n *\n * @method Process~ApprovalProcess#submit\n * @param {String} contextId - ID of the item that is being acted upon\n * @param {String} [comments] - Comment to add to the history step associated with this request\n * @param {Object} [options] - Request parameters\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\n * @returns {ApprovalProcessRequest}\n */\nApprovalProcess.prototype.submit = function(contextId, comments, options, callback) {\n  return this._createRequest(\"Submit\", contextId, comments, options, callback);\n};\n\n/**\n * Approve approval request for an item\n *\n * @method Process~ApprovalProcess#approve\n * @param {String} workitemId - ID of the item that is being acted upon\n * @param {String} [comments] - Comment to add to the history step associated with this request\n * @param {Object} [options] - Request parameters\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\n * @returns {ApprovalProcessRequest}\n */\nApprovalProcess.prototype.approve = function(workitemId, comments, options, callback) {\n  return this._createRequest(\"Approve\", workitemId, comments, options, callback);\n};\n\n/**\n * Reject approval request for an item\n *\n * @method Process~ApprovalProcess#reject\n * @param {String} workitemId - ID of the item that is being acted upon\n * @param {String} [comments] - Comment to add to the history step associated with this request\n * @param {Object} [options] - Request parameters\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\n * @returns {ApprovalProcessRequest}\n */\nApprovalProcess.prototype.reject = function(workitemId, comments, options, callback) {\n  return this._createRequest(\"Reject\", workitemId, comments, options, callback);\n};\n\n/**\n * A class representing approval process request\n *\n * @protected\n * @class Process~ApprovalProcessRequest\n * @implements {Promise.<Process~ApprovalProcessRequestResult>}\n * @param {Process~ApprovalProcess} process - ApprovalProcess\n * @param {Object} request - Request parameters\n * @param {String} request.actionType - Represents the kind of action to take: Submit, Approve, or Reject\n * @param {String} request.contextId - ID of the item that is being acted upon\n * @param {String} request.comments - Comment to add to the history step associated with this request\n * @param {Array.<String>} [request.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\n * @param {String} [request.processDefinitionNameOrId] - Developer name or ID of the process definition\n * @param {Boolean} [request.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\n */\nvar ApprovalProcessRequest = function(process, request) {\n  this._process = process;\n  this._request = request;\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * @method Process~ApprovalProcessRequest#then\n */\nApprovalProcessRequest.prototype.then = function(onResolve, onReject) {\n  if (!this._promise) {\n    this._promise = this._process.request([ this ]).then(function(rets) {\n      return rets[0];\n    });\n  }\n  this._promise.then(onResolve, onReject);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Process~ApprovalProcessRequest#thenCall\n */\nApprovalProcessRequest.prototype.thenCall = function(callback) {\n  return callback ? this.then(function(res) {\n    callback(null, res);\n  }, function(err) {\n    callback(err);\n  }) :\n  this;\n};\n"]},"metadata":{},"sourceType":"script"}