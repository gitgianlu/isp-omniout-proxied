{"ast":null,"code":"/**\n * Faye Client extensions: https://faye.jcoglan.com/browser/extensions.html\n *\n * For use with Streaming.prototype.createClient()\n**/\nvar StreamingExtension = {};\n/**\n * Constructor for an auth failure detector extension\n *\n * Based on new feature released with Salesforce Spring '18:\n * https://releasenotes.docs.salesforce.com/en-us/spring18/release-notes/rn_messaging_cometd_auth_validation.htm?edition=&impact=\n *\n * Example triggering error message:\n *\n * ```\n * {\n *   \"ext\":{\n *     \"sfdc\":{\"failureReason\":\"401::Authentication invalid\"},\n *     \"replay\":true},\n *   \"advice\":{\"reconnect\":\"none\"},\n *   \"channel\":\"/meta/handshake\",\n *   \"error\":\"403::Handshake denied\",\n *   \"successful\":false\n * }\n * ```\n *\n * Example usage:\n *\n * ```javascript\n * const conn = new jsforce.Connection({ … });\n * \n * const channel = \"/event/My_Event__e\";\n * \n * // Exit the Node process when auth fails\n * const exitCallback = () => process.exit(1);\n * const authFailureExt = new jsforce.StreamingExtension.AuthFailure(exitCallback);\n * \n * const fayeClient = conn.streaming.createClient([ authFailureExt ]);\n * \n * const subscription = fayeClient.subscribe(channel, data => {\n *   console.log('topic received data', data);\n * });\n * \n * subscription.cancel();\n * ```\n *\n * @param {Function} failureCallback - Invoked when authentication becomes invalid\n */\n\nStreamingExtension.AuthFailure = function (failureCallback) {\n  this.incoming = function (message, callback) {\n    if ((message.channel === '/meta/connect' || message.channel === '/meta/handshake') && message.advice && message.advice.reconnect == 'none') {\n      failureCallback(message);\n    } else {\n      callback(message);\n    }\n  };\n};\n/**\n * Constructor for a durable streaming replay extension\n *\n * Modified from original Salesforce demo source code:\n * https://github.com/developerforce/SalesforceDurableStreamingDemo/blob/3d4a56eac956f744ad6c22e6a8141b6feb57abb9/staticresources/cometdReplayExtension.resource\n * \n * Example usage:\n *\n * ```javascript\n * const conn = new jsforce.Connection({ … });\n * \n * const channel = \"/event/My_Event__e\";\n * const replayId = -2; // -2 is all retained events\n * \n * const replayExt = new jsforce.StreamingExtension.Replay(channel, replayId);\n * \n * const fayeClient = conn.streaming.createClient([ replayExt ]);\n * \n * const subscription = fayeClient.subscribe(channel, data => {\n *   console.log('topic received data', data);\n * });\n * \n * subscription.cancel();\n * ```\n */\n\n\nStreamingExtension.Replay = function (channel, replayId) {\n  var REPLAY_FROM_KEY = \"replay\";\n\n  var _extensionEnabled = replayId != null ? true : false;\n\n  var _replay = replayId;\n  var _channel = channel;\n\n  this.setExtensionEnabled = function (extensionEnabled) {\n    _extensionEnabled = extensionEnabled;\n  };\n\n  this.setReplay = function (replay) {\n    _replay = parseInt(replay, 10);\n  };\n\n  this.setChannel = function (channel) {\n    _channel = channel;\n  };\n\n  this.incoming = function (message, callback) {\n    if (message.channel === '/meta/handshake') {\n      if (message.ext && message.ext[REPLAY_FROM_KEY] == true) {\n        _extensionEnabled = true;\n      }\n    } else if (message.channel === _channel && message.data && message.data.event && message.data.event.replayId) {\n      _replay = message.data.event.replayId;\n    }\n\n    callback(message);\n  };\n\n  this.outgoing = function (message, callback) {\n    if (message.channel === '/meta/subscribe' && message.subscription === _channel) {\n      if (_extensionEnabled) {\n        if (!message.ext) {\n          message.ext = {};\n        }\n\n        var replayFromMap = {};\n        replayFromMap[_channel] = _replay; // add \"ext : { \"replay\" : { CHANNEL : REPLAY_VALUE }}\" to subscribe message\n\n        message.ext[REPLAY_FROM_KEY] = replayFromMap;\n      }\n    }\n\n    callback(message);\n  };\n};\n\nmodule.exports = StreamingExtension;","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/api/streaming-extension.js"],"names":["StreamingExtension","AuthFailure","failureCallback","incoming","message","callback","channel","advice","reconnect","Replay","replayId","REPLAY_FROM_KEY","_extensionEnabled","_replay","_channel","setExtensionEnabled","extensionEnabled","setReplay","replay","parseInt","setChannel","ext","data","event","outgoing","subscription","replayFromMap","module","exports"],"mappings":"AAAA;;;;;AAKA,IAAIA,kBAAkB,GAAG,EAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CAA,kBAAkB,CAACC,WAAnB,GAAiC,UAASC,eAAT,EAA0B;AACzD,OAAKC,QAAL,GAAgB,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAC1C,QACE,CAACD,OAAO,CAACE,OAAR,KAAoB,eAApB,IACCF,OAAO,CAACE,OAAR,KAAoB,iBADtB,KAEGF,OAAO,CAACG,MAFX,IAGGH,OAAO,CAACG,MAAR,CAAeC,SAAf,IAA4B,MAJjC,EAKE;AACAN,MAAAA,eAAe,CAACE,OAAD,CAAf;AACD,KAPD,MAOO;AACLC,MAAAA,QAAQ,CAACD,OAAD,CAAR;AACD;AACF,GAXD;AAYD,CAbD;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAJ,kBAAkB,CAACS,MAAnB,GAA4B,UAASH,OAAT,EAAkBI,QAAlB,EAA4B;AACtD,MAAIC,eAAe,GAAG,QAAtB;;AAEA,MAAIC,iBAAiB,GAAGF,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0B,KAAlD;;AACA,MAAIG,OAAO,GAAGH,QAAd;AACA,MAAII,QAAQ,GAAGR,OAAf;;AAEA,OAAKS,mBAAL,GAA2B,UAASC,gBAAT,EAA2B;AACpDJ,IAAAA,iBAAiB,GAAGI,gBAApB;AACD,GAFD;;AAIA,OAAKC,SAAL,GAAiB,UAAUC,MAAV,EAAkB;AACjCL,IAAAA,OAAO,GAAGM,QAAQ,CAACD,MAAD,EAAS,EAAT,CAAlB;AACD,GAFD;;AAIA,OAAKE,UAAL,GAAkB,UAASd,OAAT,EAAkB;AAClCQ,IAAAA,QAAQ,GAAGR,OAAX;AACD,GAFD;;AAIA,OAAKH,QAAL,GAAgB,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAC1C,QAAID,OAAO,CAACE,OAAR,KAAoB,iBAAxB,EAA2C;AACzC,UAAIF,OAAO,CAACiB,GAAR,IAAejB,OAAO,CAACiB,GAAR,CAAYV,eAAZ,KAAgC,IAAnD,EAAyD;AACvDC,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,KAJD,MAIO,IAAIR,OAAO,CAACE,OAAR,KAAoBQ,QAApB,IAAgCV,OAAO,CAACkB,IAAxC,IAAgDlB,OAAO,CAACkB,IAAR,CAAaC,KAA7D,IAAsEnB,OAAO,CAACkB,IAAR,CAAaC,KAAb,CAAmBb,QAA7F,EAAuG;AAC5GG,MAAAA,OAAO,GAAGT,OAAO,CAACkB,IAAR,CAAaC,KAAb,CAAmBb,QAA7B;AACD;;AACDL,IAAAA,QAAQ,CAACD,OAAD,CAAR;AACD,GATD;;AAWA,OAAKoB,QAAL,GAAgB,UAASpB,OAAT,EAAkBC,QAAlB,EAA4B;AAC1C,QAAID,OAAO,CAACE,OAAR,KAAoB,iBAApB,IAAyCF,OAAO,CAACqB,YAAR,KAAyBX,QAAtE,EAAgF;AAC9E,UAAIF,iBAAJ,EAAuB;AACrB,YAAI,CAACR,OAAO,CAACiB,GAAb,EAAkB;AAAEjB,UAAAA,OAAO,CAACiB,GAAR,GAAc,EAAd;AAAmB;;AAEvC,YAAIK,aAAa,GAAG,EAApB;AACAA,QAAAA,aAAa,CAACZ,QAAD,CAAb,GAA0BD,OAA1B,CAJqB,CAMrB;;AACAT,QAAAA,OAAO,CAACiB,GAAR,CAAYV,eAAZ,IAA+Be,aAA/B;AACD;AACF;;AACDrB,IAAAA,QAAQ,CAACD,OAAD,CAAR;AACD,GAbD;AAcD,CA5CD;;AA8CAuB,MAAM,CAACC,OAAP,GAAiB5B,kBAAjB","sourcesContent":["/**\n * Faye Client extensions: https://faye.jcoglan.com/browser/extensions.html\n *\n * For use with Streaming.prototype.createClient()\n**/\nvar StreamingExtension = {};\n\n/**\n * Constructor for an auth failure detector extension\n *\n * Based on new feature released with Salesforce Spring '18:\n * https://releasenotes.docs.salesforce.com/en-us/spring18/release-notes/rn_messaging_cometd_auth_validation.htm?edition=&impact=\n *\n * Example triggering error message:\n *\n * ```\n * {\n *   \"ext\":{\n *     \"sfdc\":{\"failureReason\":\"401::Authentication invalid\"},\n *     \"replay\":true},\n *   \"advice\":{\"reconnect\":\"none\"},\n *   \"channel\":\"/meta/handshake\",\n *   \"error\":\"403::Handshake denied\",\n *   \"successful\":false\n * }\n * ```\n *\n * Example usage:\n *\n * ```javascript\n * const conn = new jsforce.Connection({ … });\n * \n * const channel = \"/event/My_Event__e\";\n * \n * // Exit the Node process when auth fails\n * const exitCallback = () => process.exit(1);\n * const authFailureExt = new jsforce.StreamingExtension.AuthFailure(exitCallback);\n * \n * const fayeClient = conn.streaming.createClient([ authFailureExt ]);\n * \n * const subscription = fayeClient.subscribe(channel, data => {\n *   console.log('topic received data', data);\n * });\n * \n * subscription.cancel();\n * ```\n *\n * @param {Function} failureCallback - Invoked when authentication becomes invalid\n */\nStreamingExtension.AuthFailure = function(failureCallback) {\n  this.incoming = function(message, callback) {\n    if (\n      (message.channel === '/meta/connect' ||\n        message.channel === '/meta/handshake')\n      && message.advice\n      && message.advice.reconnect == 'none'\n    ) {\n      failureCallback(message);\n    } else {\n      callback(message);\n    }\n  }\n};\n\n/**\n * Constructor for a durable streaming replay extension\n *\n * Modified from original Salesforce demo source code:\n * https://github.com/developerforce/SalesforceDurableStreamingDemo/blob/3d4a56eac956f744ad6c22e6a8141b6feb57abb9/staticresources/cometdReplayExtension.resource\n * \n * Example usage:\n *\n * ```javascript\n * const conn = new jsforce.Connection({ … });\n * \n * const channel = \"/event/My_Event__e\";\n * const replayId = -2; // -2 is all retained events\n * \n * const replayExt = new jsforce.StreamingExtension.Replay(channel, replayId);\n * \n * const fayeClient = conn.streaming.createClient([ replayExt ]);\n * \n * const subscription = fayeClient.subscribe(channel, data => {\n *   console.log('topic received data', data);\n * });\n * \n * subscription.cancel();\n * ```\n */\nStreamingExtension.Replay = function(channel, replayId) {\n  var REPLAY_FROM_KEY = \"replay\";\n  \n  var _extensionEnabled = replayId != null ? true : false;\n  var _replay = replayId;\n  var _channel = channel;\n\n  this.setExtensionEnabled = function(extensionEnabled) {\n    _extensionEnabled = extensionEnabled;\n  }\n\n  this.setReplay = function (replay) {\n    _replay = parseInt(replay, 10);\n  }\n\n  this.setChannel = function(channel) {\n    _channel = channel;\n  }\n\n  this.incoming = function(message, callback) {\n    if (message.channel === '/meta/handshake') {\n      if (message.ext && message.ext[REPLAY_FROM_KEY] == true) {\n        _extensionEnabled = true;\n      }\n    } else if (message.channel === _channel && message.data && message.data.event && message.data.event.replayId) {\n      _replay = message.data.event.replayId;\n    }\n    callback(message);\n  }\n  \n  this.outgoing = function(message, callback) {\n    if (message.channel === '/meta/subscribe' && message.subscription === _channel) {\n      if (_extensionEnabled) {\n        if (!message.ext) { message.ext = {}; }\n\n        var replayFromMap = {};\n        replayFromMap[_channel] = _replay;\n\n        // add \"ext : { \"replay\" : { CHANNEL : REPLAY_VALUE }}\" to subscribe message\n        message.ext[REPLAY_FROM_KEY] = replayFromMap;\n      }\n    }\n    callback(message);\n  };\n};\n\nmodule.exports = StreamingExtension;\n"]},"metadata":{},"sourceType":"script"}