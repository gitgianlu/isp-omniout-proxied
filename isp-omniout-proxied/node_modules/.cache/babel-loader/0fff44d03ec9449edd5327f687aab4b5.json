{"ast":null,"code":"/**\n * @file Manages Salesforce Analytics API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar _ = require('lodash/core'),\n    jsforce = require('../core'),\n    Promise = require('../promise');\n/**\n * Report instance to retrieving asynchronously executed result\n *\n * @protected\n * @class Analytics~ReportInstance\n * @param {Analytics~Report} report - Report\n * @param {String} id - Report instance id\n */\n\n\nvar ReportInstance = function (report, id) {\n  this._report = report;\n  this._conn = report._conn;\n  this.id = id;\n};\n/**\n * Retrieve report result asynchronously executed\n *\n * @method Analytics~ReportInstance#retrieve\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\n\n\nReportInstance.prototype.retrieve = function (callback) {\n  var conn = this._conn,\n      report = this._report;\n  var url = [conn._baseUrl(), \"analytics\", \"reports\", report.id, \"instances\", this.id].join('/');\n  return conn.request(url).thenCall(callback);\n};\n/**\n * Report object in Analytics API\n *\n * @protected\n * @class Analytics~Report\n * @param {Connection} conn Connection\n */\n\n\nvar Report = function (conn, id) {\n  this._conn = conn;\n  this.id = id;\n};\n/**\n * Describe report metadata\n *\n * @method Analytics~Report#describe\n * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportMetadata>}\n */\n\n\nReport.prototype.describe = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"describe\"].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n/**\n * Synonym of Analytics~Report#destroy()\n *\n * @method Analytics~Report#delete\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\n\n/**\n * Synonym of Analytics~Report#destroy()\n *\n * @method Analytics~Report#del\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\n\n/**\n * Destroy a report\n *\n * @method Analytics~Report#destroy\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\n\n\nReport.prototype[\"delete\"] = Report.prototype.del = Report.prototype.destroy = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"reports\", this.id].join('/');\n  return this._conn.request({\n    method: 'DELETE',\n    url: url\n  }).thenCall(callback);\n};\n/**\n * Clones a given report\n *\n * @method Analytics~Report#clone\n * @param {String} name - The name of the new report\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\n\n\nReport.prototype.clone = function (name, callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"reports\"].join('/');\n  url += \"?cloneId=\" + this.id;\n  var data = {\n    reportMetadata: {\n      name: name\n    }\n  };\n  var params = {\n    method: 'POST',\n    url: url,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  };\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Explain plan for executing report\n *\n * @method Analytics~Report#explain\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\n * @returns {Promise.<ExplainInfo>}\n */\n\n\nReport.prototype.explain = function (callback) {\n  var url = \"/query/?explain=\" + this.id;\n  return this._conn.request(url).thenCall(callback);\n};\n/**\n * Run report synchronously\n *\n * @method Analytics~Report#execute\n * @param {Object} [options] - Options\n * @param {Boolean} options.details - Flag if include detail in result\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\n\n\nReport.prototype.run = Report.prototype.exec = Report.prototype.execute = function (options, callback) {\n  options = options || {};\n\n  if (_.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n\n  var url = [this._conn._baseUrl(), \"analytics\", \"reports\", this.id].join('/');\n  url += \"?includeDetails=\" + (options.details ? \"true\" : \"false\");\n  var params = {\n    method: options.metadata ? 'POST' : 'GET',\n    url: url\n  };\n\n  if (options.metadata) {\n    params.headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    params.body = JSON.stringify(options.metadata);\n  }\n\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Run report asynchronously\n *\n * @method Analytics~Report#executeAsync\n * @param {Object} [options] - Options\n * @param {Boolean} options.details - Flag if include detail in result\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\n * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportInstanceAttrs>}\n */\n\n\nReport.prototype.executeAsync = function (options, callback) {\n  options = options || {};\n\n  if (_.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n\n  var url = [this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\"].join('/');\n\n  if (options.details) {\n    url += \"?includeDetails=true\";\n  }\n\n  var params = {\n    method: 'POST',\n    url: url,\n    body: \"\"\n  };\n\n  if (options.metadata) {\n    params.headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    params.body = JSON.stringify(options.metadata);\n  }\n\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Get report instance for specified instance ID\n *\n * @method Analytics~Report#instance\n * @param {String} id - Report instance ID\n * @returns {Analytics~ReportInstance}\n */\n\n\nReport.prototype.instance = function (id) {\n  return new ReportInstance(this, id);\n};\n/**\n * List report instances which had been executed asynchronously\n *\n * @method Analytics~Report#instances\n * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function\n * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}\n */\n\n\nReport.prototype.instances = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\"].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n/**\n * Dashboard object in the Analytics API\n *\n * @protected\n * @class Analytics-Dashboard\n * @param {Connection} conn Connection\n * @param {String} id - The Id\n */\n\n\nvar Dashboard = function (conn, id) {\n  this._conn = conn;\n  this.id = id;\n};\n/**\n * Describe dashboard metadata\n *\n * @method Analytics~Dashboard#describe\n * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardMetadata>}\n */\n\n\nDashboard.prototype.describe = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id, \"describe\"].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n/**\n * Get details about dashboard components\n *\n * @method Analytics~Dashboard#components\n * @param {Callback.<Analytics-DashboardComponentMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardComponentMetadata>}\n */\n\n\nDashboard.prototype.components = function (componentIds, callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id].join('/');\n  var data = {};\n\n  if (_.isFunction(componentIds)) {\n    callback = componentIds;\n  } else if (_.isArray(componentIds)) {\n    data.componentIds = componentIds;\n  } else if (_.isString(componentIds)) {\n    data.componentIds = [componentIds];\n  }\n\n  var params = {\n    method: 'POST',\n    url: url,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  };\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Get dashboard status\n *\n * @method Analytics~Dashboard#status\n * @param {Callback.<Analytics-DashboardStatusMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardStatusMetadata>}\n */\n\n\nDashboard.prototype.status = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id, \"status\"].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n/**\n * Refresh a dashboard\n *\n * @method Analytics~Dashboard#refresh\n * @param {Callback.<Analytics-DashboardStatusUrl>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardStatusUrl>}\n */\n\n\nDashboard.prototype.refresh = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id].join('/');\n  var params = {\n    method: 'PUT',\n    url: url,\n    body: ''\n  };\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Clone a dashboard\n *\n * @method Analytics~Dashboard#clone\n * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardMetadata>}\n */\n\n\nDashboard.prototype.clone = function (name, folderid, callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"dashboards\"].join('/');\n  url += \"?cloneId=\" + this.id;\n  var data = {};\n\n  if (_.isObject(name)) {\n    data = name;\n    callback = folderid;\n  } else {\n    data.name = name;\n    data.folderId = folderid;\n  }\n\n  var params = {\n    method: 'POST',\n    url: url,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  };\n  return this._conn.request(params).thenCall(callback);\n};\n/**\n * Synonym of Analytics~Dashboard#destroy()\n *\n * @method Analytics~Dashboard#delete\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~DashboardResult>}\n */\n\n/**\n * Synonym of Analytics~Dashboard#destroy()\n *\n * @method Analytics~Dashboard#del\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~DashboardResult>}\n */\n\n/**\n * Destroy a dashboard\n *\n * @method Analytics~Dashboard#destroy\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~DashboardResult>}\n */\n\n\nDashboard.prototype[\"delete\"] = Dashboard.prototype.del = Dashboard.prototype.destroy = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id].join('/');\n  return this._conn.request({\n    method: 'DELETE',\n    url: url\n  }).thenCall(callback);\n};\n/**\n * API class for Analytics API\n *\n * @class\n * @param {Connection} conn Connection\n */\n\n\nvar Analytics = function (conn) {\n  this._conn = conn;\n};\n/**\n * Get report object of Analytics API\n *\n * @param {String} id - Report Id\n * @returns {Analytics~Report}\n */\n\n\nAnalytics.prototype.report = function (id) {\n  return new Report(this._conn, id);\n};\n/**\n * Get recent report list\n *\n * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Analytics~ReportInfo>>}\n */\n\n\nAnalytics.prototype.reports = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"reports\"].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n/**\n * Get dashboard object of Analytics API\n *\n * @param {String} id - Dashboard Id\n * @returns {Analytics~Dashboard}\n */\n\n\nAnalytics.prototype.dashboard = function (id) {\n  return new Dashboard(this._conn, id);\n};\n/**\n * Get recent dashboard list\n *\n * @param {Callback.<Array.<Analytics~DashboardInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Analytics~DashboardInfo>>}\n */\n\n\nAnalytics.prototype.dashboards = function (callback) {\n  var url = [this._conn._baseUrl(), \"analytics\", \"dashboards\"].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\n\n\njsforce.on('connection:new', function (conn) {\n  conn.analytics = new Analytics(conn);\n});\nmodule.exports = Analytics;","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/api/analytics.js"],"names":["_","require","jsforce","Promise","ReportInstance","report","id","_report","_conn","prototype","retrieve","callback","conn","url","_baseUrl","join","request","thenCall","Report","describe","del","destroy","method","clone","name","data","reportMetadata","params","headers","body","JSON","stringify","explain","run","exec","execute","options","isFunction","details","metadata","executeAsync","instance","instances","Dashboard","components","componentIds","isArray","isString","status","refresh","folderid","isObject","folderId","Analytics","reports","dashboard","dashboards","on","analytics","module","exports"],"mappings":"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","sourcesContent":["/**\n * @file Manages Salesforce Analytics API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar _ = require('lodash/core'),\n    jsforce = require('../core'),\n    Promise  = require('../promise');\n\n/**\n * Report instance to retrieving asynchronously executed result\n *\n * @protected\n * @class Analytics~ReportInstance\n * @param {Analytics~Report} report - Report\n * @param {String} id - Report instance id\n */\nvar ReportInstance = function(report, id) {\n  this._report = report;\n  this._conn = report._conn;\n  this.id = id;\n};\n\n/**\n * Retrieve report result asynchronously executed\n *\n * @method Analytics~ReportInstance#retrieve\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\nReportInstance.prototype.retrieve = function(callback) {\n  var conn = this._conn,\n      report = this._report;\n  var url = [ conn._baseUrl(), \"analytics\", \"reports\", report.id, \"instances\", this.id ].join('/');\n  return conn.request(url).thenCall(callback);\n};\n\n/**\n * Report object in Analytics API\n *\n * @protected\n * @class Analytics~Report\n * @param {Connection} conn Connection\n */\nvar Report = function(conn, id) {\n  this._conn = conn;\n  this.id = id;\n};\n\n/**\n * Describe report metadata\n *\n * @method Analytics~Report#describe\n * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportMetadata>}\n */\nReport.prototype.describe = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"describe\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\n/**\n * Synonym of Analytics~Report#destroy()\n *\n * @method Analytics~Report#delete\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\n/**\n * Synonym of Analytics~Report#destroy()\n *\n * @method Analytics~Report#del\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\n/**\n * Destroy a report\n *\n * @method Analytics~Report#destroy\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\nReport.prototype[\"delete\"] =\nReport.prototype.del =\nReport.prototype.destroy = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\n  return this._conn.request({method: 'DELETE', url: url}).thenCall(callback);\n};\n\n/**\n * Clones a given report\n *\n * @method Analytics~Report#clone\n * @param {String} name - The name of the new report\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\nReport.prototype.clone = function(name, callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\n  url += \"?cloneId=\" + this.id;\n  var data = { reportMetadata: { name: name } };\n  var params = { method : 'POST', url: url, headers: { \"Content-Type\" : \"application/json\" }, body: JSON.stringify(data)};\n\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Explain plan for executing report\n *\n * @method Analytics~Report#explain\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\n * @returns {Promise.<ExplainInfo>}\n */\nReport.prototype.explain = function(callback) {\n  var url = \"/query/?explain=\" + this.id;\n  return this._conn.request(url).thenCall(callback);\n};\n\n\n/**\n * Run report synchronously\n *\n * @method Analytics~Report#execute\n * @param {Object} [options] - Options\n * @param {Boolean} options.details - Flag if include detail in result\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportResult>}\n */\nReport.prototype.run =\nReport.prototype.exec =\nReport.prototype.execute = function(options, callback) {\n  options = options || {};\n  if (_.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\n  url += \"?includeDetails=\" + (options.details ? \"true\" : \"false\");\n  var params = { method : options.metadata ? 'POST' : 'GET', url : url };\n  if (options.metadata) {\n    params.headers = { \"Content-Type\" : \"application/json\" };\n    params.body = JSON.stringify(options.metadata);\n  }\n  return this._conn.request(params).thenCall(callback);\n};\n\n\n/**\n * Run report asynchronously\n *\n * @method Analytics~Report#executeAsync\n * @param {Object} [options] - Options\n * @param {Boolean} options.details - Flag if include detail in result\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\n * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function\n * @returns {Promise.<Analytics~ReportInstanceAttrs>}\n */\nReport.prototype.executeAsync = function(options, callback) {\n  options = options || {};\n  if (_.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\n  if (options.details) {\n    url += \"?includeDetails=true\";\n  }\n  var params = { method : 'POST', url : url, body: \"\" };\n  if (options.metadata) {\n    params.headers = { \"Content-Type\" : \"application/json\" };\n    params.body = JSON.stringify(options.metadata);\n  }\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Get report instance for specified instance ID\n *\n * @method Analytics~Report#instance\n * @param {String} id - Report instance ID\n * @returns {Analytics~ReportInstance}\n */\nReport.prototype.instance = function(id) {\n  return new ReportInstance(this, id);\n};\n\n/**\n * List report instances which had been executed asynchronously\n *\n * @method Analytics~Report#instances\n * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function\n * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}\n */\nReport.prototype.instances = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\n/**\n * Dashboard object in the Analytics API\n *\n * @protected\n * @class Analytics-Dashboard\n * @param {Connection} conn Connection\n * @param {String} id - The Id\n */\n\nvar Dashboard = function(conn, id) {\n  this._conn = conn;\n  this.id = id;\n};\n\n/**\n * Describe dashboard metadata\n *\n * @method Analytics~Dashboard#describe\n * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardMetadata>}\n */\nDashboard.prototype.describe = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id, \"describe\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\n/**\n * Get details about dashboard components\n *\n * @method Analytics~Dashboard#components\n * @param {Callback.<Analytics-DashboardComponentMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardComponentMetadata>}\n */\nDashboard.prototype.components = function(componentIds, callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id].join('/');\n  var data = {};\n  if (_.isFunction(componentIds)) {\n    callback = componentIds;\n  } else if (_.isArray(componentIds)) {\n    data.componentIds = componentIds;\n  } else if (_.isString(componentIds)) {\n    data.componentIds = [ componentIds ];\n  }\n  var params = { method : 'POST', url : url, headers : { \"Content-Type\" : \"application/json\" }, body : JSON.stringify(data)};\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Get dashboard status\n *\n * @method Analytics~Dashboard#status\n * @param {Callback.<Analytics-DashboardStatusMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardStatusMetadata>}\n */\nDashboard.prototype.status = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id, \"status\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\n/**\n * Refresh a dashboard\n *\n * @method Analytics~Dashboard#refresh\n * @param {Callback.<Analytics-DashboardStatusUrl>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardStatusUrl>}\n */\nDashboard.prototype.refresh = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id ].join('/');\n  var params = { method : 'PUT', url : url, body: '' };\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Clone a dashboard\n *\n * @method Analytics~Dashboard#clone\n * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function\n * @returns {Promise.<Analytics-DashboardMetadata>}\n */\nDashboard.prototype.clone = function(name, folderid, callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\" ].join('/');\n  url += \"?cloneId=\" + this.id;\n  var data = {};\n\n  if (_.isObject(name)) {\n    data = name;\n    callback = folderid;\n  } else {\n    data.name = name;\n    data.folderId = folderid;\n  }\n  var params = { method : 'POST', url : url, headers : { \"Content-Type\" : \"application/json\" }, body : JSON.stringify(data)};\n\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Synonym of Analytics~Dashboard#destroy()\n *\n * @method Analytics~Dashboard#delete\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~DashboardResult>}\n */\n/**\n * Synonym of Analytics~Dashboard#destroy()\n *\n * @method Analytics~Dashboard#del\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~DashboardResult>}\n */\n/**\n * Destroy a dashboard\n *\n * @method Analytics~Dashboard#destroy\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\n * @returns {Promise.<Analytics~DashboardResult>}\n */\nDashboard.prototype[\"delete\"] =\nDashboard.prototype.del =\nDashboard.prototype.destroy = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id ].join('/');\n  return this._conn.request({method: 'DELETE', url: url}).thenCall(callback);\n};\n\n/**\n * API class for Analytics API\n *\n * @class\n * @param {Connection} conn Connection\n */\nvar Analytics = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * Get report object of Analytics API\n *\n * @param {String} id - Report Id\n * @returns {Analytics~Report}\n */\nAnalytics.prototype.report = function(id) {\n  return new Report(this._conn, id);\n};\n\n/**\n * Get recent report list\n *\n * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Analytics~ReportInfo>>}\n */\nAnalytics.prototype.reports = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\n/**\n * Get dashboard object of Analytics API\n *\n * @param {String} id - Dashboard Id\n * @returns {Analytics~Dashboard}\n */\nAnalytics.prototype.dashboard = function(id) {\n  return new Dashboard(this._conn, id);\n};\n\n/**\n * Get recent dashboard list\n *\n * @param {Callback.<Array.<Analytics~DashboardInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Analytics~DashboardInfo>>}\n */\nAnalytics.prototype.dashboards = function(callback) {\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\" ].join('/');\n  return this._conn.request(url).thenCall(callback);\n};\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.analytics = new Analytics(conn);\n});\n\n\nmodule.exports = Analytics;\n"]},"metadata":{},"sourceType":"script"}