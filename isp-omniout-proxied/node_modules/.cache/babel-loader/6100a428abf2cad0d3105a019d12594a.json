{"ast":null,"code":"/**\n * @file Represents Salesforce SObject\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar _ = require('lodash/core'),\n    Record = require('./record'),\n    Query = require('./query'),\n    Cache = require('./cache'),\n    QuickAction = require('./quick-action');\n/**\n * A class for organizing all SObject access\n *\n * @constructor\n */\n\n\nvar SObject = module.exports = function (conn, type) {\n  this._conn = conn;\n  this.type = type;\n  var cacheOptions = {\n    key: \"describe.\" + this.type\n  };\n  this.describe$ = conn.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = conn.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n  cacheOptions = {\n    key: \"layouts.\" + this.type\n  };\n  this.layouts$ = conn.cache.makeCacheable(this.layouts, this, cacheOptions);\n  this.layouts = conn.cache.makeResponseCacheable(this.layouts, this, cacheOptions);\n  cacheOptions = {\n    key: \"compactLayouts.\" + this.type\n  };\n  this.compactLayouts$ = conn.cache.makeCacheable(this.compactLayouts, this, cacheOptions);\n  this.compactLayouts = conn.cache.makeResponseCacheable(this.compactLayouts, this, cacheOptions);\n  cacheOptions = {\n    key: \"approvalLayouts.\" + this.type\n  };\n  this.approvalLayouts$ = conn.cache.makeCacheable(this.approvalLayouts, this, cacheOptions);\n  this.approvalLayouts = conn.cache.makeResponseCacheable(this.approvalLayouts, this, cacheOptions);\n};\n/**\n * Synonym of SObject#create()\n *\n * @method SObject#insert\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Create records\n *\n * @method SObject#create\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n\nSObject.prototype.insert = SObject.prototype.create = function (records, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this._conn.create(this.type, records, options, callback);\n};\n/**\n * Retrieve specified records\n *\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\n\n\nSObject.prototype.retrieve = function (ids, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this._conn.retrieve(this.type, ids, options, callback);\n};\n/**\n * Update records\n *\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n\nSObject.prototype.update = function (records, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this._conn.update(this.type, records, options, callback);\n};\n/**\n * Upsert records\n *\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n\nSObject.prototype.upsert = function (records, extIdField, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this._conn.upsert(this.type, records, extIdField, options, callback);\n};\n/**\n * Synonym of SObject#destroy()\n *\n * @method SObject#delete\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of SObject#destroy()\n *\n * @method SObject#del\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Delete records\n *\n * @method SObject#destroy\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n\nSObject.prototype[\"delete\"] = SObject.prototype.del = SObject.prototype.destroy = function (ids, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this._conn.destroy(this.type, ids, options, callback);\n};\n/**\n * Describe SObject metadata\n *\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n\nSObject.prototype.describe = function (callback) {\n  return this._conn.describe(this.type, callback);\n};\n/**\n * Get record representation instance by given id\n *\n * @param {String} id - A record ID\n * @returns {RecordReference}\n */\n\n\nSObject.prototype.record = function (id) {\n  return new Record(this._conn, this.type, id);\n};\n/**\n * Find and fetch records which matches given conditions\n *\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\n * @param {Object} [options] - Query options.\n * @param {Number} [options.limit] - Maximum number of records the query will return.\n * @param {Number} [options.offset] - Offset number where begins returning results.\n * @param {Number} [options.skip] - Synonym of options.offset.\n * @param {Callback.<Array.<Record>>} [callback] - Callback function\n * @returns {Query.<Array.<Record>>}\n */\n\n\nSObject.prototype.find = function (conditions, fields, options, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    fields = null;\n    options = null;\n  } else if (typeof fields === 'function') {\n    callback = fields;\n    fields = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n  var config = {\n    fields: fields,\n    includes: options.includes,\n    table: this.type,\n    conditions: conditions,\n    limit: options.limit,\n    sort: options.sort,\n    offset: options.offset || options.skip\n  };\n  var query = new Query(this._conn, config, options);\n  query.setResponseTarget(Query.ResponseTargets.Records);\n\n  if (callback) {\n    query.run(callback);\n  }\n\n  return query;\n};\n/**\n * Fetch one record which matches given conditions\n *\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\n * @param {Object} [options] - Query options.\n * @param {Number} [options.limit] - Maximum number of records the query will return.\n * @param {Number} [options.offset] - Offset number where begins returning results.\n * @param {Number} [options.skip] - Synonym of options.offset.\n * @param {Callback.<Record>} [callback] - Callback function\n * @returns {Query.<Record>}\n */\n\n\nSObject.prototype.findOne = function (conditions, fields, options, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    fields = null;\n    options = null;\n  } else if (typeof fields === 'function') {\n    callback = fields;\n    fields = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  options = _.extend(options || {}, {\n    limit: 1\n  });\n  var query = this.find(conditions, fields, options);\n  query.setResponseTarget(Query.ResponseTargets.SingleRecord);\n\n  if (callback) {\n    query.run(callback);\n  }\n\n  return query;\n};\n/**\n * Find and fetch records only by specifying fields to fetch.\n *\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\n * @param {Callback.<Array.<Record>>} [callback] - Callback function\n * @returns {Query.<Array.<Record>>}\n */\n\n\nSObject.prototype.select = function (fields, callback) {\n  return this.find(null, fields, null, callback);\n};\n/**\n * Count num of records which matches given conditions\n *\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\n * @param {Callback.<Number>} [callback] - Callback function\n * @returns {Query.<Number>}\n */\n\n\nSObject.prototype.count = function (conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  var query = this.find(conditions, {\n    \"count()\": true\n  });\n  query.setResponseTarget(\"Count\");\n\n  if (callback) {\n    query.run(callback);\n  }\n\n  return query;\n};\n/**\n * Call Bulk#load() to execute bulkload, returning batch object\n *\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n\nSObject.prototype.bulkload = function (operation, options, input, callback) {\n  return this._conn.bulk.load(this.type, operation, options, input, callback);\n};\n/**\n * Synonym of SObject#createBulk()\n *\n * @method SObject#insertBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n/**\n * Bulkly insert input data using bulk API\n *\n * @method SObject#createBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n\nSObject.prototype.insertBulk = SObject.prototype.createBulk = function (input, callback) {\n  return this.bulkload(\"insert\", input, callback);\n};\n/**\n * Bulkly update records by input data using bulk API\n *\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk update Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n\nSObject.prototype.updateBulk = function (input, callback) {\n  return this.bulkload(\"update\", input, callback);\n};\n/**\n * Bulkly upsert records by input data using bulk API\n *\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk upsert. Accepts array of records, CSv string, and CSV data input stream.\n * @param {String} [options.extIdField] - External ID field name\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n\nSObject.prototype.upsertBulk = function (input, extIdField, callback) {\n  return this.bulkload(\"upsert\", {\n    extIdField: extIdField\n  }, input, callback);\n};\n/**\n * Synonym of SObject#destroyBulk()\n *\n * @method SObject#deleteBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n/**\n * Bulkly delete records specified by input data using bulk API\n *\n * @method SObject#destroyBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n\nSObject.prototype.deleteBulk = SObject.prototype.destroyBulk = function (input, callback) {\n  return this.bulkload(\"delete\", input, callback);\n};\n/**\n * Synonym of SObject#destroyHardBulk()\n *\n * @method SObject#deleteHardBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n/**\n * Bulkly hard delete records specified in input data using bulk API\n *\n * @method SObject#destroyHardBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n\n\nSObject.prototype.deleteHardBulk = SObject.prototype.destroyHardBulk = function (input, callback) {\n  return this.bulkload(\"hardDelete\", input, callback);\n};\n/**\n * Retrieve recently accessed records\n *\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>>}\n */\n\n\nSObject.prototype.recent = function (callback) {\n  return this._conn.recent(this.type, callback);\n};\n/**\n * Retrieve the updated records\n *\n * @param {String|Date} start - start date or string representing the start of the interval\n * @param {String|Date} end - start date or string representing the end of the interval, must be > start\n * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function\n * @returns {Promise.<UpdatedRecordsInfo>}\n */\n\n\nSObject.prototype.updated = function (start, end, callback) {\n  return this._conn.updated(this.type, start, end, callback);\n};\n/**\n * Retrieve the deleted records\n *\n * @param {String|Date} start - start date or string representing the start of the interval\n * @param {String|Date} end - start date or string representing the end of the interval, must be > start\n * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function\n * @returns {Promise.<DeletedRecordsInfo>}\n */\n\n\nSObject.prototype.deleted = function (start, end, callback) {\n  return this._conn.deleted(this.type, start, end, callback);\n};\n/**\n * @typedef {Object} LayoutInfo\n * @prop {Array.<Object>} layouts - Array of layouts\n * @prop {Array.<Object>} recordTypeMappings - Array of record type mappings\n */\n\n/**\n * Describe layout information for SObject\n *\n * @param {String} [layoutName] - Name of named layout. (e.g. UserAlt in User SObject)\n * @param {Callback.<LayoutInfo>} [callback] - Callback function\n * @returns {Promise.<LayoutInfo>}\n */\n\n\nSObject.prototype.layouts = function (layoutName, callback) {\n  if (typeof layoutName === 'function') {\n    callback = layoutName;\n    layoutName = null;\n  }\n\n  var url = \"/sobjects/\" + this.type + \"/describe/\" + (layoutName ? \"namedLayouts/\" + layoutName : \"layouts\");\n  return this._conn.request(url, callback);\n};\n/**\n * @typedef {Object} CompactLayoutInfo\n * @prop {Array.<Object>} compactLayouts - Array of compact layouts\n * @prop {String} defaultCompactLayoutId - ID of default compact layout\n * @prop {Array.<Object>} recordTypeCompactLayoutMappings - Array of record type mappings\n */\n\n/**\n * Describe compact layout information defined for SObject\n *\n * @param {Callback.<CompactLayoutInfo>} [callback] - Callback function\n * @returns {Promise.<CompactLayoutInfo>}\n */\n\n\nSObject.prototype.compactLayouts = function (callback) {\n  var url = \"/sobjects/\" + this.type + \"/describe/compactLayouts\";\n  return this._conn.request(url, callback);\n};\n/**\n * @typedef {Object} ApprovalLayoutInfo\n * @prop {Array.<Object>} approvalLayouts - Array of approval layouts\n */\n\n/**\n * Describe compact layout information defined for SObject\n *\n * @param {Callback.<ApprovalLayoutInfo>} [callback] - Callback function\n * @returns {Promise.<ApprovalLayoutInfo>}\n */\n\n\nSObject.prototype.approvalLayouts = function (callback) {\n  var url = \"/sobjects/\" + this.type + \"/describe/approvalLayouts\";\n  return this._conn.request(url, callback);\n};\n/**\n * Returns the list of list views for the SObject\n *\n * @param {Callback.<ListViewsInfo>} [callback] - Callback function\n * @returns {Promise.<ListViewsInfo>}\n */\n\n\nSObject.prototype.listviews = function (callback) {\n  var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews';\n  return this._conn.request(url, callback);\n};\n/**\n * Returns the list view info in specifed view id\n *\n * @param {String} id - List view ID\n * @returns {ListView}\n */\n\n\nSObject.prototype.listview = function (id) {\n  return new ListView(this._conn, this.type, id);\n};\n/**\n * Returns all registered quick actions for the SObject\n *\n * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}\n */\n\n\nSObject.prototype.quickActions = function (callback) {\n  return this._conn.request(\"/sobjects/\" + this.type + \"/quickActions\").thenCall(callback);\n};\n/**\n * Get reference for specified quick aciton in the SObject\n *\n * @param {String} actionName - Name of the quick action\n * @returns {QuickAction}\n */\n\n\nSObject.prototype.quickAction = function (actionName) {\n  return new QuickAction(this._conn, \"/sobjects/\" + this.type + \"/quickActions/\" + actionName);\n};\n/**\n * A class for organizing list view information\n *\n * @protected\n * @class ListView\n * @param {Connection} conn - Connection instance\n * @param {SObject} type - SObject type\n * @param {String} id - List view ID\n */\n\n\nvar ListView = function (conn, type, id) {\n  this._conn = conn;\n  this.type = type;\n  this.id = id;\n};\n/**\n * Executes query for the list view and returns the resulting data and presentation information.\n *\n * @param {Callback.<ListViewResultInfo>} [callback] - Callback function\n * @returns {Promise.<ListViewResultInfo>}\n */\n\n\nListView.prototype.results = function (callback) {\n  var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/results';\n  return this._conn.request(url, callback);\n};\n/**\n * Returns detailed information about a list view\n *\n * @param {Object} [options] - Identity call options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in identity request\n * @param {Callback.<ListViewDescribeInfo>} [callback] - Callback function\n * @returns {Promise.<ListViewDescribeInfo>}\n */\n\n\nListView.prototype.describe = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/describe';\n  return this._conn.request({\n    method: 'GET',\n    url: url,\n    headers: options.headers\n  }, callback);\n};\n/**\n * Explain plan for executing list view\n *\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\n * @returns {Promise.<ExplainInfo>}\n */\n\n\nListView.prototype.explain = function (callback) {\n  var url = \"/query/?explain=\" + this.id;\n  return this._conn.request(url, callback);\n};","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/sobject.js"],"names":["_","require","Record","Query","Cache","QuickAction","SObject","module","exports","conn","type","_conn","cacheOptions","key","describe$","cache","makeCacheable","describe","makeResponseCacheable","layouts$","layouts","compactLayouts$","compactLayouts","approvalLayouts$","approvalLayouts","prototype","insert","create","records","options","callback","retrieve","ids","update","upsert","extIdField","del","destroy","record","id","find","conditions","fields","config","includes","table","limit","sort","offset","skip","query","setResponseTarget","ResponseTargets","Records","run","findOne","extend","SingleRecord","select","count","bulkload","operation","input","bulk","load","insertBulk","createBulk","updateBulk","upsertBulk","deleteBulk","destroyBulk","deleteHardBulk","destroyHardBulk","recent","updated","start","end","deleted","layoutName","url","request","listviews","_baseUrl","listview","ListView","quickActions","thenCall","quickAction","actionName","results","method","headers","explain"],"mappings":"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","sourcesContent":["/**\n * @file Represents Salesforce SObject\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar _      = require('lodash/core'),\n    Record = require('./record'),\n    Query  = require('./query'),\n    Cache  = require('./cache'),\n    QuickAction = require('./quick-action');\n\n/**\n * A class for organizing all SObject access\n *\n * @constructor\n */\nvar SObject = module.exports = function(conn, type) {\n  this._conn = conn;\n  this.type = type;\n  var cacheOptions = { key: \"describe.\" + this.type };\n  this.describe$ = conn.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = conn.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n\n  cacheOptions = { key: \"layouts.\" + this.type };\n  this.layouts$ = conn.cache.makeCacheable(this.layouts, this, cacheOptions);\n  this.layouts = conn.cache.makeResponseCacheable(this.layouts, this, cacheOptions);\n\n  cacheOptions = { key: \"compactLayouts.\" + this.type };\n  this.compactLayouts$ = conn.cache.makeCacheable(this.compactLayouts, this, cacheOptions);\n  this.compactLayouts = conn.cache.makeResponseCacheable(this.compactLayouts, this, cacheOptions);\n\n  cacheOptions = { key: \"approvalLayouts.\" + this.type };\n  this.approvalLayouts$ = conn.cache.makeCacheable(this.approvalLayouts, this, cacheOptions);\n  this.approvalLayouts = conn.cache.makeResponseCacheable(this.approvalLayouts, this, cacheOptions);\n};\n\n/**\n * Synonym of SObject#create()\n *\n * @method SObject#insert\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Create records\n *\n * @method SObject#create\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\nSObject.prototype.insert =\nSObject.prototype.create = function(records, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  return this._conn.create(this.type, records, options, callback);\n};\n\n/**\n * Retrieve specified records\n *\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\nSObject.prototype.retrieve = function(ids, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  return this._conn.retrieve(this.type, ids, options, callback);\n};\n\n/**\n * Update records\n *\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\nSObject.prototype.update = function(records, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  return this._conn.update(this.type, records, options, callback);\n};\n\n/**\n * Upsert records\n *\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\nSObject.prototype.upsert = function(records, extIdField, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  return this._conn.upsert(this.type, records, extIdField, options, callback);\n};\n\n/**\n * Synonym of SObject#destroy()\n *\n * @method SObject#delete\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Synonym of SObject#destroy()\n *\n * @method SObject#del\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Delete records\n *\n * @method SObject#destroy\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Object} [options] - Options for rest api.\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\nSObject.prototype[\"delete\"] =\nSObject.prototype.del =\nSObject.prototype.destroy = function(ids, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  return this._conn.destroy(this.type, ids, options, callback);\n};\n\n/**\n * Describe SObject metadata\n *\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\nSObject.prototype.describe = function(callback) {\n  return this._conn.describe(this.type, callback);\n};\n\n/**\n * Get record representation instance by given id\n *\n * @param {String} id - A record ID\n * @returns {RecordReference}\n */\nSObject.prototype.record = function(id) {\n  return new Record(this._conn, this.type, id);\n};\n\n/**\n * Find and fetch records which matches given conditions\n *\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\n * @param {Object} [options] - Query options.\n * @param {Number} [options.limit] - Maximum number of records the query will return.\n * @param {Number} [options.offset] - Offset number where begins returning results.\n * @param {Number} [options.skip] - Synonym of options.offset.\n * @param {Callback.<Array.<Record>>} [callback] - Callback function\n * @returns {Query.<Array.<Record>>}\n */\nSObject.prototype.find = function(conditions, fields, options, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    fields = null;\n    options = null;\n  } else if (typeof fields === 'function') {\n    callback = fields;\n    fields = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  options = options || {};\n  var config = {\n    fields: fields,\n    includes: options.includes,\n    table: this.type,\n    conditions: conditions,\n    limit: options.limit,\n    sort: options.sort,\n    offset: options.offset || options.skip\n  };\n  var query = new Query(this._conn, config, options);\n  query.setResponseTarget(Query.ResponseTargets.Records);\n  if (callback) { query.run(callback); }\n  return query;\n};\n\n/**\n * Fetch one record which matches given conditions\n *\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\n * @param {Object} [options] - Query options.\n * @param {Number} [options.limit] - Maximum number of records the query will return.\n * @param {Number} [options.offset] - Offset number where begins returning results.\n * @param {Number} [options.skip] - Synonym of options.offset.\n * @param {Callback.<Record>} [callback] - Callback function\n * @returns {Query.<Record>}\n */\nSObject.prototype.findOne = function(conditions, fields, options, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    fields = null;\n    options = null;\n  } else if (typeof fields === 'function') {\n    callback = fields;\n    fields = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  options = _.extend(options || {}, { limit: 1 });\n  var query = this.find(conditions, fields, options);\n  query.setResponseTarget(Query.ResponseTargets.SingleRecord);\n  if (callback) { query.run(callback); }\n  return query;\n};\n\n/**\n * Find and fetch records only by specifying fields to fetch.\n *\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\n * @param {Callback.<Array.<Record>>} [callback] - Callback function\n * @returns {Query.<Array.<Record>>}\n */\nSObject.prototype.select = function(fields, callback) {\n  return this.find(null, fields, null, callback);\n};\n\n/**\n * Count num of records which matches given conditions\n *\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\n * @param {Callback.<Number>} [callback] - Callback function\n * @returns {Query.<Number>}\n */\nSObject.prototype.count = function(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n  var query = this.find(conditions, { \"count()\" : true });\n  query.setResponseTarget(\"Count\");\n  if (callback) { query.run(callback); }\n  return query;\n};\n\n\n/**\n * Call Bulk#load() to execute bulkload, returning batch object\n *\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nSObject.prototype.bulkload = function(operation, options, input, callback) {\n  return this._conn.bulk.load(this.type, operation, options, input, callback);\n};\n\n/**\n * Synonym of SObject#createBulk()\n *\n * @method SObject#insertBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n/**\n * Bulkly insert input data using bulk API\n *\n * @method SObject#createBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nSObject.prototype.insertBulk =\nSObject.prototype.createBulk = function(input, callback) {\n  return this.bulkload(\"insert\", input, callback);\n};\n\n/**\n * Bulkly update records by input data using bulk API\n *\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk update Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nSObject.prototype.updateBulk = function(input, callback) {\n  return this.bulkload(\"update\", input, callback);\n};\n\n/**\n * Bulkly upsert records by input data using bulk API\n *\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk upsert. Accepts array of records, CSv string, and CSV data input stream.\n * @param {String} [options.extIdField] - External ID field name\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nSObject.prototype.upsertBulk = function(input, extIdField, callback) {\n  return this.bulkload(\"upsert\", { extIdField: extIdField }, input, callback);\n};\n\n/**\n * Synonym of SObject#destroyBulk()\n *\n * @method SObject#deleteBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n/**\n * Bulkly delete records specified by input data using bulk API\n *\n * @method SObject#destroyBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nSObject.prototype.deleteBulk =\nSObject.prototype.destroyBulk = function(input, callback) {\n  return this.bulkload(\"delete\", input, callback);\n};\n\n/**\n * Synonym of SObject#destroyHardBulk()\n *\n * @method SObject#deleteHardBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\n/**\n * Bulkly hard delete records specified in input data using bulk API\n *\n * @method SObject#destroyHardBulk\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nSObject.prototype.deleteHardBulk =\nSObject.prototype.destroyHardBulk = function(input, callback) {\n  return this.bulkload(\"hardDelete\", input, callback);\n};\n\n/**\n * Retrieve recently accessed records\n *\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>>}\n */\nSObject.prototype.recent = function (callback) {\n  return this._conn.recent(this.type, callback);\n};\n\n/**\n * Retrieve the updated records\n *\n * @param {String|Date} start - start date or string representing the start of the interval\n * @param {String|Date} end - start date or string representing the end of the interval, must be > start\n * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function\n * @returns {Promise.<UpdatedRecordsInfo>}\n */\nSObject.prototype.updated = function (start, end, callback) {\n  return this._conn.updated(this.type, start, end, callback);\n};\n\n/**\n * Retrieve the deleted records\n *\n * @param {String|Date} start - start date or string representing the start of the interval\n * @param {String|Date} end - start date or string representing the end of the interval, must be > start\n * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function\n * @returns {Promise.<DeletedRecordsInfo>}\n */\nSObject.prototype.deleted = function (start, end, callback) {\n  return this._conn.deleted(this.type, start, end, callback);\n};\n\n/**\n * @typedef {Object} LayoutInfo\n * @prop {Array.<Object>} layouts - Array of layouts\n * @prop {Array.<Object>} recordTypeMappings - Array of record type mappings\n */\n/**\n * Describe layout information for SObject\n *\n * @param {String} [layoutName] - Name of named layout. (e.g. UserAlt in User SObject)\n * @param {Callback.<LayoutInfo>} [callback] - Callback function\n * @returns {Promise.<LayoutInfo>}\n */\nSObject.prototype.layouts = function(layoutName, callback) {\n  if (typeof layoutName === 'function') {\n    callback = layoutName;\n    layoutName = null;\n  }\n  var url = \"/sobjects/\" + this.type + \"/describe/\" + (layoutName ? \"namedLayouts/\"+layoutName : \"layouts\");\n  return this._conn.request(url, callback);\n};\n\n/**\n * @typedef {Object} CompactLayoutInfo\n * @prop {Array.<Object>} compactLayouts - Array of compact layouts\n * @prop {String} defaultCompactLayoutId - ID of default compact layout\n * @prop {Array.<Object>} recordTypeCompactLayoutMappings - Array of record type mappings\n */\n/**\n * Describe compact layout information defined for SObject\n *\n * @param {Callback.<CompactLayoutInfo>} [callback] - Callback function\n * @returns {Promise.<CompactLayoutInfo>}\n */\nSObject.prototype.compactLayouts = function(callback) {\n  var url = \"/sobjects/\" + this.type + \"/describe/compactLayouts\";\n  return this._conn.request(url, callback);\n};\n\n\n/**\n * @typedef {Object} ApprovalLayoutInfo\n * @prop {Array.<Object>} approvalLayouts - Array of approval layouts\n */\n/**\n * Describe compact layout information defined for SObject\n *\n * @param {Callback.<ApprovalLayoutInfo>} [callback] - Callback function\n * @returns {Promise.<ApprovalLayoutInfo>}\n */\nSObject.prototype.approvalLayouts = function(callback) {\n  var url = \"/sobjects/\" + this.type + \"/describe/approvalLayouts\";\n  return this._conn.request(url, callback);\n};\n\n/**\n * Returns the list of list views for the SObject\n *\n * @param {Callback.<ListViewsInfo>} [callback] - Callback function\n * @returns {Promise.<ListViewsInfo>}\n */\nSObject.prototype.listviews = function(callback) {\n  var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews';\n  return this._conn.request(url, callback);\n};\n\n/**\n * Returns the list view info in specifed view id\n *\n * @param {String} id - List view ID\n * @returns {ListView}\n */\nSObject.prototype.listview = function(id) {\n  return new ListView(this._conn, this.type, id);\n};\n\n/**\n * Returns all registered quick actions for the SObject\n *\n * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}\n */\nSObject.prototype.quickActions = function(callback) {\n  return this._conn.request(\"/sobjects/\" + this.type + \"/quickActions\").thenCall(callback);\n};\n\n/**\n * Get reference for specified quick aciton in the SObject\n *\n * @param {String} actionName - Name of the quick action\n * @returns {QuickAction}\n */\nSObject.prototype.quickAction = function(actionName) {\n  return new QuickAction(this._conn, \"/sobjects/\" + this.type + \"/quickActions/\" + actionName);\n};\n\n\n/**\n * A class for organizing list view information\n *\n * @protected\n * @class ListView\n * @param {Connection} conn - Connection instance\n * @param {SObject} type - SObject type\n * @param {String} id - List view ID\n */\nvar ListView = function(conn, type, id) {\n  this._conn = conn;\n  this.type = type;\n  this.id = id;\n};\n\n/**\n * Executes query for the list view and returns the resulting data and presentation information.\n *\n * @param {Callback.<ListViewResultInfo>} [callback] - Callback function\n * @returns {Promise.<ListViewResultInfo>}\n */\nListView.prototype.results = function(callback) {\n  var url =  this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/results';\n  return this._conn.request(url, callback);\n};\n\n\n/**\n * Returns detailed information about a list view\n *\n * @param {Object} [options] - Identity call options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in identity request\n * @param {Callback.<ListViewDescribeInfo>} [callback] - Callback function\n * @returns {Promise.<ListViewDescribeInfo>}\n */\nListView.prototype.describe = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  var url =  this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/describe';\n  return this._conn.request({ method: 'GET', url: url, headers: options.headers }, callback);\n};\n\n/**\n * Explain plan for executing list view\n *\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\n * @returns {Promise.<ExplainInfo>}\n */\nListView.prototype.explain = function(callback) {\n  var url = \"/query/?explain=\" + this.id;\n  return this._conn.request(url, callback);\n};\n"]},"metadata":{},"sourceType":"script"}