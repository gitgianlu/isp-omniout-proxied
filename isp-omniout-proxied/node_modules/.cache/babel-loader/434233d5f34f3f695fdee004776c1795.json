{"ast":null,"code":"'use strict';\n\nvar Duplex = require('readable-stream').Duplex;\n\nvar _ = require('lodash/core');\n\nmodule.exports = function (params, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.open(params.method, params.url);\n\n  if (params.headers) {\n    for (var header in params.headers) {\n      xhr.setRequestHeader(header, params.headers[header]);\n    }\n  }\n\n  xhr.setRequestHeader(\"Accept\", \"*/*\");\n  var response;\n  var str = new Duplex();\n\n  str._read = function (size) {\n    if (response) {\n      str.push(response.body);\n    }\n  };\n\n  var bufs = [];\n  var sent = false;\n\n  str._write = function (chunk, encoding, callback) {\n    bufs.push(chunk.toString(encoding === \"buffer\" ? \"binary\" : encoding));\n    callback();\n  };\n\n  str.on('finish', function () {\n    if (!sent) {\n      xhr.send(bufs.join(''));\n      sent = true;\n    }\n  });\n\n  if (params.body || params.body === \"\" || !/^(put|post|patch)$/i.test(params.method)) {\n    xhr.send(params.body);\n    sent = true;\n  }\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      var headerNames = getResponseHeaderNames(xhr);\n      var headers = {};\n\n      _.forEach(headerNames, function (headerName) {\n        if (headerName) {\n          headers[headerName] = xhr.getResponseHeader(headerName);\n        }\n      });\n\n      response = {\n        statusCode: xhr.status,\n        headers: headers,\n        body: xhr.response\n      };\n\n      if (!response.statusCode) {\n        response.statusCode = 400;\n        response.body = \"Access Declined\";\n      }\n\n      if (callback) {\n        callback(null, response, response.body);\n      }\n\n      str.end();\n    }\n  };\n\n  return str;\n};\n\nfunction getResponseHeaderNames(xhr) {\n  var headerLines = (xhr.getAllResponseHeaders() || \"\").split(/[\\r\\n]+/);\n  return _.map(headerLines, function (headerLine) {\n    return headerLine.split(/\\s*:/)[0].toLowerCase();\n  });\n}","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/browser/request.js"],"names":["Duplex","require","_","module","exports","params","callback","xhr","XMLHttpRequest","open","method","url","headers","header","setRequestHeader","response","str","_read","size","push","body","bufs","sent","_write","chunk","encoding","toString","on","send","join","test","onreadystatechange","readyState","headerNames","getResponseHeaderNames","forEach","headerName","getResponseHeader","statusCode","status","end","headerLines","getAllResponseHeaders","split","map","headerLine","toLowerCase"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Duplex = require('readable-stream').Duplex;\nvar _ = require('lodash/core');\n\nmodule.exports = function(params, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.open(params.method, params.url);\n  if (params.headers) {\n    for (var header in params.headers) {\n      xhr.setRequestHeader(header, params.headers[header]);\n    }\n  }\n  xhr.setRequestHeader(\"Accept\", \"*/*\");\n  var response;\n  var str = new Duplex();\n  str._read = function(size) {\n    if (response) {\n      str.push(response.body);\n    }\n  };\n  var bufs = [];\n  var sent = false;\n  str._write = function(chunk, encoding, callback) {\n    bufs.push(chunk.toString(encoding === \"buffer\" ? \"binary\" : encoding));\n    callback();\n  };\n  str.on('finish', function() {\n    if (!sent) {\n      xhr.send(bufs.join(''));\n      sent = true;\n    }\n  });\n  if (params.body || params.body === \"\" || !/^(put|post|patch)$/i.test(params.method)) {\n    xhr.send(params.body);\n    sent = true;\n  }\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === 4) {\n      var headerNames = getResponseHeaderNames(xhr);\n      var headers = {};\n      _.forEach(headerNames, function(headerName) {\n        if (headerName) {\n          headers[headerName] = xhr.getResponseHeader(headerName);\n        }\n      });\n      response = {\n        statusCode: xhr.status,\n        headers: headers,\n        body: xhr.response\n      };\n      if (!response.statusCode) {\n        response.statusCode = 400;\n        response.body = \"Access Declined\";\n      }\n      if (callback) {\n        callback(null, response, response.body);\n      }\n      str.end();\n    }\n  };\n  return str;\n};\n\nfunction getResponseHeaderNames(xhr) {\n  var headerLines = (xhr.getAllResponseHeaders() || \"\").split(/[\\r\\n]+/);\n  return _.map(headerLines, function(headerLine) {\n    return headerLine.split(/\\s*:/)[0].toLowerCase();\n  });\n}\n"]},"metadata":{},"sourceType":"script"}