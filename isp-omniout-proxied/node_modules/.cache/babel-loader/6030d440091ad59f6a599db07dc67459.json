{"ast":null,"code":"/**\n * @file Manages Salesforce Chatter REST API calls\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar inherits = require('inherits'),\n    _ = require('lodash/core'),\n    jsforce = require('../core'),\n    Promise = require('../promise');\n/**\n * API class for Chatter REST API call\n *\n * @class\n * @param {Connection} conn Connection\n */\n\n\nvar Chatter = module.exports = function (conn) {\n  this._conn = conn;\n};\n/**\n * Sending request to API endpoint\n * @private\n */\n\n\nChatter.prototype._request = function (params, callback) {\n  if (/^(put|post|patch)$/i.test(params.method)) {\n    if (_.isObject(params.body)) {\n      params.headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      params.body = JSON.stringify(params.body);\n    }\n  }\n\n  params.url = this._normalizeUrl(params.url);\n  return this._conn.request(params, callback);\n};\n/**\n * Convert path to site root relative url\n * @private\n */\n\n\nChatter.prototype._normalizeUrl = function (url) {\n  if (url.indexOf('/chatter/') === 0 || url.indexOf('/connect/') === 0) {\n    return '/services/data/v' + this._conn.version + url;\n  } else if (/^\\/v[\\d]+\\.[\\d]+\\//.test(url)) {\n    return '/services/data' + url;\n  } else if (url.indexOf('/services/') !== 0 && url[0] === '/') {\n    return '/services/data/v' + this._conn.version + '/chatter' + url;\n  } else {\n    return url;\n  }\n};\n/**\n * @typedef {Object} Chatter~RequestParams\n * @prop {String} method - HTTP method\n * @prop {String} url - Resource URL\n * @prop {String} [body] - HTTP body (in POST/PUT/PATCH methods)\n */\n\n/**\n * @typedef {Object} Chatter~RequestResult\n */\n\n/**\n * Make a request for chatter API resource\n *\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback func\n * @returns {Chatter~Request}\n */\n\n\nChatter.prototype.request = function (params, callback) {\n  return new Request(this, params).thenCall(callback);\n};\n/**\n * Make a resource request to chatter API\n *\n * @param {String} url - Resource URL\n * @param {Object} [queryParams] - Query parameters (in hash object)\n * @returns {Chatter~Resource}\n */\n\n\nChatter.prototype.resource = function (url, queryParams) {\n  return new Resource(this, url, queryParams);\n};\n/**\n * @typedef {Object} Chatter~BatchRequestResult\n * @prop {Boolean} hasError - Flag if the batch has one or more errors\n * @prop {Array.<Object>} results - Batch request results in array\n * @prop {Number} results.statusCode - HTTP response status code\n * @prop {Chatter~RequestResult} results.result - Parsed HTTP response body\n */\n\n/**\n * Make a batch request to chatter API\n *\n * @params {Array.<Chatter~Request>} requests - Chatter API requests\n * @param {Callback.<Chatter~BatchRequestResult>} [callback] - Callback func\n * @returns {Promise.<Chatter~BatchRequestResult>}\n */\n\n\nChatter.prototype.batch = function (requests, callback) {\n  var self = this;\n  var batchRequests = [],\n      batchDeferreds = [];\n\n  _.forEach(requests, function (request) {\n    var deferred = Promise.defer();\n    request._promise = deferred.promise;\n    batchRequests.push(request.batchParams());\n    batchDeferreds.push(deferred);\n  });\n\n  var params = {\n    method: 'POST',\n    url: this._normalizeUrl('/connect/batch'),\n    body: {\n      batchRequests: batchRequests\n    }\n  };\n  return this.request(params).then(function (res) {\n    _.forEach(res.results, function (result, i) {\n      var deferred = batchDeferreds[i];\n\n      if (result.statusCode >= 400) {\n        deferred.reject(result.result);\n      } else {\n        deferred.resolve(result.result);\n      }\n    });\n\n    return res;\n  }).thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/**\n * A class representing chatter API request\n *\n * @protected\n * @class Chatter~Request\n * @implements {Promise.<Chatter~RequestResult>}\n * @param {Chatter} chatter - Chatter API object\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\n */\n\n\nvar Request = function (chatter, params) {\n  this._chatter = chatter;\n  this._params = params;\n  this._promise = null;\n};\n/**\n * @typedef {Object} Chatter~BatchRequestParams\n * @prop {String} method - HTTP method\n * @prop {String} url - Resource URL\n * @prop {String} [richInput] - HTTP body (in POST/PUT/PATCH methods)\n */\n\n/**\n * Retrieve parameters in batch request form\n *\n * @method Chatter~Request#batchParams\n * @returns {Chatter~BatchRequestParams}\n */\n\n\nRequest.prototype.batchParams = function () {\n  var params = this._params;\n  var batchParams = {\n    method: params.method,\n    url: this._chatter._normalizeUrl(params.url)\n  };\n\n  if (this._params.body) {\n    batchParams.richInput = this._params.body;\n  }\n\n  return batchParams;\n};\n/**\n * Retrieve parameters in batch request form\n *\n * @method Chatter~Request#promise\n * @returns {Promise.<Chatter~RequestResult>}\n */\n\n\nRequest.prototype.promise = function () {\n  return this._promise || this._chatter._request(this._params);\n};\n/**\n * Returns Node.js Stream object for request\n *\n * @method Chatter~Request#stream\n * @returns {stream.Stream}\n */\n\n\nRequest.prototype.stream = function () {\n  return this._chatter._request(this._params).stream();\n};\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Chatter~Request#then\n */\n\n\nRequest.prototype.then = function (onResolve, onReject) {\n  return this.promise().then(onResolve, onReject);\n};\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Chatter~Request#thenCall\n */\n\n\nRequest.prototype.thenCall = function (callback) {\n  return _.isFunction(callback) ? this.promise().thenCall(callback) : this;\n};\n/*--------------------------------------------*/\n\n/**\n * A class representing chatter API resource\n *\n * @protected\n * @class Chatter~Resource\n * @extends Chatter~Request\n * @param {Chatter} chatter - Chatter API object\n * @param {String} url - Resource URL\n * @param {Object} [queryParams] - Query parameters (in hash object)\n */\n\n\nvar Resource = function (chatter, url, queryParams) {\n  if (queryParams) {\n    var qstring = _.map(_.keys(queryParams), function (name) {\n      return name + \"=\" + encodeURIComponent(queryParams[name]);\n    }).join('&');\n\n    url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;\n  }\n\n  Resource.super_.call(this, chatter, {\n    method: 'GET',\n    url: url\n  });\n  this._url = url;\n};\n\ninherits(Resource, Request);\n/**\n * Create a new resource\n *\n * @method Chatter~Resource#create\n * @param {Object} data - Data to newly post\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\n\nResource.prototype.create = function (data, callback) {\n  return this._chatter.request({\n    method: 'POST',\n    url: this._url,\n    body: data\n  }).thenCall(callback);\n};\n/**\n * Retrieve resource content\n *\n * @method Chatter~Resource#retrieve\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\n\n\nResource.prototype.retrieve = function (callback) {\n  return this.thenCall(callback);\n};\n/**\n * Update specified resource\n *\n * @method Chatter~Resource#update\n * @param {Obejct} data - Data to update\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\n\n\nResource.prototype.update = function (data, callback) {\n  return this._chatter.request({\n    method: 'POST',\n    url: this._url,\n    body: data\n  }).thenCall(callback);\n};\n/**\n * Synonym of Resource#delete()\n *\n * @method Chatter~Resource#del\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\n\n/**\n * Delete specified resource\n *\n * @method Chatter~Resource#delete\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\n\n\nResource.prototype.del = Resource.prototype[\"delete\"] = function (callback) {\n  return this._chatter.request({\n    method: 'DELETE',\n    url: this._url\n  }).thenCall(callback);\n};\n/*--------------------------------------------*/\n\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\n\n\njsforce.on('connection:new', function (conn) {\n  conn.chatter = new Chatter(conn);\n});","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/api/chatter.js"],"names":["inherits","require","_","jsforce","Promise","Chatter","module","exports","conn","_conn","prototype","_request","params","callback","test","method","isObject","body","headers","JSON","stringify","url","_normalizeUrl","request","indexOf","version","Request","thenCall","resource","queryParams","Resource","batch","requests","self","batchRequests","batchDeferreds","forEach","deferred","defer","_promise","promise","push","batchParams","then","res","results","result","i","statusCode","reject","resolve","chatter","_chatter","_params","richInput","stream","onResolve","onReject","isFunction","qstring","map","keys","name","encodeURIComponent","join","super_","call","_url","create","data","retrieve","update","del","on"],"mappings":"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","sourcesContent":["/**\n * @file Manages Salesforce Chatter REST API calls\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits = require('inherits'),\n    _       = require('lodash/core'),\n    jsforce = require('../core'),\n    Promise = require('../promise');\n\n/**\n * API class for Chatter REST API call\n *\n * @class\n * @param {Connection} conn Connection\n */\nvar Chatter = module.exports = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * Sending request to API endpoint\n * @private\n */\nChatter.prototype._request = function(params, callback) {\n  if (/^(put|post|patch)$/i.test(params.method)) {\n    if (_.isObject(params.body)) {\n      params.headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      params.body = JSON.stringify(params.body);\n    }\n  }\n  params.url = this._normalizeUrl(params.url);\n  return this._conn.request(params, callback);\n};\n\n/**\n * Convert path to site root relative url\n * @private\n */\nChatter.prototype._normalizeUrl = function(url) {\n  if (url.indexOf('/chatter/') === 0 || url.indexOf('/connect/') === 0) {\n    return '/services/data/v' + this._conn.version + url;\n  } else if (/^\\/v[\\d]+\\.[\\d]+\\//.test(url)) {\n    return '/services/data' + url;\n  } else if (url.indexOf('/services/') !== 0 && url[0] === '/') {\n    return '/services/data/v' + this._conn.version + '/chatter' + url;\n  } else {\n    return url;\n  }\n};\n\n/**\n * @typedef {Object} Chatter~RequestParams\n * @prop {String} method - HTTP method\n * @prop {String} url - Resource URL\n * @prop {String} [body] - HTTP body (in POST/PUT/PATCH methods)\n */\n\n/**\n * @typedef {Object} Chatter~RequestResult\n */\n\n/**\n * Make a request for chatter API resource\n *\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback func\n * @returns {Chatter~Request}\n */\nChatter.prototype.request = function(params, callback) {\n  return new Request(this, params).thenCall(callback);\n};\n\n/**\n * Make a resource request to chatter API\n *\n * @param {String} url - Resource URL\n * @param {Object} [queryParams] - Query parameters (in hash object)\n * @returns {Chatter~Resource}\n */\nChatter.prototype.resource = function(url, queryParams) {\n  return new Resource(this, url, queryParams);\n};\n\n/**\n * @typedef {Object} Chatter~BatchRequestResult\n * @prop {Boolean} hasError - Flag if the batch has one or more errors\n * @prop {Array.<Object>} results - Batch request results in array\n * @prop {Number} results.statusCode - HTTP response status code\n * @prop {Chatter~RequestResult} results.result - Parsed HTTP response body\n */\n\n/**\n * Make a batch request to chatter API\n *\n * @params {Array.<Chatter~Request>} requests - Chatter API requests\n * @param {Callback.<Chatter~BatchRequestResult>} [callback] - Callback func\n * @returns {Promise.<Chatter~BatchRequestResult>}\n */\nChatter.prototype.batch = function(requests, callback) {\n  var self = this;\n  var batchRequests = [], batchDeferreds = [];\n  _.forEach(requests, function(request) {\n    var deferred = Promise.defer();\n    request._promise = deferred.promise;\n    batchRequests.push(request.batchParams());\n    batchDeferreds.push(deferred);\n  });\n  var params = {\n    method: 'POST',\n    url: this._normalizeUrl('/connect/batch'),\n    body: {\n      batchRequests: batchRequests\n    }\n  };\n  return this.request(params).then(function(res) {\n    _.forEach(res.results, function(result, i) {\n      var deferred = batchDeferreds[i];\n      if (result.statusCode >= 400) {\n        deferred.reject(result.result);\n      } else {\n        deferred.resolve(result.result);\n      }\n    });\n    return res;\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/**\n * A class representing chatter API request\n *\n * @protected\n * @class Chatter~Request\n * @implements {Promise.<Chatter~RequestResult>}\n * @param {Chatter} chatter - Chatter API object\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\n */\nvar Request = function(chatter, params) {\n  this._chatter = chatter;\n  this._params = params;\n  this._promise = null;\n};\n\n/**\n * @typedef {Object} Chatter~BatchRequestParams\n * @prop {String} method - HTTP method\n * @prop {String} url - Resource URL\n * @prop {String} [richInput] - HTTP body (in POST/PUT/PATCH methods)\n */\n\n/**\n * Retrieve parameters in batch request form\n *\n * @method Chatter~Request#batchParams\n * @returns {Chatter~BatchRequestParams}\n */\nRequest.prototype.batchParams = function() {\n  var params = this._params;\n  var batchParams = {\n    method: params.method,\n    url: this._chatter._normalizeUrl(params.url)\n  };\n  if (this._params.body) {\n    batchParams.richInput = this._params.body;\n  }\n  return batchParams;\n};\n\n/**\n * Retrieve parameters in batch request form\n *\n * @method Chatter~Request#promise\n * @returns {Promise.<Chatter~RequestResult>}\n */\nRequest.prototype.promise = function() {\n  return this._promise || this._chatter._request(this._params);\n};\n\n/**\n * Returns Node.js Stream object for request\n *\n * @method Chatter~Request#stream\n * @returns {stream.Stream}\n */\nRequest.prototype.stream = function() {\n  return this._chatter._request(this._params).stream();\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Chatter~Request#then\n */\nRequest.prototype.then = function(onResolve, onReject) {\n  return this.promise().then(onResolve, onReject);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Chatter~Request#thenCall\n */\nRequest.prototype.thenCall = function(callback) {\n  return _.isFunction(callback) ? this.promise().thenCall(callback) : this;\n};\n\n\n/*--------------------------------------------*/\n/**\n * A class representing chatter API resource\n *\n * @protected\n * @class Chatter~Resource\n * @extends Chatter~Request\n * @param {Chatter} chatter - Chatter API object\n * @param {String} url - Resource URL\n * @param {Object} [queryParams] - Query parameters (in hash object)\n */\nvar Resource = function(chatter, url, queryParams) {\n  if (queryParams) {\n    var qstring = _.map(_.keys(queryParams), function(name) {\n      return name + \"=\" + encodeURIComponent(queryParams[name]);\n    }).join('&');\n    url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;\n  }\n  Resource.super_.call(this, chatter, { method: 'GET', url: url });\n  this._url = url;\n};\n\ninherits(Resource, Request);\n\n/**\n * Create a new resource\n *\n * @method Chatter~Resource#create\n * @param {Object} data - Data to newly post\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.create = function(data, callback) {\n  return this._chatter.request({\n    method: 'POST',\n    url: this._url,\n    body: data\n  }).thenCall(callback);\n};\n\n/**\n * Retrieve resource content\n *\n * @method Chatter~Resource#retrieve\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.retrieve = function(callback) {\n  return this.thenCall(callback);\n};\n\n/**\n * Update specified resource\n *\n * @method Chatter~Resource#update\n * @param {Obejct} data - Data to update\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.update = function(data, callback) {\n  return this._chatter.request({\n    method: 'POST',\n    url: this._url,\n    body: data\n  }).thenCall(callback);\n};\n\n/**\n * Synonym of Resource#delete()\n *\n * @method Chatter~Resource#del\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\n/**\n * Delete specified resource\n *\n * @method Chatter~Resource#delete\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.del =\nResource.prototype[\"delete\"] = function(callback) {\n  return this._chatter.request({\n    method: 'DELETE',\n    url: this._url\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.chatter = new Chatter(conn);\n});\n"]},"metadata":{},"sourceType":"script"}