{"ast":null,"code":"/*global Buffer */\n\n/**\n * @file Connection class to keep the API session information and manage requests\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n'use strict';\n\nvar events = require('events'),\n    inherits = require('inherits'),\n    _ = require('lodash/core'),\n    Promise = require('./promise'),\n    Logger = require('./logger'),\n    OAuth2 = require('./oauth2'),\n    Query = require('./query'),\n    SObject = require('./sobject'),\n    QuickAction = require('./quick-action'),\n    HttpApi = require('./http-api'),\n    Transport = require('./transport'),\n    Process = require('./process'),\n    Cache = require('./cache');\n\nvar defaults = {\n  loginUrl: \"https://login.salesforce.com\",\n  instanceUrl: \"\",\n  version: \"42.0\"\n};\n/*\n * Constant of maximum records num in DML operation (update/delete)\n */\n\nvar MAX_DML_COUNT = 200;\n/**\n * Connection class to keep the API session information and manage requests\n *\n * @constructor\n * @extends events.EventEmitter\n * @param {Object} [options] - Connection options\n * @param {OAuth2|Object} [options.oauth2] - OAuth2 instance or options to be passed to OAuth2 constructor\n * @param {String} [options.logLevel] - Output logging level (DEBUG|INFO|WARN|ERROR|FATAL)\n * @param {String} [options.version] - Salesforce API Version (without \"v\" prefix)\n * @param {Number} [options.maxRequest] - Max number of requests allowed in parallel call\n * @param {String} [options.loginUrl] - Salesforce Login Server URL (e.g. https://login.salesforce.com/)\n * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)\n * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)\n * @param {String} [options.accessToken] - Salesforce OAuth2 access token\n * @param {String} [options.sessionId] - Salesforce session ID\n * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token\n * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)\n * @param {String} [options.proxyUrl] - Cross-domain proxy server URL, used in browser client, non Visualforce app.\n * @param {String} [options.httpProxy] - URL of HTTP proxy server, used in server client.\n * @param {Object} [options.callOptions] - Call options used in each SOAP/REST API request. See manual.\n */\n\nvar Connection = module.exports = function (options) {\n  options = options || {};\n  this._logger = new Logger(options.logLevel);\n  var oauth2 = options.oauth2 || {\n    loginUrl: options.loginUrl,\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    redirectUri: options.redirectUri,\n    proxyUrl: options.proxyUrl,\n    httpProxy: options.httpProxy\n  };\n  /**\n   * OAuth2 object\n   * @member {OAuth2} Connection#oauth2\n   */\n\n  this.oauth2 = oauth2 = oauth2 instanceof OAuth2 ? oauth2 : new OAuth2(oauth2);\n  this.loginUrl = options.loginUrl || oauth2.loginUrl || defaults.loginUrl;\n  this.version = options.version || defaults.version;\n  this.maxRequest = options.maxRequest || this.maxRequest || 10;\n  /** @private */\n\n  if (options.proxyUrl) {\n    this._transport = new Transport.ProxyTransport(options.proxyUrl);\n  } else if (options.httpProxy) {\n    this._transport = new Transport.HttpProxyTransport(options.httpProxy);\n  } else {\n    this._transport = new Transport();\n  }\n\n  this.callOptions = options.callOptions;\n  /*\n   * Fire connection:new event to notify jsforce plugin modules\n   */\n\n  var jsforce = require('./core');\n\n  jsforce.emit('connection:new', this);\n  /**\n   * Streaming API object\n   * @member {Streaming} Connection#streaming\n   */\n  // this.streaming = new Streaming(this);\n\n  /**\n   * Bulk API object\n   * @member {Bulk} Connection#bulk\n   */\n  // this.bulk = new Bulk(this);\n\n  /**\n   * Tooling API object\n   * @member {Tooling} Connection#tooling\n   */\n  // this.tooling = new Tooling(this);\n\n  /**\n   * Analytics API object\n   * @member {Analytics} Connection#analytics\n   */\n  // this.analytics = new Analytics(this);\n\n  /**\n   * Chatter API object\n   * @member {Chatter} Connection#chatter\n   */\n  // this.chatter = new Chatter(this);\n\n  /**\n   * Metadata API object\n   * @member {Metadata} Connection#metadata\n   */\n  // this.metadata = new Metadata(this);\n\n  /**\n   * SOAP API object\n   * @member {SoapApi} Connection#soap\n   */\n  // this.soap = new SoapApi(this);\n\n  /**\n   * Apex REST API object\n   * @member {Apex} Connection#apex\n   */\n  // this.apex = new Apex(this);\n\n  /**\n   * @member {Process} Connection#process\n   */\n\n  this.process = new Process(this);\n  /**\n   * Cache object for result\n   * @member {Cache} Connection#cache\n   */\n\n  this.cache = new Cache(); // Allow to delegate connection refresh to outer function\n\n  var self = this;\n  var refreshFn = options.refreshFn;\n\n  if (!refreshFn && this.oauth2.clientId) {\n    refreshFn = oauthRefreshFn;\n  }\n\n  if (refreshFn) {\n    this._refreshDelegate = new HttpApi.SessionRefreshDelegate(this, refreshFn);\n  }\n\n  var cacheOptions = {\n    key: function (type) {\n      return type ? \"describe.\" + type : \"describe\";\n    }\n  };\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n  this.describeSObject$ = this.describe$;\n  this.describeSObject = this.describe;\n  cacheOptions = {\n    key: 'describeGlobal'\n  };\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\n  this.initialize(options);\n};\n\ninherits(Connection, events.EventEmitter);\n/**\n * Initialize connection.\n *\n * @protected\n * @param {Object} options - Initialization options\n * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)\n * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)\n * @param {String} [options.accessToken] - Salesforce OAuth2 access token\n * @param {String} [options.sessionId] - Salesforce session ID\n * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token\n * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)\n * @param {UserInfo} [options.userInfo] - Logged in user information\n */\n\nConnection.prototype.initialize = function (options) {\n  if (!options.instanceUrl && options.serverUrl) {\n    options.instanceUrl = options.serverUrl.split('/').slice(0, 3).join('/');\n  }\n\n  this.instanceUrl = options.instanceUrl || options.serverUrl || this.instanceUrl || defaults.instanceUrl;\n  this.accessToken = options.sessionId || options.accessToken || this.accessToken;\n  this.refreshToken = options.refreshToken || this.refreshToken;\n\n  if (this.refreshToken && !this._refreshDelegate) {\n    throw new Error(\"Refresh token is specified without oauth2 client information or refresh function\");\n  }\n\n  this.signedRequest = options.signedRequest && parseSignedRequest(options.signedRequest);\n\n  if (this.signedRequest) {\n    this.accessToken = this.signedRequest.client.oauthToken;\n\n    if (Transport.CanvasTransport.supported) {\n      this._transport = new Transport.CanvasTransport(this.signedRequest);\n    }\n  }\n\n  if (options.userInfo) {\n    this.userInfo = options.userInfo;\n  }\n\n  this.limitInfo = {};\n  this.sobjects = {};\n  this.cache.clear();\n  this.cache.get('describeGlobal').removeAllListeners('value');\n  this.cache.get('describeGlobal').on('value', _.bind(function (res) {\n    if (res.result) {\n      var types = _.map(res.result.sobjects, function (so) {\n        return so.name;\n      });\n\n      types.forEach(this.sobject, this);\n    }\n  }, this));\n\n  if (this.tooling) {\n    this.tooling.initialize();\n  }\n\n  this._sessionType = options.sessionId ? \"soap\" : \"oauth2\";\n};\n/** @private **/\n\n\nfunction oauthRefreshFn(conn, callback) {\n  conn.oauth2.refreshToken(conn.refreshToken, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    var userInfo = parseIdUrl(res.id);\n    conn.initialize({\n      instanceUrl: res.instance_url,\n      accessToken: res.access_token,\n      userInfo: userInfo\n    });\n    callback(null, res.access_token, res);\n  });\n}\n/** @private **/\n\n\nfunction parseSignedRequest(sr) {\n  if (_.isString(sr)) {\n    if (sr[0] === '{') {\n      // might be JSON\n      return JSON.parse(sr);\n    } else {\n      // might be original base64-encoded signed request\n      var msg = sr.split('.').pop(); // retrieve latter part\n\n      var json = Buffer.from(msg, 'base64').toString('utf-8');\n      return JSON.parse(json);\n    }\n\n    return null;\n  }\n\n  return sr;\n}\n/** @private **/\n\n\nConnection.prototype._baseUrl = function () {\n  return [this.instanceUrl, \"services/data\", \"v\" + this.version].join('/');\n};\n/**\n * Convert path to absolute url\n * @private\n */\n\n\nConnection.prototype._normalizeUrl = function (url) {\n  if (url[0] === '/') {\n    if (url.indexOf('/services/') === 0) {\n      return this.instanceUrl + url;\n    } else {\n      return this._baseUrl() + url;\n    }\n  } else {\n    return url;\n  }\n};\n/**\n * Send REST API request with given HTTP request info, with connected session information.\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String|Object} request - HTTP request object or URL to GET request\n * @param {String} request.method - HTTP method URL to send HTTP request\n * @param {String} request.url - URL to send HTTP request\n * @param {Object} [request.headers] - HTTP request headers in hash object (key-value)\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nConnection.prototype.request = function (request, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n  var self = this; // if request is simple string, regard it as url in GET method\n\n  if (_.isString(request)) {\n    request = {\n      method: 'GET',\n      url: request\n    };\n  } // if url is given in relative path, prepend base url or instance url before.\n\n\n  request.url = this._normalizeUrl(request.url);\n  var httpApi = new HttpApi(this, options); // log api usage and its quota\n\n  httpApi.on('response', function (response) {\n    if (response.headers && response.headers[\"sforce-limit-info\"]) {\n      var apiUsage = response.headers[\"sforce-limit-info\"].match(/api\\-usage=(\\d+)\\/(\\d+)/);\n\n      if (apiUsage) {\n        self.limitInfo = {\n          apiUsage: {\n            used: parseInt(apiUsage[1], 10),\n            limit: parseInt(apiUsage[2], 10)\n          }\n        };\n      }\n    }\n  });\n  return httpApi.request(request).thenCall(callback);\n};\n/**\n * Send HTTP GET request\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP GET\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nConnection.prototype.requestGet = function (url, options, callback) {\n  var request = {\n    method: \"GET\",\n    url: url\n  };\n  return this.request(request, options, callback);\n};\n/**\n * Send HTTP POST request with JSON body, with connected session information\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP POST\n * @param {Object} body - Any JS object which can be serialized to JSON\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nConnection.prototype.requestPost = function (url, body, options, callback) {\n  var request = {\n    method: \"POST\",\n    url: url,\n    body: JSON.stringify(body),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  return this.request(request, options, callback);\n};\n/**\n * Send HTTP PUT request with JSON body, with connected session information\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP PUT\n * @param {Object} body - Any JS object which can be serialized to JSON\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nConnection.prototype.requestPut = function (url, body, options, callback) {\n  var request = {\n    method: \"PUT\",\n    url: url,\n    body: JSON.stringify(body),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  return this.request(request, options, callback);\n};\n/**\n * Send HTTP PATCH request with JSON body\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP PATCH\n * @param {Object} body - Any JS object which can be serialized to JSON\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nConnection.prototype.requestPatch = function (url, body, options, callback) {\n  var request = {\n    method: \"PATCH\",\n    url: url,\n    body: JSON.stringify(body),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  return this.request(request, options, callback);\n};\n/**\n * Send HTTP DELETE request\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP DELETE\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n\n\nConnection.prototype.requestDelete = function (url, options, callback) {\n  var request = {\n    method: \"DELETE\",\n    url: url\n  };\n  return this.request(request, options, callback);\n};\n/** @private */\n\n\nfunction formatDate(date) {\n  function pad(number) {\n    if (number < 10) {\n      return '0' + number;\n    }\n\n    return number;\n  }\n\n  return date.getUTCFullYear() + '-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate()) + 'T' + pad(date.getUTCHours()) + ':' + pad(date.getUTCMinutes()) + ':' + pad(date.getUTCSeconds()) + '+00:00';\n}\n/** @private **/\n\n\nfunction parseIdUrl(idUrl) {\n  var idUrls = idUrl.split(\"/\");\n  var userId = idUrls.pop(),\n      orgId = idUrls.pop();\n  return {\n    id: userId,\n    organizationId: orgId,\n    url: idUrl\n  };\n}\n/**\n * @callback Callback\n * @type {Function}\n * @param {Error} err - Callback error\n * @param {T} response - Callback response\n * @template T\n */\n\n/**\n * @typedef {Object} QueryResult\n * @prop {Boolean} done - Flag if the query is fetched all records or not\n * @prop {String} [nextRecordsUrl] - URL locator for next record set, (available when done = false)\n * @prop {Number} totalSize - Total size for query\n * @prop {Array.<Record>} [records] - Array of records fetched\n */\n\n/**\n * Execute query by using SOQL\n *\n * @param {String} soql - SOQL string\n * @param {Object} [options] - Query options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n\n\nConnection.prototype.query = function (soql, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  var query = new Query(this, soql, options);\n\n  if (callback) {\n    query.run(callback);\n  }\n\n  return query;\n};\n/**\n * Execute query by using SOQL, including deleted records\n *\n * @param {String} soql - SOQL string\n * @param {Object} [options] - Query options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n\n\nConnection.prototype.queryAll = function (soql, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  var query = new Query(this, soql, options);\n  query.scanAll(true);\n\n  if (callback) {\n    query.run(callback);\n  }\n\n  return query;\n};\n/**\n * Query next record set by using query locator\n *\n * @param {String} locator - Next record set locator\n * @param {Object} [options] - Query options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\n\n\nConnection.prototype.queryMore = function (locator, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  var query = new Query(this, {\n    locator: locator\n  }, options);\n\n  if (callback) {\n    query.run(callback);\n  }\n\n  return query;\n};\n/** @private */\n\n\nConnection.prototype._ensureVersion = function (majorVersion) {\n  var versions = this.version.split('.');\n  return parseInt(versions[0], 10) >= majorVersion;\n};\n/** @private */\n\n\nConnection.prototype._supports = function (feature) {\n  switch (feature) {\n    case 'sobject-collection':\n      return this._ensureVersion(42);\n\n    default:\n      return false;\n  }\n};\n/**\n * Retrieve specified records\n *\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\n * @param {Object} [options] - Options for rest api.\n * @param {Array.<String>} [options.fields] - Fetching field names in retrieving record\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\n\n\nConnection.prototype.retrieve = function (type, ids, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  return (_.isArray(ids) ? this._supports('sobject-collection') ? // check whether SObject collection API is supported\n  this._retrieveMany(type, ids, options) : this._retrieveParallel(type, ids, options) : this._retrieveSingle(type, ids, options)).thenCall(callback);\n};\n/** @private */\n\n\nConnection.prototype._retrieveSingle = function (type, id, options) {\n  if (!id) {\n    return Promise.reject(new Error('Invalid record ID. Specify valid record ID value'));\n  }\n\n  var url = [this._baseUrl(), \"sobjects\", type, id].join('/');\n\n  if (options.fields) {\n    url += '?fields=' + options.fields.join(',');\n  }\n\n  return this.request({\n    method: 'GET',\n    url: url,\n    headers: options.headers\n  });\n};\n/** @private */\n\n\nConnection.prototype._retrieveParallel = function (type, ids, options) {\n  if (ids.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\n  }\n\n  var self = this;\n  return Promise.all(ids.map(function (id) {\n    return self._retrieveSingle(type, id, options).catch(function (err) {\n      if (options.allOrNone || err.errorCode !== 'NOT_FOUND') {\n        throw err;\n      }\n\n      return null;\n    });\n  }));\n};\n/** @private */\n\n\nConnection.prototype._retrieveMany = function (type, ids, options) {\n  if (ids.length === 0) {\n    return Promise.resolve([]);\n  }\n\n  var url = [this._baseUrl(), \"composite\", \"sobjects\", type].join('/');\n  var self = this;\n  return (options.fields ? Promise.resolve(options.fields) : new Promise(function (resolve, reject) {\n    self.describe$(type, function (err, so) {\n      if (err) {\n        reject(err);\n      } else {\n        var fields = so.fields.map(function (field) {\n          return field.name;\n        });\n        resolve(fields);\n      }\n    });\n  })).then(function (fields) {\n    return self.request({\n      method: 'POST',\n      url: url,\n      body: JSON.stringify({\n        ids: ids,\n        fields: fields\n      }),\n      headers: _.defaults(options.headers || {}, {\n        \"Content-Type\": \"application/json\"\n      })\n    });\n  });\n};\n/**\n * @typedef RecordResult\n * @prop {Boolean} success - The result is succeessful or not\n * @prop {String} [id] - Record ID\n * @prop {Array.<Object>} [errors] - Errors (available when success = false)\n */\n\n/** @private */\n\n\nConnection.prototype._toRecordResult = function (id, err) {\n  var error = {\n    statusCode: err.errorCode,\n    message: err.message\n  };\n\n  if (err.content) {\n    error.content = err.content;\n  } // preserve External id duplication message\n\n\n  if (err.fields) {\n    error.fields = err.fields;\n  } // preserve DML exception occurred fields\n\n\n  var result = {\n    success: false,\n    errors: [error]\n  };\n\n  if (id) {\n    result.id = id;\n  }\n\n  return result;\n};\n/**\n * Synonym of Connection#create()\n *\n * @method Connection#insert\n * @param {String} type - SObject Type\n * @param {Object|Array.<Object>} records - A record or array of records to create\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Create records\n *\n * @method Connection#create\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n\nConnection.prototype.insert = Connection.prototype.create = function (type, records, options, callback) {\n  if (!_.isString(type)) {\n    // reverse order\n    callback = options;\n    options = records;\n    records = type;\n    type = null;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  return (_.isArray(records) ? this._supports('sobject-collection') ? // check whether SObject collection API is supported\n  this._createMany(type, records, options) : this._createParallel(type, records, options) : this._createSingle(type, records, options)).thenCall(callback);\n};\n/** @private */\n\n\nConnection.prototype._createSingle = function (type, record, options) {\n  var sobjectType = type || record.attributes && record.attributes.type || record.type;\n\n  if (!sobjectType) {\n    return Promise.reject(new Error('No SObject Type defined in record'));\n  }\n\n  record = _.clone(record);\n  delete record.Id;\n  delete record.type;\n  delete record.attributes;\n  var url = [this._baseUrl(), \"sobjects\", sobjectType].join('/');\n  return this.request({\n    method: 'POST',\n    url: url,\n    body: JSON.stringify(record),\n    headers: _.defaults(options.headers || {}, {\n      \"Content-Type\": \"application/json\"\n    })\n  });\n};\n/** @private */\n\n\nConnection.prototype._createParallel = function (type, records, options) {\n  if (records.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\n  }\n\n  var self = this;\n  return Promise.all(records.map(function (record) {\n    return self._createSingle(type, record, options).catch(function (err) {\n      // be aware that allOrNone in parallel mode will not revert the other successful requests\n      // it only raises error when met at least one failed request.\n      if (options.allOrNone || !err.errorCode) {\n        throw err;\n      }\n\n      return this._toRecordResult(null, err);\n    });\n  }));\n};\n/** @private */\n\n\nConnection.prototype._createMany = function (type, records, options) {\n  if (records.length === 0) {\n    return Promise.resolve([]);\n  }\n\n  if (records.length > MAX_DML_COUNT && options.allowRecursive) {\n    var self = this;\n    return self._createMany(type, records.slice(0, MAX_DML_COUNT), options).then(function (rets1) {\n      return self._createMany(type, records.slice(MAX_DML_COUNT), options).then(function (rets2) {\n        return rets1.concat(rets2);\n      });\n    });\n  }\n\n  records = _.map(records, function (record) {\n    var sobjectType = type || record.attributes && record.attributes.type || record.type;\n\n    if (!sobjectType) {\n      return Promise.reject(new Error('No SObject Type defined in record'));\n    }\n\n    record = _.clone(record);\n    delete record.Id;\n    delete record.type;\n    record.attributes = {\n      type: sobjectType\n    };\n    return record;\n  });\n  var url = [this._baseUrl(), \"composite\", \"sobjects\"].join('/');\n  return this.request({\n    method: 'POST',\n    url: url,\n    body: JSON.stringify({\n      allOrNone: options.allOrNone || false,\n      records: records\n    }),\n    headers: _.defaults(options.headers || {}, {\n      \"Content-Type\": \"application/json\"\n    })\n  });\n};\n/**\n * Update records\n *\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n\nConnection.prototype.update = function (type, records, options, callback) {\n  if (!_.isString(type)) {\n    // reverse order\n    callback = options;\n    options = records;\n    records = type;\n    type = null;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  return (_.isArray(records) ? this._supports('sobject-collection') ? // check whether SObject collection API is supported\n  this._updateMany(type, records, options) : this._updateParallel(type, records, options) : this._updateSingle(type, records, options)).thenCall(callback);\n};\n/** @private */\n\n\nConnection.prototype._updateSingle = function (type, record, options) {\n  var id = record.Id;\n\n  if (!id) {\n    return Promise.reject(new Error('Record id is not found in record.'));\n  }\n\n  var sobjectType = type || record.attributes && record.attributes.type || record.type;\n\n  if (!sobjectType) {\n    return Promise.reject(new Error('No SObject Type defined in record'));\n  }\n\n  record = _.clone(record);\n  delete record.Id;\n  delete record.type;\n  delete record.attributes;\n  var url = [this._baseUrl(), \"sobjects\", sobjectType, id].join('/');\n  return this.request({\n    method: 'PATCH',\n    url: url,\n    body: JSON.stringify(record),\n    headers: _.defaults(options.headers || {}, {\n      \"Content-Type\": \"application/json\"\n    })\n  }, {\n    noContentResponse: {\n      id: id,\n      success: true,\n      errors: []\n    }\n  });\n};\n/** @private */\n\n\nConnection.prototype._updateParallel = function (type, records, options) {\n  if (records.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\n  }\n\n  var self = this;\n  return Promise.all(records.map(function (record) {\n    return self._updateSingle(type, record, options).catch(function (err) {\n      // be aware that allOrNone in parallel mode will not revert the other successful requests\n      // it only raises error when met at least one failed request.\n      if (options.allOrNone || !err.errorCode) {\n        throw err;\n      }\n\n      return this._toRecordResult(record.Id, err);\n    });\n  }));\n};\n/** @private */\n\n\nConnection.prototype._updateMany = function (type, records, options) {\n  if (records.length === 0) {\n    return Promise.resolve([]);\n  }\n\n  if (records.length > MAX_DML_COUNT && options.allowRecursive) {\n    var self = this;\n    return self._updateMany(type, records.slice(0, MAX_DML_COUNT), options).then(function (rets1) {\n      return self._updateMany(type, records.slice(MAX_DML_COUNT), options).then(function (rets2) {\n        return rets1.concat(rets2);\n      });\n    });\n  }\n\n  records = _.map(records, function (record) {\n    var id = record.Id;\n\n    if (!id) {\n      throw new Error('Record id is not found in record.');\n    }\n\n    var sobjectType = type || record.attributes && record.attributes.type || record.type;\n\n    if (!sobjectType) {\n      throw new Error('No SObject Type defined in record');\n    }\n\n    record = _.clone(record);\n    delete record.Id;\n    record.id = id;\n    delete record.type;\n    record.attributes = {\n      type: sobjectType\n    };\n    return record;\n  });\n  var url = [this._baseUrl(), \"composite\", \"sobjects\"].join('/');\n  return this.request({\n    method: 'PATCH',\n    url: url,\n    body: JSON.stringify({\n      allOrNone: options.allOrNone || false,\n      records: records\n    }),\n    headers: _.defaults(options.headers || {}, {\n      \"Content-Type\": \"application/json\"\n    })\n  });\n};\n/**\n * Upsert records\n *\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n\nConnection.prototype.upsert = function (type, records, extIdField, options, callback) {\n  // You can omit \"type\" argument, when the record includes type information.\n  if (!_.isString(type)) {\n    // reverse order\n    callback = options;\n    options = extIdField;\n    extIdField = records;\n    records = type;\n    type = null;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var self = this;\n\n  var isArray = _.isArray(records);\n\n  records = isArray ? records : [records];\n\n  if (records.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\")).thenCall(callback);\n  }\n\n  return Promise.all(_.map(records, function (record) {\n    var sobjectType = type || record.attributes && record.attributes.type || record.type;\n    var extId = record[extIdField];\n    record = _.clone(record);\n    delete record[extIdField];\n    delete record.type;\n    delete record.attributes;\n    var url = [self._baseUrl(), \"sobjects\", sobjectType, extIdField, extId].join('/');\n    return self.request({\n      method: 'PATCH',\n      url: url,\n      body: JSON.stringify(record),\n      headers: _.defaults(options.headers || {}, {\n        \"Content-Type\": \"application/json\"\n      })\n    }, {\n      noContentResponse: {\n        success: true,\n        errors: []\n      }\n    }).catch(function (err) {\n      // be aware that `allOrNone` option in upsert method will not revert the other successful requests\n      // it only raises error when met at least one failed request.\n      if (!isArray || options.allOrNone || !err.errorCode) {\n        throw err;\n      }\n\n      return self._toRecordResult(null, err);\n    });\n  })).then(function (results) {\n    return !isArray && _.isArray(results) ? results[0] : results;\n  }).thenCall(callback);\n};\n/**\n * Synonym of Connection#destroy()\n *\n * @method Connection#delete\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Synonym of Connection#destroy()\n *\n * @method Connection#del\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n/**\n * Delete records\n *\n * @method Connection#destroy\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n\n\nConnection.prototype[\"delete\"] = Connection.prototype.del = Connection.prototype.destroy = function (type, ids, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  return (_.isArray(ids) ? this._supports('sobject-collection') ? // check whether SObject collection API is supported\n  this._destroyMany(type, ids, options) : this._destroyParallel(type, ids, options) : this._destroySingle(type, ids, options)).thenCall(callback);\n};\n/** @private */\n\n\nConnection.prototype._destroySingle = function (type, id, options) {\n  var url = [this._baseUrl(), \"sobjects\", type, id].join('/');\n  return this.request({\n    method: 'DELETE',\n    url: url,\n    headers: options.headers || null\n  }, {\n    noContentResponse: {\n      id: id,\n      success: true,\n      errors: []\n    }\n  });\n};\n/** @private */\n\n\nConnection.prototype._destroyParallel = function (type, ids, options) {\n  if (ids.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\n  }\n\n  var self = this;\n  return Promise.all(ids.map(function (id) {\n    return self._destroySingle(type, id, options).catch(function (err) {\n      // be aware that `allOrNone` option in parallel mode will not revert the other successful requests\n      // it only raises error when met at least one failed request.\n      if (options.allOrNone || !err.errorCode) {\n        throw err;\n      }\n\n      return this._toRecordResult(id, err);\n    });\n  }));\n};\n/** @private */\n\n\nConnection.prototype._destroyMany = function (type, ids, options) {\n  if (ids.length === 0) {\n    return Promise.resolve([]);\n  }\n\n  if (ids.length > MAX_DML_COUNT && options.allowRecursive) {\n    var self = this;\n    return self._destroyMany(type, ids.slice(0, MAX_DML_COUNT), options).then(function (rets1) {\n      return self._destroyMany(type, ids.slice(MAX_DML_COUNT), options).then(function (rets2) {\n        return rets1.concat(rets2);\n      });\n    });\n  }\n\n  var url = [this._baseUrl(), \"composite\", \"sobjects?ids=\"].join('/') + ids.join(',');\n\n  if (options.allOrNone) {\n    url += '&allOrNone=true';\n  }\n\n  return this.request({\n    method: 'DELETE',\n    url: url,\n    headers: options.headers || null\n  });\n};\n/**\n * Execute search by SOSL\n *\n * @param {String} sosl - SOSL string\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>>}\n */\n\n\nConnection.prototype.search = function (sosl, callback) {\n  var url = this._baseUrl() + \"/search?q=\" + encodeURIComponent(sosl);\n  return this.request(url).thenCall(callback);\n};\n/**\n * Result returned by describeSObject call\n *\n * @typedef {Object} DescribeSObjectResult\n */\n\n/**\n * Synonym of Connection#describe()\n *\n * @method Connection#describeSObject\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n/**\n * Describe SObject metadata\n *\n * @method Connection#describe\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n\n\nConnection.prototype.describe = Connection.prototype.describeSObject = function (type, callback) {\n  var url = [this._baseUrl(), \"sobjects\", type, \"describe\"].join('/');\n  return this.request(url).thenCall(callback);\n};\n/**\n * Result returned by describeGlobal call\n *\n * @typedef {Object} DescribeGlobalResult\n */\n\n/**\n * Describe global SObjects\n *\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\n * @returns {Promise.<DescribeGlobalResult>}\n */\n\n\nConnection.prototype.describeGlobal = function (callback) {\n  var url = this._baseUrl() + \"/sobjects\";\n  return this.request(url).thenCall(callback);\n};\n/**\n * Get SObject instance\n *\n * @param {String} type - SObject Type\n * @returns {SObject}\n */\n\n\nConnection.prototype.sobject = function (type) {\n  this.sobjects = this.sobjects || {};\n  var sobject = this.sobjects[type] = this.sobjects[type] || new SObject(this, type);\n  return sobject;\n};\n/**\n * Get identity information of current user\n *\n * @param {Object} [options] - Identity call options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in identity request\n * @param {Callback.<IdentityInfo>} [callback] - Callback function\n * @returns {Promise.<IdentityInfo>}\n */\n\n\nConnection.prototype.identity = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var self = this;\n  var idUrl = this.userInfo && this.userInfo.url;\n  return Promise.resolve(idUrl ? {\n    identity: idUrl\n  } : this.request({\n    method: 'GET',\n    url: this._baseUrl(),\n    headers: options.headers\n  })).then(function (res) {\n    var url = res.identity;\n    return self.request({\n      method: 'GET',\n      url: url\n    });\n  }).then(function (res) {\n    self.userInfo = {\n      id: res.user_id,\n      organizationId: res.organization_id,\n      url: res.id\n    };\n    return res;\n  }).thenCall(callback);\n};\n/**\n * @typedef UserInfo\n * @prop {String} id - User ID\n * @prop {String} organizationId - Organization ID\n * @prop {String} url - Identity URL of the user\n */\n\n/**\n * Authorize (using oauth2 web server flow)\n *\n * @param {String} code - Authorization code\n * @param {Object} [params] - Optional parameters to send in token retrieval\n * @param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)\n * @param {Callback.<UserInfo>} [callback] - Callback function\n * @returns {Promise.<UserInfo>}\n */\n\n\nConnection.prototype.authorize = function (code, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n\n  var self = this;\n  var logger = this._logger;\n  return this.oauth2.requestToken(code, params).then(function (res) {\n    var userInfo = parseIdUrl(res.id);\n    self.initialize({\n      instanceUrl: res.instance_url,\n      accessToken: res.access_token,\n      refreshToken: res.refresh_token,\n      userInfo: userInfo\n    });\n    logger.debug(\"<login> completed. user id = \" + userInfo.id + \", org id = \" + userInfo.organizationId);\n    return userInfo;\n  }).thenCall(callback);\n};\n/**\n * Login to Salesforce\n *\n * @param {String} username - Salesforce username\n * @param {String} password - Salesforce password (and security token, if required)\n * @param {Callback.<UserInfo>} [callback] - Callback function\n * @returns {Promise.<UserInfo>}\n */\n\n\nConnection.prototype.login = function (username, password, callback) {\n  // register refreshDelegate for session expiration\n  this._refreshDelegate = new HttpApi.SessionRefreshDelegate(this, createUsernamePasswordRefreshFn(username, password));\n\n  if (this.oauth2 && this.oauth2.clientId && this.oauth2.clientSecret) {\n    return this.loginByOAuth2(username, password, callback);\n  } else {\n    return this.loginBySoap(username, password, callback);\n  }\n};\n/** @private **/\n\n\nfunction createUsernamePasswordRefreshFn(username, password) {\n  return function (conn, callback) {\n    conn.login(username, password, function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, conn.accessToken);\n    });\n  };\n}\n/**\n * Login by OAuth2 username & password flow\n *\n * @param {String} username - Salesforce username\n * @param {String} password - Salesforce password (and security token, if required)\n * @param {Callback.<UserInfo>} [callback] - Callback function\n * @returns {Promise.<UserInfo>}\n */\n\n\nConnection.prototype.loginByOAuth2 = function (username, password, callback) {\n  var self = this;\n  var logger = this._logger;\n  return this.oauth2.authenticate(username, password).then(function (res) {\n    var userInfo = parseIdUrl(res.id);\n    self.initialize({\n      instanceUrl: res.instance_url,\n      accessToken: res.access_token,\n      userInfo: userInfo\n    });\n    logger.debug(\"<login> completed. user id = \" + userInfo.id + \", org id = \" + userInfo.organizationId);\n    return userInfo;\n  }).thenCall(callback);\n};\n/**\n * @private\n */\n\n\nfunction esc(str) {\n  return str && String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n/**\n * Login by SOAP web service API\n *\n * @param {String} username - Salesforce username\n * @param {String} password - Salesforce password (and security token, if required)\n * @param {Callback.<UserInfo>} [callback] - Callback function\n * @returns {Promise.<UserInfo>}\n */\n\n\nConnection.prototype.loginBySoap = function (username, password, callback) {\n  var self = this;\n  var logger = this._logger;\n  var body = ['<se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\">', '<se:Header/>', '<se:Body>', '<login xmlns=\"urn:partner.soap.sforce.com\">', '<username>' + esc(username) + '</username>', '<password>' + esc(password) + '</password>', '</login>', '</se:Body>', '</se:Envelope>'].join('');\n  var soapLoginEndpoint = [this.loginUrl, \"services/Soap/u\", this.version].join('/');\n  return this._transport.httpRequest({\n    method: 'POST',\n    url: soapLoginEndpoint,\n    body: body,\n    headers: {\n      \"Content-Type\": \"text/xml\",\n      \"SOAPAction\": '\"\"'\n    }\n  }).then(function (response) {\n    var m;\n\n    if (response.statusCode >= 400) {\n      m = response.body.match(/<faultstring>([^<]+)<\\/faultstring>/);\n      var faultstring = m && m[1];\n      throw new Error(faultstring || response.body);\n    }\n\n    logger.debug(\"SOAP response = \" + response.body);\n    m = response.body.match(/<serverUrl>([^<]+)<\\/serverUrl>/);\n    var serverUrl = m && m[1];\n    m = response.body.match(/<sessionId>([^<]+)<\\/sessionId>/);\n    var sessionId = m && m[1];\n    m = response.body.match(/<userId>([^<]+)<\\/userId>/);\n    var userId = m && m[1];\n    m = response.body.match(/<organizationId>([^<]+)<\\/organizationId>/);\n    var orgId = m && m[1];\n    var idUrl = soapLoginEndpoint.split('/').slice(0, 3).join('/');\n    idUrl += \"/id/\" + orgId + \"/\" + userId;\n    var userInfo = {\n      id: userId,\n      organizationId: orgId,\n      url: idUrl\n    };\n    self.initialize({\n      serverUrl: serverUrl.split('/').slice(0, 3).join('/'),\n      sessionId: sessionId,\n      userInfo: userInfo\n    });\n    logger.debug(\"<login> completed. user id = \" + userId + \", org id = \" + orgId);\n    return userInfo;\n  }).thenCall(callback);\n};\n/**\n * Logout the current session \n *\n * @param {Boolean} [revoke] - Revokes API Access if set to true\n * @param {Callback.<undefined>} [callback] - Callback function\n * @returns {Promise.<undefined>}\n */\n\n\nConnection.prototype.logout = function (revoke, callback) {\n  if (typeof revoke === 'function') {\n    callback = revoke;\n    revoke = false;\n  }\n\n  if (this._sessionType === \"oauth2\") {\n    return this.logoutByOAuth2(revoke, callback);\n  } else {\n    return this.logoutBySoap(revoke, callback);\n  }\n};\n/**\n * Logout the current session by revoking access token via OAuth2 session revoke\n *\n * @param {Boolean} [revoke] - Revokes API Access if set to true\n * @param {Callback.<undefined>} [callback] - Callback function\n * @returns {Promise.<undefined>}\n */\n\n\nConnection.prototype.logoutByOAuth2 = function (revoke, callback) {\n  if (typeof revoke === 'function') {\n    callback = revoke;\n    revoke = false;\n  }\n\n  var self = this;\n  var logger = this._logger;\n  return this.oauth2.revokeToken(revoke ? this.refreshToken : this.accessToken).then(function () {\n    // Destroy the session bound to this connection\n    self.accessToken = null;\n    self.userInfo = null;\n    self.refreshToken = null;\n    self.instanceUrl = null;\n    self.cache.clear(); // nothing useful returned by logout API, just return\n\n    return undefined;\n  }).thenCall(callback);\n};\n/**\n * Logout the session by using SOAP web service API\n *\n * @param {Boolean} [revoke] - Revokes API Access if set to true\n * @param {Callback.<undefined>} [callback] - Callback function\n * @returns {Promise.<undefined>}\n */\n\n\nConnection.prototype.logoutBySoap = function (revoke, callback) {\n  if (typeof revoke === 'function') {\n    callback = revoke;\n    revoke = false;\n  }\n\n  var self = this;\n  var logger = this._logger;\n  var body = ['<se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\">', '<se:Header>', '<SessionHeader xmlns=\"urn:partner.soap.sforce.com\">', '<sessionId>' + esc(revoke ? this.refreshToken : this.accessToken) + '</sessionId>', '</SessionHeader>', '</se:Header>', '<se:Body>', '<logout xmlns=\"urn:partner.soap.sforce.com\"/>', '</se:Body>', '</se:Envelope>'].join('');\n  return this._transport.httpRequest({\n    method: 'POST',\n    url: [this.instanceUrl, \"services/Soap/u\", this.version].join('/'),\n    body: body,\n    headers: {\n      \"Content-Type\": \"text/xml\",\n      \"SOAPAction\": '\"\"'\n    }\n  }).then(function (response) {\n    logger.debug(\"SOAP statusCode = \" + response.statusCode + \", response = \" + response.body);\n\n    if (response.statusCode >= 400) {\n      var m = response.body.match(/<faultstring>([^<]+)<\\/faultstring>/);\n      var faultstring = m && m[1];\n      throw new Error(faultstring || response.body);\n    } // Destroy the session bound to this connection\n\n\n    self.accessToken = null;\n    self.userInfo = null;\n    self.refreshToken = null;\n    self.instanceUrl = null;\n    self.cache.clear(); // nothing useful returned by logout API, just return\n\n    return undefined;\n  }).thenCall(callback);\n};\n/**\n * List recently viewed records\n *\n * @param {String} [type] - SObject type\n * @param {Number} [limit] - Limit num to fetch\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>>}\n */\n\n\nConnection.prototype.recent = function (type, limit, callback) {\n  if (!_.isString(type)) {\n    callback = limit;\n    limit = type;\n    type = undefined;\n  }\n\n  if (!_.isNumber(limit)) {\n    callback = limit;\n    limit = undefined;\n  }\n\n  var url;\n\n  if (type) {\n    url = [this._baseUrl(), \"sobjects\", type].join('/');\n    return this.request(url).then(function (res) {\n      return limit ? res.recentItems.slice(0, limit) : res.recentItems;\n    }).thenCall(callback);\n  } else {\n    url = this._baseUrl() + \"/recent\";\n\n    if (limit) {\n      url += \"?limit=\" + limit;\n    }\n\n    return this.request(url).thenCall(callback);\n  }\n};\n/**\n * @typedef {Object} UpdatedRecordsInfo\n * @prop {String} latestDateCovered - The timestamp of the last date covered.\n * @prop {Array.<String>} ids - Updated record IDs.\n */\n\n/**\n * Retrieve updated records\n *\n * @param {String} type - SObject Type\n * @param {String|Date} start - start date or string representing the start of the interval\n * @param {String|Date} end - start date or string representing the end of the interval must be > start\n * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function\n * @returns {Promise.<UpdatedRecordsInfo>}\n */\n\n\nConnection.prototype.updated = function (type, start, end, callback) {\n  var url = [this._baseUrl(), \"sobjects\", type, \"updated\"].join('/');\n\n  if (typeof start === 'string') {\n    start = new Date(start);\n  }\n\n  if (start instanceof Date) {\n    start = formatDate(start);\n  }\n\n  if (start) {\n    url += \"?start=\" + encodeURIComponent(start);\n  }\n\n  if (typeof end === 'string') {\n    end = new Date(end);\n  }\n\n  if (end instanceof Date) {\n    end = formatDate(end);\n  }\n\n  if (end) {\n    url += \"&end=\" + encodeURIComponent(end);\n  }\n\n  return this.request(url).thenCall(callback);\n};\n/**\n * @typedef {Object} DeletedRecordsInfo\n * @prop {String} earliestDateAvailable - The timestamp of the earliest date available\n * @prop {String} latestDateCovered - The timestamp of the last date covered\n * @prop {Array.<Object>} deletedRecords - Updated records\n * @prop {String} deletedRecords.id - Record ID\n * @prop {String} deletedRecords.deletedDate - The timestamp when this record was deleted\n */\n\n/**\n * Retrieve deleted records\n *\n * @param {String} type - SObject Type\n * @param {String|Date} start - start date or string representing the start of the interval\n * @param {String|Date} end - start date or string representing the end of the interval\n * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function\n * @returns {Promise.<DeletedRecordsInfo>}\n */\n\n\nConnection.prototype.deleted = function (type, start, end, callback) {\n  var url = [this._baseUrl(), \"sobjects\", type, \"deleted\"].join('/');\n\n  if (typeof start === 'string') {\n    start = new Date(start);\n  }\n\n  if (start instanceof Date) {\n    start = formatDate(start);\n  }\n\n  if (start) {\n    url += \"?start=\" + encodeURIComponent(start);\n  }\n\n  if (typeof end === 'string') {\n    end = new Date(end);\n  }\n\n  if (end instanceof Date) {\n    end = formatDate(end);\n  }\n\n  if (end) {\n    url += \"&end=\" + encodeURIComponent(end);\n  }\n\n  return this.request(url).thenCall(callback);\n};\n/**\n * @typedef {Object} TabsInfo - See the API document for detail structure\n */\n\n/**\n * Returns a list of all tabs\n *\n * @param {Callback.<TabsInfo>} [callback] - Callback function\n * @returns {Promise.<TabsInfo>}\n */\n\n\nConnection.prototype.tabs = function (callback) {\n  var url = [this._baseUrl(), \"tabs\"].join('/');\n  return this.request(url).thenCall(callback);\n};\n/**\n * @typedef {Object} LimitsInfo - See the API document for detail structure\n */\n\n/**\n * Returns curren system limit in the organization\n *\n * @param {Callback.<LimitsInfo>} [callback] - Callback function\n * @returns {Promise.<LimitsInfo>}\n */\n\n\nConnection.prototype.limits = function (callback) {\n  var url = [this._baseUrl(), \"limits\"].join('/');\n  return this.request(url).thenCall(callback);\n};\n/**\n * @typedef {Object} ThemeInfo - See the API document for detail structure\n */\n\n/**\n * Returns a theme info\n *\n * @param {Callback.<ThemeInfo>} [callback] - Callback function\n * @returns {Promise.<ThemeInfo>}\n */\n\n\nConnection.prototype.theme = function (callback) {\n  var url = [this._baseUrl(), \"theme\"].join('/');\n  return this.request(url).thenCall(callback);\n};\n/**\n * Returns all registered global quick actions\n *\n * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}\n */\n\n\nConnection.prototype.quickActions = function (callback) {\n  return this.request(\"/quickActions\").thenCall(callback);\n};\n/**\n * Get reference for specified global quick aciton\n *\n * @param {String} actionName - Name of the global quick action\n * @returns {QuickAction}\n */\n\n\nConnection.prototype.quickAction = function (actionName) {\n  return new QuickAction(this, \"/quickActions/\" + actionName);\n};","map":{"version":3,"sources":["/Users/gcarminati/Desktop/OmniStudio/OmniProxy/react-express-proxy-sample/node_modules/jsforce/lib/connection.js"],"names":["events","require","inherits","_","Promise","Logger","OAuth2","Query","SObject","QuickAction","HttpApi","Transport","Process","Cache","defaults","loginUrl","instanceUrl","version","MAX_DML_COUNT","Connection","module","exports","options","_logger","logLevel","oauth2","clientId","clientSecret","redirectUri","proxyUrl","httpProxy","maxRequest","_transport","ProxyTransport","HttpProxyTransport","callOptions","jsforce","emit","process","cache","self","refreshFn","oauthRefreshFn","_refreshDelegate","SessionRefreshDelegate","cacheOptions","key","type","describe$","makeCacheable","describe","makeResponseCacheable","describeSObject$","describeSObject","describeGlobal$","describeGlobal","initialize","EventEmitter","prototype","serverUrl","split","slice","join","accessToken","sessionId","refreshToken","Error","signedRequest","parseSignedRequest","client","oauthToken","CanvasTransport","supported","userInfo","limitInfo","sobjects","clear","get","removeAllListeners","on","bind","res","result","types","map","so","name","forEach","sobject","tooling","_sessionType","conn","callback","err","parseIdUrl","id","instance_url","access_token","sr","isString","JSON","parse","msg","pop","json","Buffer","from","toString","_baseUrl","_normalizeUrl","url","indexOf","request","method","httpApi","response","headers","apiUsage","match","used","parseInt","limit","thenCall","requestGet","requestPost","body","stringify","requestPut","requestPatch","requestDelete","formatDate","date","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","idUrl","idUrls","userId","orgId","organizationId","query","soql","undefined","run","queryAll","scanAll","queryMore","locator","_ensureVersion","majorVersion","versions","_supports","feature","retrieve","ids","isArray","_retrieveMany","_retrieveParallel","_retrieveSingle","reject","fields","length","all","catch","allOrNone","errorCode","resolve","field","then","_toRecordResult","error","statusCode","message","content","success","errors","insert","create","records","_createMany","_createParallel","_createSingle","record","sobjectType","attributes","clone","Id","allowRecursive","rets1","rets2","concat","update","_updateMany","_updateParallel","_updateSingle","noContentResponse","upsert","extIdField","extId","results","del","destroy","_destroyMany","_destroyParallel","_destroySingle","search","sosl","encodeURIComponent","identity","user_id","organization_id","authorize","code","params","logger","requestToken","refresh_token","debug","login","username","password","createUsernamePasswordRefreshFn","loginByOAuth2","loginBySoap","authenticate","esc","str","String","replace","soapLoginEndpoint","httpRequest","m","faultstring","logout","revoke","logoutByOAuth2","logoutBySoap","revokeToken","recent","isNumber","recentItems","updated","start","end","Date","deleted","tabs","limits","theme","quickActions","quickAction","actionName"],"mappings":"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","sourcesContent":["/*global Buffer */\n/**\n * @file Connection class to keep the API session information and manage requests\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar events  = require('events'),\n    inherits = require('inherits'),\n    _       = require('lodash/core'),\n    Promise = require('./promise'),\n    Logger  = require('./logger'),\n    OAuth2  = require('./oauth2'),\n    Query   = require('./query'),\n    SObject = require('./sobject'),\n    QuickAction = require('./quick-action'),\n    HttpApi = require('./http-api'),\n    Transport = require('./transport'),\n    Process = require('./process'),\n    Cache   = require('./cache');\n\nvar defaults = {\n  loginUrl: \"https://login.salesforce.com\",\n  instanceUrl: \"\",\n  version: \"42.0\"\n};\n\n/*\n * Constant of maximum records num in DML operation (update/delete)\n */\nvar MAX_DML_COUNT = 200;\n\n\n/**\n * Connection class to keep the API session information and manage requests\n *\n * @constructor\n * @extends events.EventEmitter\n * @param {Object} [options] - Connection options\n * @param {OAuth2|Object} [options.oauth2] - OAuth2 instance or options to be passed to OAuth2 constructor\n * @param {String} [options.logLevel] - Output logging level (DEBUG|INFO|WARN|ERROR|FATAL)\n * @param {String} [options.version] - Salesforce API Version (without \"v\" prefix)\n * @param {Number} [options.maxRequest] - Max number of requests allowed in parallel call\n * @param {String} [options.loginUrl] - Salesforce Login Server URL (e.g. https://login.salesforce.com/)\n * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)\n * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)\n * @param {String} [options.accessToken] - Salesforce OAuth2 access token\n * @param {String} [options.sessionId] - Salesforce session ID\n * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token\n * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)\n * @param {String} [options.proxyUrl] - Cross-domain proxy server URL, used in browser client, non Visualforce app.\n * @param {String} [options.httpProxy] - URL of HTTP proxy server, used in server client.\n * @param {Object} [options.callOptions] - Call options used in each SOAP/REST API request. See manual.\n */\nvar Connection = module.exports = function(options) {\n  options = options || {};\n\n  this._logger = new Logger(options.logLevel);\n\n  var oauth2 = options.oauth2 || {\n    loginUrl : options.loginUrl,\n    clientId : options.clientId,\n    clientSecret : options.clientSecret,\n    redirectUri : options.redirectUri,\n    proxyUrl: options.proxyUrl,\n    httpProxy: options.httpProxy\n  };\n\n  /**\n   * OAuth2 object\n   * @member {OAuth2} Connection#oauth2\n   */\n  this.oauth2 = oauth2 = oauth2 instanceof OAuth2 ? oauth2 : new OAuth2(oauth2);\n\n  this.loginUrl = options.loginUrl || oauth2.loginUrl || defaults.loginUrl;\n  this.version = options.version || defaults.version;\n  this.maxRequest = options.maxRequest || this.maxRequest || 10;\n\n  /** @private */\n  if (options.proxyUrl) {\n    this._transport = new Transport.ProxyTransport(options.proxyUrl);\n  } else if (options.httpProxy) {\n    this._transport = new Transport.HttpProxyTransport(options.httpProxy);\n  } else {\n    this._transport = new Transport();\n  }\n\n  this.callOptions = options.callOptions;\n\n  /*\n   * Fire connection:new event to notify jsforce plugin modules\n   */\n  var jsforce = require('./core');\n  jsforce.emit('connection:new', this);\n\n  /**\n   * Streaming API object\n   * @member {Streaming} Connection#streaming\n   */\n  // this.streaming = new Streaming(this);\n  /**\n   * Bulk API object\n   * @member {Bulk} Connection#bulk\n   */\n  // this.bulk = new Bulk(this);\n  /**\n   * Tooling API object\n   * @member {Tooling} Connection#tooling\n   */\n  // this.tooling = new Tooling(this);\n  /**\n   * Analytics API object\n   * @member {Analytics} Connection#analytics\n   */\n  // this.analytics = new Analytics(this);\n  /**\n   * Chatter API object\n   * @member {Chatter} Connection#chatter\n   */\n  // this.chatter = new Chatter(this);\n  /**\n   * Metadata API object\n   * @member {Metadata} Connection#metadata\n   */\n  // this.metadata = new Metadata(this);\n\n  /**\n   * SOAP API object\n   * @member {SoapApi} Connection#soap\n   */\n  // this.soap = new SoapApi(this);\n\n  /**\n   * Apex REST API object\n   * @member {Apex} Connection#apex\n   */\n  // this.apex = new Apex(this);\n\n  /**\n   * @member {Process} Connection#process\n   */\n  this.process = new Process(this);\n\n  /**\n   * Cache object for result\n   * @member {Cache} Connection#cache\n   */\n  this.cache = new Cache();\n\n  // Allow to delegate connection refresh to outer function\n  var self = this;\n  var refreshFn = options.refreshFn;\n  if (!refreshFn && this.oauth2.clientId) {\n    refreshFn = oauthRefreshFn;\n  }\n  if (refreshFn) {\n    this._refreshDelegate = new HttpApi.SessionRefreshDelegate(this, refreshFn);\n  }\n\n  var cacheOptions = {\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\n  };\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\n  this.describeSObject$ = this.describe$;\n  this.describeSObject = this.describe;\n\n  cacheOptions = { key: 'describeGlobal' };\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\n\n  this.initialize(options);\n};\n\ninherits(Connection, events.EventEmitter);\n\n/**\n * Initialize connection.\n *\n * @protected\n * @param {Object} options - Initialization options\n * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)\n * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)\n * @param {String} [options.accessToken] - Salesforce OAuth2 access token\n * @param {String} [options.sessionId] - Salesforce session ID\n * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token\n * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)\n * @param {UserInfo} [options.userInfo] - Logged in user information\n */\nConnection.prototype.initialize = function(options) {\n  if (!options.instanceUrl && options.serverUrl) {\n    options.instanceUrl = options.serverUrl.split('/').slice(0, 3).join('/');\n  }\n  this.instanceUrl = options.instanceUrl || options.serverUrl || this.instanceUrl || defaults.instanceUrl;\n\n  this.accessToken = options.sessionId || options.accessToken || this.accessToken;\n  this.refreshToken = options.refreshToken || this.refreshToken;\n  if (this.refreshToken && !this._refreshDelegate) {\n    throw new Error(\"Refresh token is specified without oauth2 client information or refresh function\");\n  }\n\n  this.signedRequest = options.signedRequest && parseSignedRequest(options.signedRequest);\n  if (this.signedRequest) {\n    this.accessToken = this.signedRequest.client.oauthToken;\n    if (Transport.CanvasTransport.supported) {\n      this._transport = new Transport.CanvasTransport(this.signedRequest);\n    }\n  }\n\n  if (options.userInfo) {\n    this.userInfo = options.userInfo;\n  }\n\n  this.limitInfo = {};\n\n  this.sobjects = {};\n  this.cache.clear();\n  this.cache.get('describeGlobal').removeAllListeners('value');\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\n    if (res.result) {\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\n      types.forEach(this.sobject, this);\n    }\n  }, this));\n\n  if (this.tooling) {\n    this.tooling.initialize();\n  }\n\n  this._sessionType = options.sessionId ? \"soap\" : \"oauth2\";\n\n};\n\n/** @private **/\nfunction oauthRefreshFn(conn, callback) {\n  conn.oauth2.refreshToken(conn.refreshToken, function(err, res) {\n    if (err) { return callback(err); }\n    var userInfo = parseIdUrl(res.id);\n    conn.initialize({\n      instanceUrl : res.instance_url,\n      accessToken : res.access_token,\n      userInfo : userInfo\n    });\n    callback(null, res.access_token, res);\n  });\n}\n\n/** @private **/\nfunction parseSignedRequest(sr) {\n  if (_.isString(sr)) {\n    if (sr[0] === '{') { // might be JSON\n      return JSON.parse(sr);\n    } else { // might be original base64-encoded signed request\n      var msg = sr.split('.').pop(); // retrieve latter part\n      var json = Buffer.from(msg, 'base64').toString('utf-8');\n      return JSON.parse(json);\n    }\n    return null;\n  }\n  return sr;\n}\n\n\n/** @private **/\nConnection.prototype._baseUrl = function() {\n  return [ this.instanceUrl, \"services/data\", \"v\" + this.version ].join('/');\n};\n\n/**\n * Convert path to absolute url\n * @private\n */\nConnection.prototype._normalizeUrl = function(url) {\n  if (url[0] === '/') {\n    if (url.indexOf('/services/') === 0) {\n      return this.instanceUrl + url;\n    } else {\n      return this._baseUrl() + url;\n    }\n  } else {\n    return url;\n  }\n};\n\n/**\n * Send REST API request with given HTTP request info, with connected session information.\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String|Object} request - HTTP request object or URL to GET request\n * @param {String} request.method - HTTP method URL to send HTTP request\n * @param {String} request.url - URL to send HTTP request\n * @param {Object} [request.headers] - HTTP request headers in hash object (key-value)\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nConnection.prototype.request = function(request, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  options = options || {};\n  var self = this;\n\n  // if request is simple string, regard it as url in GET method\n  if (_.isString(request)) {\n    request = { method: 'GET', url: request };\n  }\n  // if url is given in relative path, prepend base url or instance url before.\n  request.url = this._normalizeUrl(request.url);\n\n  var httpApi = new HttpApi(this, options);\n\n  // log api usage and its quota\n  httpApi.on('response', function(response) {\n    if (response.headers && response.headers[\"sforce-limit-info\"]) {\n      var apiUsage = response.headers[\"sforce-limit-info\"].match(/api\\-usage=(\\d+)\\/(\\d+)/);\n      if (apiUsage) {\n        self.limitInfo = {\n          apiUsage: {\n            used: parseInt(apiUsage[1], 10),\n            limit: parseInt(apiUsage[2], 10)\n          }\n        };\n      }\n    }\n  });\n  return httpApi.request(request).thenCall(callback);\n};\n\n/**\n * Send HTTP GET request\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP GET\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nConnection.prototype.requestGet = function(url, options, callback) {\n  var request = {\n    method: \"GET\",\n    url: url\n  };\n  return this.request(request, options, callback);\n};\n\n\n/**\n * Send HTTP POST request with JSON body, with connected session information\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP POST\n * @param {Object} body - Any JS object which can be serialized to JSON\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nConnection.prototype.requestPost = function(url, body, options, callback) {\n  var request = {\n    method: \"POST\",\n    url: url,\n    body: JSON.stringify(body),\n    headers: { \"content-type\": \"application/json\" }\n  };\n  return this.request(request, options, callback);\n};\n\n/**\n * Send HTTP PUT request with JSON body, with connected session information\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP PUT\n * @param {Object} body - Any JS object which can be serialized to JSON\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nConnection.prototype.requestPut = function(url, body, options, callback) {\n  var request = {\n    method: \"PUT\",\n    url: url,\n    body: JSON.stringify(body),\n    headers: { \"content-type\": \"application/json\" }\n  };\n  return this.request(request, options, callback);\n};\n\n/**\n * Send HTTP PATCH request with JSON body\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP PATCH\n * @param {Object} body - Any JS object which can be serialized to JSON\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nConnection.prototype.requestPatch = function(url, body, options, callback) {\n  var request = {\n    method: \"PATCH\",\n    url: url,\n    body: JSON.stringify(body),\n    headers: { \"content-type\": \"application/json\" }\n  };\n  return this.request(request, options, callback);\n};\n\n/**\n * Send HTTP DELETE request\n *\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\n * , or relative path from version root ('/sobjects/Account/describe').\n *\n * @param {String} url - Endpoint URL to request HTTP DELETE\n * @param {Object} [options] - HTTP API request options\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nConnection.prototype.requestDelete = function(url, options, callback) {\n  var request = {\n    method: \"DELETE\",\n    url: url\n  };\n  return this.request(request, options, callback);\n};\n\n\n/** @private */\nfunction formatDate(date) {\n  function pad(number) {\n    if (number < 10) {\n      return '0' + number;\n    }\n    return number;\n  }\n\n  return date.getUTCFullYear() +\n    '-' + pad(date.getUTCMonth() + 1) +\n    '-' + pad(date.getUTCDate()) +\n    'T' + pad(date.getUTCHours()) +\n    ':' + pad(date.getUTCMinutes()) +\n    ':' + pad(date.getUTCSeconds()) +\n    '+00:00';\n}\n\n\n/** @private **/\nfunction parseIdUrl(idUrl) {\n  var idUrls = idUrl.split(\"/\");\n  var userId = idUrls.pop(), orgId = idUrls.pop();\n  return {\n    id: userId,\n    organizationId: orgId,\n    url: idUrl\n  };\n}\n\n/**\n * @callback Callback\n * @type {Function}\n * @param {Error} err - Callback error\n * @param {T} response - Callback response\n * @template T\n */\n\n/**\n * @typedef {Object} QueryResult\n * @prop {Boolean} done - Flag if the query is fetched all records or not\n * @prop {String} [nextRecordsUrl] - URL locator for next record set, (available when done = false)\n * @prop {Number} totalSize - Total size for query\n * @prop {Array.<Record>} [records] - Array of records fetched\n */\n\n/**\n * Execute query by using SOQL\n *\n * @param {String} soql - SOQL string\n * @param {Object} [options] - Query options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\nConnection.prototype.query = function(soql, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var query = new Query(this, soql, options);\n  if (callback) {\n    query.run(callback);\n  }\n  return query;\n};\n\n/**\n * Execute query by using SOQL, including deleted records\n *\n * @param {String} soql - SOQL string\n * @param {Object} [options] - Query options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\nConnection.prototype.queryAll = function(soql, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var query = new Query(this, soql, options);\n  query.scanAll(true);\n  if (callback) {\n    query.run(callback);\n  }\n  return query;\n};\n\n/**\n * Query next record set by using query locator\n *\n * @param {String} locator - Next record set locator\n * @param {Object} [options] - Query options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\n * @param {Callback.<QueryResult>} [callback] - Callback function\n * @returns {Query.<QueryResult>}\n */\nConnection.prototype.queryMore = function(locator, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var query = new Query(this, { locator: locator }, options);\n  if (callback) {\n    query.run(callback);\n  }\n  return query;\n};\n\n/** @private */\nConnection.prototype._ensureVersion = function(majorVersion) {\n  var versions = this.version.split('.');\n  return parseInt(versions[0], 10) >= majorVersion;\n}\n\n/** @private */\nConnection.prototype._supports = function(feature) {\n  switch (feature) {\n    case 'sobject-collection':\n      return this._ensureVersion(42);\n    default:\n      return false;\n  }\n}\n\n/**\n * Retrieve specified records\n *\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\n * @param {Object} [options] - Options for rest api.\n * @param {Array.<String>} [options.fields] - Fetching field names in retrieving record\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\n * @returns {Promise.<Record|Array.<Record>>}\n */\nConnection.prototype.retrieve = function(type, ids, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  return (\n    _.isArray(ids) ?\n      (this._supports('sobject-collection') ? // check whether SObject collection API is supported\n        this._retrieveMany(type, ids, options) :\n        this._retrieveParallel(type, ids, options)) :\n      this._retrieveSingle(type, ids, options)\n  ).thenCall(callback);\n};\n\n/** @private */\nConnection.prototype._retrieveSingle = function(type, id, options) {\n  if (!id) {\n    return Promise.reject(new Error('Invalid record ID. Specify valid record ID value'));\n  }\n  var url = [ this._baseUrl(), \"sobjects\", type, id ].join('/');\n  if (options.fields) {\n    url += '?fields=' + options.fields.join(',');\n  }\n  return this.request({\n    method: 'GET',\n    url: url,\n    headers: options.headers,\n  });\n};\n\n/** @private */\nConnection.prototype._retrieveParallel = function(type, ids, options) {\n  if (ids.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\n  }\n  var self = this;\n  return Promise.all(\n    ids.map(function(id) {\n      return self._retrieveSingle(type, id, options).catch(function(err) {\n        if (options.allOrNone || err.errorCode !== 'NOT_FOUND') {\n          throw err;\n        }\n        return null;\n      });\n    })\n  );\n};\n\n/** @private */\nConnection.prototype._retrieveMany = function(type, ids, options) {\n  if (ids.length === 0) {\n    return Promise.resolve([]);\n  }\n  var url = [ this._baseUrl(), \"composite\", \"sobjects\", type ].join('/');\n  var self = this;\n  return (\n    options.fields ?\n      Promise.resolve(options.fields) :\n      new Promise(function(resolve, reject) {\n        self.describe$(type, function(err, so) {\n          if (err) {\n            reject(err);\n          } else {\n            var fields = so.fields.map(function(field) {\n              return field.name;\n            });\n            resolve(fields);\n          }\n        });\n      })\n  ).then(function(fields) {\n    return self.request({\n      method : 'POST',\n      url : url,\n      body : JSON.stringify({\n        ids : ids,\n        fields : fields\n      }),\n      headers : _.defaults(options.headers || {}, {\n        \"Content-Type\" : \"application/json\"\n      })\n    });\n  });\n};\n\n\n/**\n * @typedef RecordResult\n * @prop {Boolean} success - The result is succeessful or not\n * @prop {String} [id] - Record ID\n * @prop {Array.<Object>} [errors] - Errors (available when success = false)\n */\n\n/** @private */\nConnection.prototype._toRecordResult = function(id, err) {\n  var error = {\n    statusCode: err.errorCode,\n    message: err.message\n  };\n  if (err.content) { error.content = err.content; } // preserve External id duplication message\n  if (err.fields) { error.fields = err.fields; } // preserve DML exception occurred fields\n  var result = {\n    success: false,\n    errors: [error]\n  };\n  if (id) { result.id = id; }\n  return result;\n};\n\n/**\n * Synonym of Connection#create()\n *\n * @method Connection#insert\n * @param {String} type - SObject Type\n * @param {Object|Array.<Object>} records - A record or array of records to create\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Create records\n *\n * @method Connection#create\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to create\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\nConnection.prototype.insert =\nConnection.prototype.create = function(type, records, options, callback) {\n  if (!_.isString(type)) {\n    // reverse order\n    callback = options;\n    options = records;\n    records = type;\n    type = null;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  return (\n    _.isArray(records) ?\n      (this._supports('sobject-collection') ? // check whether SObject collection API is supported\n        this._createMany(type, records, options) :\n        this._createParallel(type, records, options)) :\n      this._createSingle(type, records, options)\n  ).thenCall(callback);\n};\n\n/** @private */\nConnection.prototype._createSingle = function(type, record, options) {\n  var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\n  if (!sobjectType) {\n    return Promise.reject(new Error('No SObject Type defined in record'));\n  }\n  record = _.clone(record);\n  delete record.Id;\n  delete record.type;\n  delete record.attributes;\n  var url = [ this._baseUrl(), \"sobjects\", sobjectType ].join('/');\n  return this.request({\n    method : 'POST',\n    url : url,\n    body : JSON.stringify(record),\n    headers : _.defaults(options.headers || {}, {\n      \"Content-Type\" : \"application/json\"\n    })\n  });\n};\n\n/** @private */\nConnection.prototype._createParallel = function(type, records, options) {\n  if (records.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\n  }\n  var self = this;\n  return Promise.all(\n    records.map(function(record) {\n      return self._createSingle(type, record, options).catch(function(err) {\n        // be aware that allOrNone in parallel mode will not revert the other successful requests\n        // it only raises error when met at least one failed request.\n        if (options.allOrNone || !err.errorCode) {\n          throw err;\n        }\n        return this._toRecordResult(null, err);\n      });\n    })\n  );\n};\n\n/** @private */\nConnection.prototype._createMany = function(type, records, options) {\n  if (records.length === 0) {\n    return Promise.resolve([]);\n  }\n  if (records.length > MAX_DML_COUNT && options.allowRecursive) {\n    var self = this;\n    return self._createMany(type, records.slice(0, MAX_DML_COUNT), options).then(function(rets1) {\n      return self._createMany(type, records.slice(MAX_DML_COUNT), options).then(function(rets2) {\n        return rets1.concat(rets2);\n      });\n    });\n  }\n  records = _.map(records, function(record) {\n    var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\n    if (!sobjectType) {\n      return Promise.reject(new Error('No SObject Type defined in record'));\n    }\n    record = _.clone(record);\n    delete record.Id;\n    delete record.type;\n    record.attributes = { type : sobjectType };\n    return record;\n  });\n  var url = [ this._baseUrl(), \"composite\", \"sobjects\" ].join('/');\n  return this.request({\n    method : 'POST',\n    url : url,\n    body : JSON.stringify({\n      allOrNone : options.allOrNone || false,\n      records : records\n    }),\n    headers : _.defaults(options.headers || {}, {\n      \"Content-Type\" : \"application/json\"\n    })\n  });\n};\n\n/**\n * Update records\n *\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - A record or array of records to update\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\nConnection.prototype.update = function(type, records, options, callback) {\n  if (!_.isString(type)) {\n    // reverse order\n    callback = options;\n    options = records;\n    records = type;\n    type = null;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  return (\n    _.isArray(records) ?\n      (this._supports('sobject-collection') ? // check whether SObject collection API is supported\n        this._updateMany(type, records, options) :\n        this._updateParallel(type, records, options)) :\n      this._updateSingle(type, records, options)\n  ).thenCall(callback);\n};\n\n/** @private */\nConnection.prototype._updateSingle = function(type, record, options) {\n  var id = record.Id;\n  if (!id) {\n    return Promise.reject(new Error('Record id is not found in record.'));\n  }\n  var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\n  if (!sobjectType) {\n    return Promise.reject(new Error('No SObject Type defined in record'));\n  }\n  record = _.clone(record);\n  delete record.Id;\n  delete record.type;\n  delete record.attributes;\n  var url = [ this._baseUrl(), \"sobjects\", sobjectType, id ].join('/');\n  return this.request({\n    method : 'PATCH',\n    url : url,\n    body : JSON.stringify(record),\n    headers : _.defaults(options.headers || {}, {\n      \"Content-Type\" : \"application/json\"\n    })\n  }, {\n    noContentResponse: { id : id, success : true, errors : [] }\n  });\n};\n\n/** @private */\nConnection.prototype._updateParallel = function(type, records, options) {\n  if (records.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\n  }\n  var self = this;\n  return Promise.all(\n    records.map(function(record) {\n      return self._updateSingle(type, record, options).catch(function(err) {\n        // be aware that allOrNone in parallel mode will not revert the other successful requests\n        // it only raises error when met at least one failed request.\n        if (options.allOrNone || !err.errorCode) {\n          throw err;\n        }\n        return this._toRecordResult(record.Id, err);\n      });\n    })\n  );\n};\n\n/** @private */\nConnection.prototype._updateMany = function(type, records, options) {\n  if (records.length === 0) {\n    return Promise.resolve([]);\n  }\n  if (records.length > MAX_DML_COUNT && options.allowRecursive) {\n    var self = this;\n    return self._updateMany(type, records.slice(0, MAX_DML_COUNT), options).then(function(rets1) {\n      return self._updateMany(type, records.slice(MAX_DML_COUNT), options).then(function(rets2) {\n        return rets1.concat(rets2);\n      });\n    });\n  }\n  records = _.map(records, function(record) {\n    var id = record.Id;\n    if (!id) {\n      throw new Error('Record id is not found in record.');\n    }\n    var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\n    if (!sobjectType) {\n      throw new Error('No SObject Type defined in record');\n    }\n    record = _.clone(record);\n    delete record.Id;\n    record.id = id;\n    delete record.type;\n    record.attributes = { type : sobjectType };\n    return record;\n  });\n  var url = [ this._baseUrl(), \"composite\", \"sobjects\" ].join('/');\n  return this.request({\n    method : 'PATCH',\n    url : url,\n    body : JSON.stringify({\n      allOrNone : options.allOrNone || false,\n      records : records\n    }),\n    headers : _.defaults(options.headers || {}, {\n      \"Content-Type\" : \"application/json\"\n    })\n  });\n};\n\n/**\n * Upsert records\n *\n * @param {String} type - SObject Type\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\n * @param {String} extIdField - External ID field name\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\nConnection.prototype.upsert = function(type, records, extIdField, options, callback) {\n  // You can omit \"type\" argument, when the record includes type information.\n  if (!_.isString(type)) {\n    // reverse order\n    callback = options;\n    options = extIdField;\n    extIdField = records;\n    records = type;\n    type = null;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  var self = this;\n  var isArray = _.isArray(records);\n  records = isArray ? records : [ records ];\n  if (records.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\")).thenCall(callback);\n  }\n  return Promise.all(\n    _.map(records, function(record) {\n      var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\n      var extId = record[extIdField];\n      record = _.clone(record);\n      delete record[extIdField];\n      delete record.type;\n      delete record.attributes;\n\n      var url = [ self._baseUrl(), \"sobjects\", sobjectType, extIdField, extId ].join('/');\n      return self.request({\n        method : 'PATCH',\n        url : url,\n        body : JSON.stringify(record),\n        headers : _.defaults(options.headers || {}, {\n          \"Content-Type\" : \"application/json\"\n        })\n      }, {\n        noContentResponse: { success : true, errors : [] }\n      })\n      .catch(function(err) {\n        // be aware that `allOrNone` option in upsert method will not revert the other successful requests\n        // it only raises error when met at least one failed request.\n        if (!isArray || options.allOrNone || !err.errorCode) { throw err; }\n        return self._toRecordResult(null, err);\n      })\n    })\n  ).then(function(results) {\n    return !isArray && _.isArray(results) ? results[0] : results;\n  }).thenCall(callback);\n};\n\n/**\n * Synonym of Connection#destroy()\n *\n * @method Connection#delete\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Synonym of Connection#destroy()\n *\n * @method Connection#del\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\n/**\n * Delete records\n *\n * @method Connection#destroy\n * @param {String} type - SObject Type\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\n * @param {Object} [options] - Options for rest api.\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\n */\nConnection.prototype[\"delete\"] =\nConnection.prototype.del =\nConnection.prototype.destroy = function(type, ids, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  return (\n    _.isArray(ids) ?\n      (this._supports('sobject-collection') ? // check whether SObject collection API is supported\n        this._destroyMany(type, ids, options) :\n        this._destroyParallel(type, ids, options)) :\n      this._destroySingle(type, ids, options)\n  ).thenCall(callback);\n};\n\n/** @private */\nConnection.prototype._destroySingle = function(type, id, options) {\n  var url = [ this._baseUrl(), \"sobjects\", type, id ].join('/');\n  return this.request({\n    method : 'DELETE',\n    url : url,\n    headers: options.headers || null\n  }, {\n    noContentResponse: { id : id, success : true, errors : [] }\n  });\n};\n\n/** @private */\nConnection.prototype._destroyParallel = function(type, ids, options) {\n  if (ids.length > this.maxRequest) {\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\n  }\n  var self = this;\n  return Promise.all(\n    ids.map(function(id) {\n      return self._destroySingle(type, id, options).catch(function(err) {\n        // be aware that `allOrNone` option in parallel mode will not revert the other successful requests\n        // it only raises error when met at least one failed request.\n        if (options.allOrNone || !err.errorCode) {\n          throw err;\n        }\n        return this._toRecordResult(id, err);\n      });\n    })\n  );\n};\n\n\n/** @private */\nConnection.prototype._destroyMany = function(type, ids, options) {\n  if (ids.length === 0) {\n    return Promise.resolve([]);\n  }\n  if (ids.length > MAX_DML_COUNT && options.allowRecursive) {\n    var self = this;\n    return self._destroyMany(type, ids.slice(0, MAX_DML_COUNT), options).then(function(rets1) {\n      return self._destroyMany(type, ids.slice(MAX_DML_COUNT), options).then(function(rets2) {\n        return rets1.concat(rets2);\n      });\n    });\n  }\n  var url = [ this._baseUrl(), \"composite\", \"sobjects?ids=\" ].join('/') + ids.join(',');\n  if (options.allOrNone) {\n    url += '&allOrNone=true';\n  }\n  return this.request({\n    method : 'DELETE',\n    url : url,\n    headers: options.headers || null\n  });\n};\n\n/**\n * Execute search by SOSL\n *\n * @param {String} sosl - SOSL string\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>>}\n */\nConnection.prototype.search = function(sosl, callback) {\n  var url = this._baseUrl() + \"/search?q=\" + encodeURIComponent(sosl);\n  return this.request(url).thenCall(callback);\n};\n\n/**\n * Result returned by describeSObject call\n *\n * @typedef {Object} DescribeSObjectResult\n */\n/**\n * Synonym of Connection#describe()\n *\n * @method Connection#describeSObject\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\n/**\n * Describe SObject metadata\n *\n * @method Connection#describe\n * @param {String} type - SObject Type\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\n * @returns {Promise.<DescribeSObjectResult>}\n */\nConnection.prototype.describe =\nConnection.prototype.describeSObject = function(type, callback) {\n  var url = [ this._baseUrl(), \"sobjects\", type, \"describe\" ].join('/');\n  return this.request(url).thenCall(callback);\n};\n\n\n/**\n * Result returned by describeGlobal call\n *\n * @typedef {Object} DescribeGlobalResult\n */\n/**\n * Describe global SObjects\n *\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\n * @returns {Promise.<DescribeGlobalResult>}\n */\nConnection.prototype.describeGlobal = function(callback) {\n  var url = this._baseUrl() + \"/sobjects\";\n  return this.request(url).thenCall(callback);\n};\n\n\n/**\n * Get SObject instance\n *\n * @param {String} type - SObject Type\n * @returns {SObject}\n */\nConnection.prototype.sobject = function(type) {\n  this.sobjects = this.sobjects || {};\n  var sobject = this.sobjects[type] =\n    this.sobjects[type] || new SObject(this, type);\n  return sobject;\n};\n\n/**\n * Get identity information of current user\n *\n * @param {Object} [options] - Identity call options\n * @param {Object} [options.headers] - Additional HTTP request headers sent in identity request\n * @param {Callback.<IdentityInfo>} [callback] - Callback function\n * @returns {Promise.<IdentityInfo>}\n */\nConnection.prototype.identity = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  var self = this;\n  var idUrl = this.userInfo && this.userInfo.url;\n  return Promise.resolve(\n    idUrl ?\n    { identity: idUrl } :\n    this.request({ method: 'GET', url: this._baseUrl(), headers: options.headers })\n  ).then(function(res) {\n    var url = res.identity;\n    return self.request({ method: 'GET', url: url });\n  }).then(function(res) {\n    self.userInfo = {\n      id: res.user_id,\n      organizationId: res.organization_id,\n      url: res.id\n    };\n    return res;\n  }).thenCall(callback);\n};\n\n/**\n * @typedef UserInfo\n * @prop {String} id - User ID\n * @prop {String} organizationId - Organization ID\n * @prop {String} url - Identity URL of the user\n */\n\n/**\n * Authorize (using oauth2 web server flow)\n *\n * @param {String} code - Authorization code\n * @param {Object} [params] - Optional parameters to send in token retrieval\n * @param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)\n * @param {Callback.<UserInfo>} [callback] - Callback function\n * @returns {Promise.<UserInfo>}\n */\nConnection.prototype.authorize = function(code, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n  var self = this;\n  var logger = this._logger;\n\n  return this.oauth2.requestToken(code, params).then(function(res) {\n    var userInfo = parseIdUrl(res.id);\n    self.initialize({\n      instanceUrl : res.instance_url,\n      accessToken : res.access_token,\n      refreshToken : res.refresh_token,\n      userInfo: userInfo\n    });\n    logger.debug(\"<login> completed. user id = \" + userInfo.id + \", org id = \" + userInfo.organizationId);\n    return userInfo;\n\n  }).thenCall(callback);\n\n};\n\n\n/**\n * Login to Salesforce\n *\n * @param {String} username - Salesforce username\n * @param {String} password - Salesforce password (and security token, if required)\n * @param {Callback.<UserInfo>} [callback] - Callback function\n * @returns {Promise.<UserInfo>}\n */\nConnection.prototype.login = function(username, password, callback) {\n  // register refreshDelegate for session expiration\n  this._refreshDelegate = new HttpApi.SessionRefreshDelegate(this, createUsernamePasswordRefreshFn(username, password));\n  if (this.oauth2 && this.oauth2.clientId && this.oauth2.clientSecret) {\n    return this.loginByOAuth2(username, password, callback);\n  } else {\n    return this.loginBySoap(username, password, callback);\n  }\n};\n\n/** @private **/\nfunction createUsernamePasswordRefreshFn(username, password) {\n  return function(conn, callback) {\n    conn.login(username, password, function(err) {\n      if (err) { return callback(err); }\n      callback(null, conn.accessToken);\n    });\n  };\n}\n\n/**\n * Login by OAuth2 username & password flow\n *\n * @param {String} username - Salesforce username\n * @param {String} password - Salesforce password (and security token, if required)\n * @param {Callback.<UserInfo>} [callback] - Callback function\n * @returns {Promise.<UserInfo>}\n */\nConnection.prototype.loginByOAuth2 = function(username, password, callback) {\n  var self = this;\n  var logger = this._logger;\n  return this.oauth2.authenticate(username, password).then(function(res) {\n    var userInfo = parseIdUrl(res.id);\n    self.initialize({\n      instanceUrl : res.instance_url,\n      accessToken : res.access_token,\n      userInfo: userInfo\n    });\n    logger.debug(\"<login> completed. user id = \" + userInfo.id + \", org id = \" + userInfo.organizationId);\n    return userInfo;\n\n  }).thenCall(callback);\n\n};\n\n/**\n * @private\n */\nfunction esc(str) {\n  return str && String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;')\n                           .replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n\n/**\n * Login by SOAP web service API\n *\n * @param {String} username - Salesforce username\n * @param {String} password - Salesforce password (and security token, if required)\n * @param {Callback.<UserInfo>} [callback] - Callback function\n * @returns {Promise.<UserInfo>}\n */\nConnection.prototype.loginBySoap = function(username, password, callback) {\n  var self = this;\n  var logger = this._logger;\n  var body = [\n    '<se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\">',\n      '<se:Header/>',\n      '<se:Body>',\n        '<login xmlns=\"urn:partner.soap.sforce.com\">',\n          '<username>' + esc(username) + '</username>',\n          '<password>' + esc(password) + '</password>',\n        '</login>',\n      '</se:Body>',\n    '</se:Envelope>'\n  ].join('');\n\n  var soapLoginEndpoint = [ this.loginUrl, \"services/Soap/u\", this.version ].join('/');\n\n  return this._transport.httpRequest({\n    method : 'POST',\n    url : soapLoginEndpoint,\n    body : body,\n    headers : {\n      \"Content-Type\" : \"text/xml\",\n      \"SOAPAction\" : '\"\"'\n    }\n  }).then(function(response) {\n    var m;\n    if (response.statusCode >= 400) {\n      m = response.body.match(/<faultstring>([^<]+)<\\/faultstring>/);\n      var faultstring = m && m[1];\n      throw new Error(faultstring || response.body);\n    }\n    logger.debug(\"SOAP response = \" + response.body);\n    m = response.body.match(/<serverUrl>([^<]+)<\\/serverUrl>/);\n    var serverUrl = m && m[1];\n    m = response.body.match(/<sessionId>([^<]+)<\\/sessionId>/);\n    var sessionId = m && m[1];\n    m = response.body.match(/<userId>([^<]+)<\\/userId>/);\n    var userId = m && m[1];\n    m = response.body.match(/<organizationId>([^<]+)<\\/organizationId>/);\n    var orgId = m && m[1];\n    var idUrl = soapLoginEndpoint.split('/').slice(0, 3).join('/');\n    idUrl += \"/id/\" + orgId + \"/\" + userId;\n    var userInfo = {\n      id: userId,\n      organizationId: orgId,\n      url: idUrl\n    };\n    self.initialize({\n      serverUrl: serverUrl.split('/').slice(0, 3).join('/'),\n      sessionId: sessionId,\n      userInfo: userInfo\n    });\n    logger.debug(\"<login> completed. user id = \" + userId + \", org id = \" + orgId);\n    return userInfo;\n\n  }).thenCall(callback);\n\n};\n\n/**\n * Logout the current session \n *\n * @param {Boolean} [revoke] - Revokes API Access if set to true\n * @param {Callback.<undefined>} [callback] - Callback function\n * @returns {Promise.<undefined>}\n */\nConnection.prototype.logout = function(revoke, callback) {\n  if (typeof revoke === 'function') {\n    callback = revoke;\n    revoke = false;\n  }\n\n  if (this._sessionType === \"oauth2\") {\n    return this.logoutByOAuth2(revoke, callback);\n  } else {\n    return this.logoutBySoap(revoke, callback);\n  }\n};\n\n/**\n * Logout the current session by revoking access token via OAuth2 session revoke\n *\n * @param {Boolean} [revoke] - Revokes API Access if set to true\n * @param {Callback.<undefined>} [callback] - Callback function\n * @returns {Promise.<undefined>}\n */\nConnection.prototype.logoutByOAuth2 = function(revoke, callback) {\n  if (typeof revoke === 'function') {\n    callback = revoke;\n    revoke = false;\n  }\n  var self = this;\n  var logger = this._logger;\n\n  return this.oauth2.revokeToken(revoke ? this.refreshToken : this.accessToken).then(function() {\n    // Destroy the session bound to this connection\n    self.accessToken = null;\n    self.userInfo = null;\n    self.refreshToken = null;\n    self.instanceUrl = null;\n    self.cache.clear();\n\n    // nothing useful returned by logout API, just return\n    return undefined;\n  }).thenCall(callback);\n};\n\n\n/**\n * Logout the session by using SOAP web service API\n *\n * @param {Boolean} [revoke] - Revokes API Access if set to true\n * @param {Callback.<undefined>} [callback] - Callback function\n * @returns {Promise.<undefined>}\n */\nConnection.prototype.logoutBySoap = function(revoke, callback) {\n  if (typeof revoke === 'function') {\n    callback = revoke;\n    revoke = false;\n  }\n  var self = this;\n  var logger = this._logger;\n\n  var body = [\n    '<se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\">',\n      '<se:Header>',\n        '<SessionHeader xmlns=\"urn:partner.soap.sforce.com\">',\n          '<sessionId>' + esc(revoke ? this.refreshToken : this.accessToken) + '</sessionId>',\n        '</SessionHeader>',\n      '</se:Header>',\n      '<se:Body>',\n        '<logout xmlns=\"urn:partner.soap.sforce.com\"/>',\n      '</se:Body>',\n    '</se:Envelope>'\n  ].join('');\n\n  return this._transport.httpRequest({\n    method : 'POST',\n    url : [ this.instanceUrl, \"services/Soap/u\", this.version ].join('/'),\n    body : body,\n    headers : {\n      \"Content-Type\" : \"text/xml\",\n      \"SOAPAction\" : '\"\"'\n    }\n  }).then(function(response) {\n    logger.debug(\"SOAP statusCode = \" + response.statusCode + \", response = \" + response.body);\n    if (response.statusCode >= 400) {\n      var m = response.body.match(/<faultstring>([^<]+)<\\/faultstring>/);\n      var faultstring = m && m[1];\n      throw new Error(faultstring || response.body);\n    }\n\n    // Destroy the session bound to this connection\n    self.accessToken = null;\n    self.userInfo = null;\n    self.refreshToken = null;\n    self.instanceUrl = null;\n    self.cache.clear();\n\n    // nothing useful returned by logout API, just return\n    return undefined;\n\n  }).thenCall(callback);\n};\n\n/**\n * List recently viewed records\n *\n * @param {String} [type] - SObject type\n * @param {Number} [limit] - Limit num to fetch\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>>}\n */\nConnection.prototype.recent = function(type, limit, callback) {\n  if (!_.isString(type)) {\n    callback = limit;\n    limit = type;\n    type = undefined;\n  }\n  if (!_.isNumber(limit)) {\n    callback = limit;\n    limit = undefined;\n  }\n  var url;\n  if (type) {\n    url = [ this._baseUrl(), \"sobjects\", type ].join('/');\n    return this.request(url).then(function(res) {\n      return limit ? res.recentItems.slice(0, limit) : res.recentItems;\n    }).thenCall(callback);\n  } else {\n    url = this._baseUrl() + \"/recent\";\n    if (limit) {\n      url += \"?limit=\" + limit;\n    }\n    return this.request(url).thenCall(callback);\n  }\n\n};\n\n/**\n * @typedef {Object} UpdatedRecordsInfo\n * @prop {String} latestDateCovered - The timestamp of the last date covered.\n * @prop {Array.<String>} ids - Updated record IDs.\n */\n\n/**\n * Retrieve updated records\n *\n * @param {String} type - SObject Type\n * @param {String|Date} start - start date or string representing the start of the interval\n * @param {String|Date} end - start date or string representing the end of the interval must be > start\n * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function\n * @returns {Promise.<UpdatedRecordsInfo>}\n */\nConnection.prototype.updated = function (type, start, end, callback) {\n  var url = [ this._baseUrl(), \"sobjects\", type, \"updated\" ].join('/');\n\n  if (typeof start === 'string') {\n    start = new Date(start);\n  }\n\n  if (start instanceof Date) {\n    start = formatDate(start);\n  }\n\n  if (start) {\n    url += \"?start=\" + encodeURIComponent(start);\n  }\n\n  if (typeof end === 'string') {\n    end = new Date(end);\n  }\n\n  if (end instanceof Date) {\n    end = formatDate(end);\n  }\n\n  if (end) {\n    url += \"&end=\" + encodeURIComponent(end);\n  }\n\n  return this.request(url).thenCall(callback);\n};\n\n/**\n * @typedef {Object} DeletedRecordsInfo\n * @prop {String} earliestDateAvailable - The timestamp of the earliest date available\n * @prop {String} latestDateCovered - The timestamp of the last date covered\n * @prop {Array.<Object>} deletedRecords - Updated records\n * @prop {String} deletedRecords.id - Record ID\n * @prop {String} deletedRecords.deletedDate - The timestamp when this record was deleted\n */\n\n/**\n * Retrieve deleted records\n *\n * @param {String} type - SObject Type\n * @param {String|Date} start - start date or string representing the start of the interval\n * @param {String|Date} end - start date or string representing the end of the interval\n * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function\n * @returns {Promise.<DeletedRecordsInfo>}\n */\nConnection.prototype.deleted = function (type, start, end, callback) {\n  var url = [ this._baseUrl(), \"sobjects\", type, \"deleted\" ].join('/');\n\n  if (typeof start === 'string') {\n    start = new Date(start);\n  }\n\n  if (start instanceof Date) {\n    start = formatDate(start);\n  }\n\n  if (start) {\n    url += \"?start=\" + encodeURIComponent(start);\n  }\n\n  if (typeof end === 'string') {\n    end = new Date(end);\n  }\n\n  if (end instanceof Date) {\n    end = formatDate(end);\n  }\n\n  if (end) {\n    url += \"&end=\" + encodeURIComponent(end);\n  }\n\n  return this.request(url).thenCall(callback);\n};\n\n\n/**\n * @typedef {Object} TabsInfo - See the API document for detail structure\n */\n\n/**\n * Returns a list of all tabs\n *\n * @param {Callback.<TabsInfo>} [callback] - Callback function\n * @returns {Promise.<TabsInfo>}\n */\nConnection.prototype.tabs = function(callback) {\n  var url = [ this._baseUrl(), \"tabs\" ].join('/');\n  return this.request(url).thenCall(callback);\n};\n\n\n/**\n * @typedef {Object} LimitsInfo - See the API document for detail structure\n */\n\n/**\n * Returns curren system limit in the organization\n *\n * @param {Callback.<LimitsInfo>} [callback] - Callback function\n * @returns {Promise.<LimitsInfo>}\n */\nConnection.prototype.limits = function(callback) {\n  var url = [ this._baseUrl(), \"limits\" ].join('/');\n  return this.request(url).thenCall(callback);\n};\n\n\n/**\n * @typedef {Object} ThemeInfo - See the API document for detail structure\n */\n\n/**\n * Returns a theme info\n *\n * @param {Callback.<ThemeInfo>} [callback] - Callback function\n * @returns {Promise.<ThemeInfo>}\n */\nConnection.prototype.theme = function(callback) {\n  var url = [ this._baseUrl(), \"theme\" ].join('/');\n  return this.request(url).thenCall(callback);\n};\n\n/**\n * Returns all registered global quick actions\n *\n * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}\n */\nConnection.prototype.quickActions = function(callback) {\n  return this.request(\"/quickActions\").thenCall(callback);\n};\n\n/**\n * Get reference for specified global quick aciton\n *\n * @param {String} actionName - Name of the global quick action\n * @returns {QuickAction}\n */\nConnection.prototype.quickAction = function(actionName) {\n  return new QuickAction(this, \"/quickActions/\" + actionName);\n};\n"]},"metadata":{},"sourceType":"script"}